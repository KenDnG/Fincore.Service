// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using FINCORE.LIBRARY.DTO.EntityFramework.Acquisition.AcquisitionModel;

namespace FINCORE.LIBRARY.DTO.EntityFramework.Acquisition.AcquisitionContext
{
    public partial class AcquisitionContext : DbContext
    {
        public AcquisitionContext()
        {
        }

        public AcquisitionContext(DbContextOptions<AcquisitionContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Amortization> Amortization { get; set; }
        public virtual DbSet<Arcard> Arcard { get; set; }
        public virtual DbSet<CfverifikasiKonsumen> CfverifikasiKonsumen { get; set; }
        public virtual DbSet<CfverifikasiKonsumenAplikasiIn> CfverifikasiKonsumenAplikasiIn { get; set; }
        public virtual DbSet<LogError> LogError { get; set; }
        public virtual DbSet<NeoScoreLog> NeoScoreLog { get; set; }
        public virtual DbSet<StorageLocation> StorageLocation { get; set; }
        public virtual DbSet<TrApprovalHistory> TrApprovalHistory { get; set; }
        public virtual DbSet<TrAutoNumber> TrAutoNumber { get; set; }
        public virtual DbSet<TrBlacklistDaily> TrBlacklistDaily { get; set; }
        public virtual DbSet<TrBpkb> TrBpkb { get; set; }
        public virtual DbSet<TrBpkbLoan> TrBpkbLoan { get; set; }
        public virtual DbSet<TrCa> TrCa { get; set; }
        public virtual DbSet<TrCaAccountDetail> TrCaAccountDetail { get; set; }
        public virtual DbSet<TrCaAccountMutation> TrCaAccountMutation { get; set; }
        public virtual DbSet<TrCaApprovalProgress> TrCaApprovalProgress { get; set; }
        public virtual DbSet<TrCaDocuments> TrCaDocuments { get; set; }
        public virtual DbSet<TrCaFinancial> TrCaFinancial { get; set; }
        public virtual DbSet<TrCaPrintHistory> TrCaPrintHistory { get; set; }
        public virtual DbSet<TrCaSlik> TrCaSlik { get; set; }
        public virtual DbSet<TrCas> TrCas { get; set; }
        public virtual DbSet<TrCasAcDetail> TrCasAcDetail { get; set; }
        public virtual DbSet<TrCasAcHeader> TrCasAcHeader { get; set; }
        public virtual DbSet<TrCasApuppt> TrCasApuppt { get; set; }
        public virtual DbSet<TrCasCorporateDocument> TrCasCorporateDocument { get; set; }
        public virtual DbSet<TrCasFinancial> TrCasFinancial { get; set; }
        public virtual DbSet<TrCasInstallment> TrCasInstallment { get; set; }
        public virtual DbSet<TrCasPaymentPoint> TrCasPaymentPoint { get; set; }
        public virtual DbSet<TrCasPhotoDetail> TrCasPhotoDetail { get; set; }
        public virtual DbSet<TrCasReferences> TrCasReferences { get; set; }
        public virtual DbSet<TrCasRepeatOrder> TrCasRepeatOrder { get; set; }
        public virtual DbSet<TrCm> TrCm { get; set; }
        public virtual DbSet<TrCmInsurance> TrCmInsurance { get; set; }
        public virtual DbSet<TrCmLifeInsuranceCredit> TrCmLifeInsuranceCredit { get; set; }
        public virtual DbSet<TrCmPriceAwal> TrCmPriceAwal { get; set; }
        public virtual DbSet<TrCmSubsidiDp> TrCmSubsidiDp { get; set; }
        public virtual DbSet<TrCmUmc> TrCmUmc { get; set; }
        public virtual DbSet<TrDealerOrderSourceHeader> TrDealerOrderSourceHeader { get; set; }
        public virtual DbSet<TrDealerOrderSourceTac> TrDealerOrderSourceTac { get; set; }
        public virtual DbSet<TrDealerOrderSourceThirdParty> TrDealerOrderSourceThirdParty { get; set; }
        public virtual DbSet<TrGenerateCode> TrGenerateCode { get; set; }
        public virtual DbSet<TrGenerateCodeHistory> TrGenerateCodeHistory { get; set; }
        public virtual DbSet<TrHierarchyTransaction> TrHierarchyTransaction { get; set; }
        public virtual DbSet<TrItems> TrItems { get; set; }
        public virtual DbSet<TrNpp> TrNpp { get; set; }
        public virtual DbSet<TrNppPrint> TrNppPrint { get; set; }
        public virtual DbSet<TrPo> TrPo { get; set; }
        public virtual DbSet<TrPoSendToEmail> TrPoSendToEmail { get; set; }
        public virtual DbSet<TrPoolingOrders> TrPoolingOrders { get; set; }
        public virtual DbSet<TrSendPoLog> TrSendPoLog { get; set; }
        public virtual DbSet<TrVerificationCustomer> TrVerificationCustomer { get; set; }
        public virtual DbSet<TrVerificationCustomerApplicationIn> TrVerificationCustomerApplicationIn { get; set; }
        public virtual DbSet<VwAgreementOld> VwAgreementOld { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Amortization>(entity =>
            {
                entity.HasKey(e => new { e.BranchId, e.CreditId, e.Period })
                    .HasName("PK_Amort");

                entity.Property(e => e.BranchId)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CreditId)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CollectionDate).HasColumnType("datetime");

                entity.Property(e => e.DtmCrt).HasColumnType("datetime");

                entity.Property(e => e.DtmUpd).HasColumnType("datetime");

                entity.Property(e => e.Installment).HasColumnType("numeric(21, 2)");

                entity.Property(e => e.Interest).HasColumnType("numeric(21, 2)");

                entity.Property(e => e.OstAr)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("OstAR");

                entity.Property(e => e.OstOp)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("OstOP");

                entity.Property(e => e.OstUli)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("OStULI");

                entity.Property(e => e.Principal).HasColumnType("numeric(21, 2)");

                entity.Property(e => e.UsrCrt)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UsrUpd)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Arcard>(entity =>
            {
                entity.HasKey(e => new { e.CreditId, e.Period, e.PeriodSecq });

                entity.ToTable("ARCard");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ArcardId)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ARCardId");

                entity.Property(e => e.ArpayDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ARPayDate");

                entity.Property(e => e.ArvoucherNo)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("ARVoucherNo");

                entity.Property(e => e.BranchId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CollectionDate).HasColumnType("datetime");

                entity.Property(e => e.CollectionId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DtmCrt).HasColumnType("datetime");

                entity.Property(e => e.DtmUpd).HasColumnType("datetime");

                entity.Property(e => e.FirstInstallment).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Installment).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Interest).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsAr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IsAR")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.OstAr)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("OstAR");

                entity.Property(e => e.OstOp)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("OstOP");

                entity.Property(e => e.OstUli)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("OStULI");

                entity.Property(e => e.PayAmt).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.PayDate).HasColumnType("datetime");

                entity.Property(e => e.Principal).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UsrCrt)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UsrUpd)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CfverifikasiKonsumen>(entity =>
            {
                entity.HasKey(e => e.VerifikasiNo)
                    .HasName("PK_Verifikasino");

                entity.ToTable("CFVerifikasiKonsumen");

                entity.Property(e => e.VerifikasiNo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AgreementNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CatatanLain)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Cmno)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CMNo");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.HubunganPenerimaMotor)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.JamKonfirmasi)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.JumlahNominalAdmin).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.LokasiDiTerima)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NamaPasanganStnk)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NamaPasanganSTNK");

                entity.Property(e => e.NamaPenerimaMotor)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NamaStnk)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NamaSTNK");

                entity.Property(e => e.OptAngsuranSebenarnya).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.OptDpsetor).HasColumnName("OptDPSetor");

                entity.Property(e => e.OptDpsetorSebenarnya)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("OptDPSetorSebenarnya");

                entity.Property(e => e.OptPencairanMb).HasColumnName("OptPencairanMB");

                entity.Property(e => e.OptPencairanMbsebenarnya)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("OptPencairanMBSebenarnya");

                entity.Property(e => e.OptTglTerimaMotorSebenarnya).HasColumnType("datetime");

                entity.Property(e => e.OptTipeMotorSebenarnya)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PermintaanJt)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PermintaanJT");

                entity.Property(e => e.StatusVerifikasi)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TanggalBayar).HasColumnType("datetime");

                entity.Property(e => e.TglApproveNpp)
                    .HasColumnType("datetime")
                    .HasColumnName("TglApproveNPP");

                entity.Property(e => e.TglKonfirmasi).HasColumnType("datetime");

                entity.Property(e => e.TglTerimaTagihan).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<CfverifikasiKonsumenAplikasiIn>(entity =>
            {
                entity.HasKey(e => new { e.Cmno, e.IdbindField })
                    .HasName("PK_CmNoIdBlind");

                entity.ToTable("CFVerifikasiKonsumen_AplikasiIN");

                entity.Property(e => e.Cmno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CMNo");

                entity.Property(e => e.IdbindField).HasColumnName("IDBindField");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FileNameAplikasiIn).IsUnicode(false);

                entity.Property(e => e.FilePathAplikasiIn).IsUnicode(false);

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<LogError>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("log_error");

                entity.Property(e => e.ErrorDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("error_date_time");

                entity.Property(e => e.ErrorMessage)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("error_message");

                entity.Property(e => e.ErrorNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("error_number");

                entity.Property(e => e.ErrorProcedure)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("error_procedure");

                entity.Property(e => e.ErrorState)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("error_state");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("user_name");
            });

            modelBuilder.Entity<NeoScoreLog>(entity =>
            {
                entity.ToTable("neo_score_log");

                entity.Property(e => e.Id)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id");

                entity.Property(e => e.LogDate)
                    .HasColumnType("datetime")
                    .HasColumnName("log_date");

                entity.Property(e => e.Menu)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("menu");

                entity.Property(e => e.MenuDetail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("menu_detail");

                entity.Property(e => e.Method)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("method");

                entity.Property(e => e.Parameter)
                    .IsUnicode(false)
                    .HasColumnName("parameter");

                entity.Property(e => e.Result)
                    .IsUnicode(false)
                    .HasColumnName("result");

                entity.Property(e => e.Status)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.Property(e => e.TotalScore).HasColumnName("total_score");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("user_id");
            });

            modelBuilder.Entity<StorageLocation>(entity =>
            {
                entity.HasKey(e => e.LocationId);

                entity.ToTable("storage_location");

                entity.Property(e => e.LocationId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("location_id");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("location_name");
            });

            modelBuilder.Entity<TrApprovalHistory>(entity =>
            {
                entity.HasKey(e => e.RowId)
                    .HasName("PK_tr_CA_approval_history");

                entity.ToTable("tr_approval_history");

                entity.Property(e => e.RowId)
                    .HasColumnName("row_id")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on");

                entity.Property(e => e.Decision)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("decision");

                entity.Property(e => e.EmployeeId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("employee_id");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on");

                entity.Property(e => e.Reason)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("reason");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("status")
                    .IsFixedLength();

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("submit_date");

                entity.Property(e => e.TransId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("trans_id");

                entity.Property(e => e.TransTypeId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("trans_type_id");
            });

            modelBuilder.Entity<TrAutoNumber>(entity =>
            {
                entity.HasKey(e => new { e.Prefix, e.CompanyId, e.BranchId, e.Period })
                    .HasName("pk_tr_auto_number");

                entity.ToTable("tr_auto_number");

                entity.Property(e => e.Prefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("prefix");

                entity.Property(e => e.CompanyId)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("company_id");

                entity.Property(e => e.BranchId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("branch_id");

                entity.Property(e => e.Period)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("period");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on");

                entity.Property(e => e.LastNumber).HasColumnName("last_number");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on");
            });

            modelBuilder.Entity<TrBlacklistDaily>(entity =>
            {
                entity.HasKey(e => e.CreditId);

                entity.ToTable("tr_blacklist_daily");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("credit_id");

                entity.Property(e => e.BlacklistReasonDesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("blacklist_reason_desc");

                entity.Property(e => e.BlacklistReasonId).HasColumnName("blacklist_reason_id");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on");
            });

            modelBuilder.Entity<TrBpkb>(entity =>
            {
                entity.HasKey(e => e.CreditId);

                entity.ToTable("tr_BPKB");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.ApprovedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("approved_by")
                    .HasComment("user yang menyetujui");

                entity.Property(e => e.BastBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("BAST_by")
                    .HasComment("user BAST");

                entity.Property(e => e.BastDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BAST_date")
                    .HasComment("tanggal BAST");

                entity.Property(e => e.BpkbDate)
                    .HasColumnType("datetime")
                    .HasColumnName("BPKB_date")
                    .HasComment("tanggal BPKB");

                entity.Property(e => e.BpkbDifferenceDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("BPKB_difference_desc")
                    .HasComment("deskripsi perbedaan BPKB");

                entity.Property(e => e.BpkbIn)
                    .HasColumnType("datetime")
                    .HasColumnName("BPKB_in")
                    .HasComment("tanggal BPKB masuk");

                entity.Property(e => e.BpkbNo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BPKB_no")
                    .HasComment("nomor BPKB");

                entity.Property(e => e.BpkbOut)
                    .HasColumnType("datetime")
                    .HasColumnName("BPKB_out")
                    .HasComment("tanggal BPKB keluar");

                entity.Property(e => e.BpkbStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BPKB_status")
                    .HasComment("status BPKB");

                entity.Property(e => e.BranchId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("branch_id")
                    .HasComment("ID cabang");

                entity.Property(e => e.CarNo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("car_no")
                    .HasComment("nomor mobil");

                entity.Property(e => e.CompanyId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("company_id")
                    .HasComment("ID perusahaan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.DeadlineDate)
                    .HasColumnType("datetime")
                    .HasColumnName("deadline_date")
                    .HasComment("tanggal deadline");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("invoice_date")
                    .HasComment("tanggal invoice");

                entity.Property(e => e.InvoiceNo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("invoice_no")
                    .HasComment("nomor invoice");

                entity.Property(e => e.IsClose)
                    .HasColumnName("is_close")
                    .HasComment("indikator close atau tidak");

                entity.Property(e => e.IsMb)
                    .HasColumnName("is_MB")
                    .HasComment("indikator motor/mobil bekas atau tidak");

                entity.Property(e => e.IsPrintSk)
                    .HasColumnName("is_print_SK")
                    .HasComment("indikator print SK atau tidak");

                entity.Property(e => e.IsPrintThirdParty)
                    .HasColumnName("is_print_third_party")
                    .HasComment("indikator print pihak ke 3 atau tidak");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("location_code")
                    .HasComment("kode lokasi");

                entity.Property(e => e.OutCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("out_code")
                    .HasComment("kode keluar");

                entity.Property(e => e.PrintFirstByThirdParty)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("print_first_by_third_party")
                    .HasComment("user yang pertama kali print pihak ke 3");

                entity.Property(e => e.PrintFirstDateThirdParty)
                    .HasColumnType("datetime")
                    .HasColumnName("print_first_date_third_party")
                    .HasComment("tanggal pertama kali print pihak ke 3");

                entity.Property(e => e.PrintLastByThirdParty)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("print_last_by_third_party")
                    .HasComment("user yang terakhir kali print pihak ke 3");

                entity.Property(e => e.PrintLastDateThirdParty)
                    .HasColumnType("datetime")
                    .HasColumnName("print_last_date_third_party")
                    .HasComment("tanggal terakhir kali print pihak ke 3");

                entity.Property(e => e.PrintedFirstBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("printed_first_by")
                    .HasComment("user yang pertama kali print SK");

                entity.Property(e => e.PrintedFirstDate)
                    .HasColumnType("datetime")
                    .HasColumnName("printed_first_date")
                    .HasComment("tanggal pertama kali print SK");

                entity.Property(e => e.PrintedLastBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("printed_last_by")
                    .HasComment("user yang terakhir kali print SK");

                entity.Property(e => e.PrintedLastDate)
                    .HasColumnType("datetime")
                    .HasColumnName("printed_last_date")
                    .HasComment("tanggal terakhir kali print SK");

                entity.Property(e => e.ReceiverCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("receiver_code")
                    .HasComment("kode penerima");

                entity.Property(e => e.SecquenceNo)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("secquence_no")
                    .HasComment("nomor urutan");

                entity.Property(e => e.SumPrintSk)
                    .HasColumnName("sum_print_SK")
                    .HasComment("total berapa kali print SK");

                entity.Property(e => e.SumPrintThirdParty)
                    .HasColumnName("sum_print_third_party")
                    .HasComment("total berapa kali print pihak ke 3");
            });

            modelBuilder.Entity<TrBpkbLoan>(entity =>
            {
                entity.HasKey(e => new { e.CreditId, e.SequenceNo })
                    .HasName("tr_BPKB_loan_PK");

                entity.ToTable("tr_BPKB_loan");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.SequenceNo).HasColumnName("sequence_no");

                entity.Property(e => e.Address)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("address")
                    .HasComment("alamat");

                entity.Property(e => e.BpkbLoanDate)
                    .HasColumnType("datetime")
                    .HasColumnName("BPKB_loan_date")
                    .HasComment("tanggal pinjam BPKB");

                entity.Property(e => e.BpkbPlanDate)
                    .HasColumnType("datetime")
                    .HasColumnName("BPKB_plan_date")
                    .HasComment("tanggal rencana BPKB");

                entity.Property(e => e.BpkbReturn)
                    .HasColumnType("datetime")
                    .HasColumnName("BPKB_return")
                    .HasComment("tanggal kembali BPKB");

                entity.Property(e => e.BranchId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("branch_id")
                    .HasComment("ID cabang");

                entity.Property(e => e.CompanyId)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("company_id")
                    .HasComment("ID perusahaan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.LoanReason)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("loan_reason")
                    .HasComment("alasan pinjam");

                entity.Property(e => e.LoanReceiverCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("loan_receiver_code")
                    .HasComment("kode penerima pinjaman");

                entity.Property(e => e.MoneyReceived)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("money_received")
                    .HasComment("nominal uang yang diterima");

                entity.Property(e => e.PreviousLocationCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("previous_location_code")
                    .HasComment("kode lokasi sebelumnya");

                entity.Property(e => e.PreviousSequenceNo)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("previous_sequence_no")
                    .HasComment("nomor urutan sebelumnya");

                entity.Property(e => e.ReceiverCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("receiver_code")
                    .HasComment("kode penerima");

                entity.Property(e => e.ReceiverName)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("receiver_name")
                    .HasComment("nama penerima");

                entity.Property(e => e.ReceiverPhone)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("receiver_phone")
                    .HasComment("nomor telepon penerima");

                entity.Property(e => e.TotalOfLoan)
                    .HasColumnName("total_of_loan")
                    .HasComment("jumlah pinjam");

                entity.Property(e => e.TypeOfServiceBureauNecessity)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("type_of_service_bureau_necessity")
                    .HasComment("jenis layanan kebutuhan birokrasi");
            });

            modelBuilder.Entity<TrCa>(entity =>
            {
                entity.HasKey(e => e.CaNo);

                entity.ToTable("tr_CA");

                entity.Property(e => e.CaNo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CA_no")
                    .HasComment("nomor CA");

                entity.Property(e => e.ApplicantValidation)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("applicant_validation")
                    .HasComment("validasi data pemohon");

                entity.Property(e => e.Approval)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("approval")
                    .HasComment("jumlah approval");

                entity.Property(e => e.BeneficialOwner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("beneficial_owner")
                    .HasComment("pemilik manfaat");

                entity.Property(e => e.BranchId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("branch_id")
                    .HasComment("ID cabang");

                entity.Property(e => e.BusinessActivity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("business_activity")
                    .HasComment("aktifitas usaha");

                entity.Property(e => e.BusinessEnvironment)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("business_environment")
                    .HasComment("lingkungan bisnis");

                entity.Property(e => e.CaDecision)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CA_decision")
                    .HasComment("keputusan CA");

                entity.Property(e => e.CaNik)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CA_nik")
                    .HasComment("NIK (Nomor Induk Karyawan) CA");

                entity.Property(e => e.CaStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CA_status")
                    .HasComment("status CA");

                entity.Property(e => e.CompanyId)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("company_id")
                    .HasComment("ID perusahaan");

                entity.Property(e => e.CompanyOwnership)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("company_ownership")
                    .HasComment("kepemilikan perusahaan");

                entity.Property(e => e.CorporateLegalEntity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("corporate_legal_entity")
                    .HasComment("badan hukum");

                entity.Property(e => e.CorporateScale)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("corporate_scale")
                    .HasComment("skala perusahaan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.CreditAnalysis)
                    .HasColumnType("text")
                    .HasColumnName("credit_analysis")
                    .HasComment("keterangan CA");

                entity.Property(e => e.CreditId)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.EnvironmentCondition)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("environment_condition")
                    .HasComment("kondisi lingkungan");

                entity.Property(e => e.HouseCondition)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("house_condition")
                    .HasComment("kondisi rumah");

                entity.Property(e => e.LastPrintedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_printed_by")
                    .HasComment("user yang melakukan print terakhir");

                entity.Property(e => e.LastPrintedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_printed_on")
                    .HasComment("tanggal print terakhir");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.LengthOfStay)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("length_of_stay")
                    .HasComment("lama tinggal");

                entity.Property(e => e.Mrp)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("MRP")
                    .HasComment("nominal MRP");

                entity.Property(e => e.NegativeAspects)
                    .HasColumnType("text")
                    .HasColumnName("negative_aspects")
                    .HasComment("aspek negatif");

                entity.Property(e => e.PositiveAspects)
                    .HasColumnType("text")
                    .HasColumnName("positive_aspects")
                    .HasComment("aspek positif");

                entity.Property(e => e.ReferenceValidation)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("reference_validation")
                    .HasComment("validasi pihak ke-3");

                entity.Property(e => e.RoadAccess)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("road_access")
                    .HasComment("akses jalan");

                entity.Property(e => e.SlikLink)
                    .HasColumnType("text")
                    .HasColumnName("SLIK_link")
                    .HasComment("link SLIK");

                entity.Property(e => e.SpkDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SPK_date")
                    .HasComment("tanggal SPK");

                entity.Property(e => e.SpkName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SPK_name")
                    .HasComment("nama SPK");

                entity.Property(e => e.SubmissionValidation)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("submission_validation")
                    .HasComment("validasi unit pengajuan");

                entity.Property(e => e.SumOfPrint)
                    .HasColumnName("sum_of_print")
                    .HasComment("total berapa kali print");

                entity.Property(e => e.VertelValidationReason)
                    .HasColumnType("text")
                    .HasColumnName("vertel_validation_reason")
                    .HasComment("alasan validasi vertel");
            });

            modelBuilder.Entity<TrCaAccountDetail>(entity =>
            {
                entity.HasKey(e => e.AccountDetailId);

                entity.ToTable("tr_CA_account_detail");

                entity.Property(e => e.AccountDetailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("account_detail_id")
                    .HasComment("ID detail rekening CA");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("account_name")
                    .HasComment("nama rekening");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("account_number")
                    .HasComment("nomor rekening");

                entity.Property(e => e.BankId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("bank_id")
                    .HasComment("ID bank");

                entity.Property(e => e.CaNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CA_no")
                    .HasComment("nomor CA");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.PreviousMonthBalance)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("previous_month_balance")
                    .HasComment("saldo bulan sebelumnya");
            });

            modelBuilder.Entity<TrCaAccountMutation>(entity =>
            {
                entity.ToTable("tr_CA_account_mutation");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("ID mutasi rekening CA");

                entity.Property(e => e.AccountDetailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("account_detail_id")
                    .HasComment("ID detail rekening CA");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.EndOfMonthBalance)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("end_of_month_balance")
                    .HasComment("saldo akhir bulan");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.MutationMonth)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("mutation_month")
                    .HasComment("bulan mutasi");

                entity.Property(e => e.MutationYear)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("mutation_year")
                    .HasComment("tahun mutasi");

                entity.Property(e => e.TotalCreditMutation)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("total_credit_mutation")
                    .HasComment("total mutasi kredit");

                entity.Property(e => e.TotalDebitMutation)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("total_debit_mutation")
                    .HasComment("total mutasi debit");

                entity.HasOne(d => d.AccountDetail)
                    .WithMany(p => p.TrCaAccountMutation)
                    .HasForeignKey(d => d.AccountDetailId)
                    .HasConstraintName("FK_tr_CA_account_mutation_tr_CA_account_detail");
            });

            modelBuilder.Entity<TrCaApprovalProgress>(entity =>
            {
                entity.HasKey(e => new { e.CompanyId, e.CfNo, e.ApprovalSchemeId, e.ApprovalLevelId, e.Nik });

                entity.ToTable("tr_CA_approval_progress");

                entity.Property(e => e.CompanyId)
                    .HasColumnName("company_id")
                    .HasComment("ID perusahaan");

                entity.Property(e => e.CfNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CF_No")
                    .HasComment("nomor CF");

                entity.Property(e => e.ApprovalSchemeId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("approval_scheme_id")
                    .IsFixedLength()
                    .HasComment("ID skema approval");

                entity.Property(e => e.ApprovalLevelId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("approval_level_id")
                    .IsFixedLength()
                    .HasComment("ID tingkat approval");

                entity.Property(e => e.Nik)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NIK")
                    .HasComment("nomor induk karyawan");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsNotification)
                    .HasColumnName("is_notification")
                    .HasComment("indikator notifikasi atau tidak");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.LevelActive)
                    .HasColumnName("level_active")
                    .HasComment("indikator aktif atau tidak");

                entity.Property(e => e.LevelCompleteDate)
                    .HasColumnType("datetime")
                    .HasColumnName("level_complete_date")
                    .HasComment("tanggal selesai approval");

                entity.Property(e => e.LevelEscalationDay)
                    .HasColumnName("level_escalation_day")
                    .HasComment("hari eskalasi");

                entity.Property(e => e.LevelEscalationType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("level_escalation_type")
                    .IsFixedLength()
                    .HasComment("tipe eskalasi");

                entity.Property(e => e.LevelQuorum)
                    .HasColumnName("level_quorum")
                    .HasComment("jumlah anggota minimum");

                entity.Property(e => e.LevelRequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("level_request_date")
                    .HasComment("tanggal request approval");

                entity.Property(e => e.MediaApprove)
                    .HasColumnName("media_approve")
                    .HasComment("media menyetujui");

                entity.Property(e => e.NextApprovalLevelId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("next_approval_level_id")
                    .IsFixedLength()
                    .HasComment("ID tingkat approval selanjutnya");

                entity.Property(e => e.PolicyId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("policy_id")
                    .IsFixedLength()
                    .HasComment("ID polis");

                entity.Property(e => e.UserDtmStatusChanged)
                    .HasColumnType("datetime")
                    .HasColumnName("user_dtm_status_changed")
                    .HasComment("tanggal user mengubah tipe status approval");

                entity.Property(e => e.UserKeteranganApproval)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("user_keterangan_approval")
                    .HasComment("keterangan approval user");

                entity.Property(e => e.UserMandatory)
                    .HasColumnName("user_mandatory")
                    .HasComment("user wajib melakukan proses approval");

                entity.Property(e => e.UserStatusType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("user_status_type")
                    .IsFixedLength()
                    .HasComment("tipe status approval user");
            });

            modelBuilder.Entity<TrCaDocuments>(entity =>
            {
                entity.ToTable("tr_CA_documents");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("ID dokumen approval CA");

                entity.Property(e => e.AccountCheckResult)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("account_check_result")
                    .HasComment("hasil cek rekening");

                entity.Property(e => e.AktePendirianCheckResult)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("akte_pendirian_check_result")
                    .HasComment("hasil cek akte pendirian");

                entity.Property(e => e.AktePendirianStatement)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("akte_pendirian_statement")
                    .HasComment("pernyataan akte pendirian");

                entity.Property(e => e.AktePerubahanCheckResult)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("akte_perubahan_check_result")
                    .HasComment("hasil cek akte perubahan");

                entity.Property(e => e.AktePerubahanStatement)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("akte_perubahan_statement")
                    .HasComment("pernyataan akte perubahan");

                entity.Property(e => e.BentukBuktiKepemilikanRumah)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("bentuk bukti kepemilikan rumah");

                entity.Property(e => e.CaNo)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CA_no")
                    .HasComment("nomor CA");

                entity.Property(e => e.CheckingAccountStatement)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("checking_account_statement")
                    .HasComment("pernyataan pengecekan rekening");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.ExpiredDateStnkbpkb)
                    .HasColumnType("date")
                    .HasColumnName("ExpiredDateSTNKBPKB")
                    .HasComment("tanggal kadaluarsa STNK dan BPKB");

                entity.Property(e => e.HasilCheckBuktiKepemilikanRumah)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("hasil cek bukti kepemilikan rumah");

                entity.Property(e => e.HasilCheckKartuKeluarga)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("hasil cek kartu keluarga");

                entity.Property(e => e.HasilCheckKtppasanganDirutDukcapil)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HasilCheckKTPPasangan/DirutDukcapil")
                    .HasComment("hasil cek KTP pasangan melalui sistem Dukcapil");

                entity.Property(e => e.HasilCheckKtppasanganDirutPlaystore)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HasilCheckKTPPasangan/DirutPlaystore")
                    .HasComment("hasil cek KTP pasangan melalui apps playstore");

                entity.Property(e => e.HasilCheckKtppemohonKomisarisDukcapil)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HasilCheckKTPPemohon/komisarisDukcapil")
                    .HasComment("hasil cek KTP pemohon melalui sistem Dukcapil");

                entity.Property(e => e.HasilCheckKtppemohonKomisarisPlaystore)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HasilCheckKTPPemohon/komisarisPlaystore")
                    .HasComment("hasil cek KTP pemohon melalui apps playstore");

                entity.Property(e => e.HasilCheckKtppenjaminDirekturDukcapil)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HasilCheckKTPPenjamin/DirekturDukcapil")
                    .HasComment("hasil cek KTP penjamin melalui sistem Dukcapil");

                entity.Property(e => e.HasilCheckKtppenjaminDirekturPlaystore)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HasilCheckKTPPenjamin/DirekturPlaystore")
                    .HasComment("hasil cek KTP penjamin melalui apps playstore");

                entity.Property(e => e.HasilCheckMedsos)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("hasil cek media sosial");

                entity.Property(e => e.HasilCheckNpwpdirektur)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HasilCheckNPWPDirektur")
                    .HasComment("hasil cek NPWP direktur");

                entity.Property(e => e.HasilCheckNpwpdirekturUtama)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HasilCheckNPWPDirekturUtama")
                    .HasComment("hasil cek NPWP direktur utama");

                entity.Property(e => e.HasilCheckNpwpkomisaris)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HasilCheckNPWPKomisaris")
                    .HasComment("hasil cek NPWP komisaris");

                entity.Property(e => e.HasilCheckRekening)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("hasil cek rekening");

                entity.Property(e => e.HasilCheckRekeningKoran)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("hasil cek rekening koran");

                entity.Property(e => e.HasilCheckSurveyDomisiliPemohonPerusahaan)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HasilCheckSurveyDomisiliPemohon/perusahaan")
                    .HasComment("hasil cek survey domisili pemohon atau perusahaan");

                entity.Property(e => e.HasilCheckSurveyDomisiliPenjaminPenggunaUnit)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HasilCheckSurveyDomisiliPenjamin/PenggunaUnit")
                    .HasComment("hasil cek survey domisili penjamin atau pengguna unit");

                entity.Property(e => e.HasilCheckSurveyEmergencyContact)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("hasil cek survey kontak darurat");

                entity.Property(e => e.HasilCheckSurveyKantor)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("hasil cek survey kantor");

                entity.Property(e => e.HasilCheckSurveyLigkunganRtrwPerusahaan)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HasilCheckSurveyLigkunganRTRW/perusahaan")
                    .HasComment("hasil cek survey  RT RW atau perusahaan");

                entity.Property(e => e.HasilCheckSurveyTaksasiUnit)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("hasil cek survey taksasi unit");

                entity.Property(e => e.HasilCheckSurveyUsaha)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("hasil cek survey usaha");

                entity.Property(e => e.KetBuktiKepemilikanRumah)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("keterangan bukti kepemilikan rumah");

                entity.Property(e => e.KetKtppasanganDirutDukcapil)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KetKTPPasangan/DirutDukcapil")
                    .HasComment("keterangan KTP pasangan melalui sistem Dukcapil");

                entity.Property(e => e.KetKtppasanganDirutPlaystore)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KetKtppasangan/DirutPlaystore")
                    .HasComment("keterangan KTP pasangan melalui apps playstore");

                entity.Property(e => e.KetKtppemohonKomisarisDukcapil)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KetKTPPemohon/komisarisDukcapil")
                    .HasComment("keterangan KTP pemohon melalui sistem Dukcapil");

                entity.Property(e => e.KetKtppemohonKomisarisPlaystore)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KetKTPPemohon/komisarisPlaystore")
                    .HasComment("keterangan KTP pemohon melalui apps playstore");

                entity.Property(e => e.KetKtppenjaminDirekturDukcapil)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KetKTPPenjamin/DirekturDukcapil")
                    .HasComment("keterangan KTP penjamin melalui sistem Dukcapil");

                entity.Property(e => e.KetKtppenjaminDirekturPlaystore)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KetKTPPenjamin/DirekturPlaystore")
                    .HasComment("keterangan KTP penjamin melalui apps playstore");

                entity.Property(e => e.KetSurveyEmergencyContact)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("keterangan survey kontak darurat");

                entity.Property(e => e.KetSurveyLingkunganRtrwPerusahaan)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KetSurveyLingkunganRTRW/perusahaan")
                    .HasComment("keterangan survey lingkungan RT RW atau perusahaan");

                entity.Property(e => e.KetSurveyTaksasiUnit)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("keterangan survey taksasi unit");

                entity.Property(e => e.KeteranganCheckSurveyDomisiliPemohonPerusahaan)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KeteranganCheckSurveyDomisiliPemohon/perusahaan")
                    .HasComment("keterangan cek survey domisili pemohon atau perusahaan");

                entity.Property(e => e.KeteranganKartuKeluarga)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("keterangan kartu keluarga");

                entity.Property(e => e.KeteranganMedsos)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("keterangan media sosial");

                entity.Property(e => e.KeteranganNpwpdirektur)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KeteranganNPWPDirektur")
                    .HasComment("keterangan NPWP direktur");

                entity.Property(e => e.KeteranganNpwpdirekturUtama)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KeteranganNPWPDirekturUtama")
                    .HasComment("keterangan NPWP direktur utama");

                entity.Property(e => e.KeteranganNpwpkomisaris)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KeteranganNPWPKomisaris")
                    .HasComment("keterangan NPWP komisaris");

                entity.Property(e => e.KeteranganRekening)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("keterangan rekening");

                entity.Property(e => e.KeteranganRekeningKoran)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("keterangan rekening koran");

                entity.Property(e => e.KeteranganStnk)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KeteranganSTNK")
                    .HasComment("keterangan STNK");

                entity.Property(e => e.KeteranganSurveyDomisiliPenjaminPenggunaUnit)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KeteranganSurveyDomisiliPenjamin/PenggunaUnit")
                    .HasComment("keterangan survey domisili penjamin atau pengguna unit");

                entity.Property(e => e.KeteranganSurveyKantor)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("keterangan survey kantor");

                entity.Property(e => e.KeteranganSurveyUsaha)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("keterangan survey usaha");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.NominalAppipasanganKomisaris)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NominalAPPIPasanganKomisaris")
                    .HasComment("nominal APPI pasangan atau komisaris");

                entity.Property(e => e.NominalAppipemohonBadanHukum)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NominalAPPIPemohon/BadanHukum")
                    .HasComment("nominal APPI pemohon atau badan hukum");

                entity.Property(e => e.NominalAppipenjaminDirektur)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NominalAPPIPenjamin/Direktur")
                    .HasComment("nominal APPI penjamin atau direktur");

                entity.Property(e => e.NpwpCheckResult)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPWP_check_result")
                    .HasComment("hasil cek NPWP");

                entity.Property(e => e.NpwpStatement)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPWP_statement")
                    .HasComment("pernyataan NPWP");

                entity.Property(e => e.SitusSumberInfoMedsos)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("situs sumber info media sosial");

                entity.Property(e => e.SiupNibCheckResult)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SIUP_NIB_check_result")
                    .HasComment("hasil cek SIUP NIB");

                entity.Property(e => e.SiupNibStatement)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SIUP_NIB_statement")
                    .HasComment("pernyataan SIUP NIB");

                entity.Property(e => e.SkdomisiliCheckResult)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SKDomisili_check_result")
                    .HasComment("hasil cek SKDomisili");

                entity.Property(e => e.SkdomisiliStatement)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SKDomisili_statement")
                    .HasComment("pernyataan SKDomisili");

                entity.Property(e => e.SkmenkehCheckResult)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SKMenkeh_check_result")
                    .HasComment("hasil cek SKMenkeh");

                entity.Property(e => e.SkmenkehStatement)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SKMenkeh_statement")
                    .HasComment("pernyataan SKMenkeh");

                entity.Property(e => e.StatusAppipasanganKomisaris)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("StatusAPPIPasangan/Komisaris")
                    .HasComment("status APPI pasangan atau komisaris");

                entity.Property(e => e.StatusAppipemohonBadanHukum)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("StatusAPPIPemohon/BadanHukum")
                    .HasComment("status APPI pemohon atau badan hukum");

                entity.Property(e => e.StatusAppipenjaminDirektur)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("StatusAPPIPenjamin/Direktur")
                    .HasComment("status APPI penjamin atau direktur");

                entity.Property(e => e.StatusBerlakuStnk)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("StatusBerlakuSTNK")
                    .HasComment("status berlaku STNK");

                entity.Property(e => e.TdpNibCheckResult)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TDP_NIB_check_result")
                    .HasComment("hasil cek TDP NIB");

                entity.Property(e => e.TdpNibStatement)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TDP_NIB_statement")
                    .HasComment("pernyataan TDP NIB");
            });

            modelBuilder.Entity<TrCaFinancial>(entity =>
            {
                entity.ToTable("tr_CA_financial");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("ID keuangan CA");

                entity.Property(e => e.CaNo)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CA_no")
                    .HasComment("nomor CA");

                entity.Property(e => e.CorporateOrBussinessAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("corporate_or_bussiness_address")
                    .HasComment("alamat perusahaan atau usaha");

                entity.Property(e => e.CorporateOrBussinessName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("corporate_or_bussiness_name")
                    .HasComment("nama perusahaan atau usaha");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.EmployeeStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("employee_status")
                    .HasComment("status kepegawaian");

                entity.Property(e => e.IncomeTypeId)
                    .HasColumnName("income_type_id")
                    .HasComment("ID tipe penghasilan");

                entity.Property(e => e.IncomeValidation)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("income_validation")
                    .HasComment("validasi penghasilan");

                entity.Property(e => e.IndustryTypeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("industry_type_id")
                    .HasComment("ID bidang usaha");

                entity.Property(e => e.IsOtherIncome)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("is_other_income")
                    .HasComment("indikator penghasilan tambahan atau tidak");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.LengthOfWork)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("length_of_work")
                    .HasComment("lama bekerja atau usaha");

                entity.Property(e => e.NumberOfEmployees)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("number_of_employees")
                    .HasComment("jumlah karyawan");

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("phone_number")
                    .HasComment("nomor telepon");

                entity.Property(e => e.Position)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("position")
                    .HasComment("jabatan");

                entity.Property(e => e.ProfessionId)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("profession_id")
                    .HasComment("ID profesi");

                entity.Property(e => e.SourceOfIncome)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("source_of_income")
                    .HasComment("sumber penghasilan");

                entity.HasOne(d => d.CaNoNavigation)
                    .WithMany(p => p.TrCaFinancial)
                    .HasForeignKey(d => d.CaNo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tr_CA_financial_tr_CA");
            });

            modelBuilder.Entity<TrCaPrintHistory>(entity =>
            {
                entity.ToTable("tr_CA_print_history");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("ID print history CA");

                entity.Property(e => e.CaNo)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CA_no")
                    .HasComment("nomor CA");

                entity.Property(e => e.PrintedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("printed_by")
                    .HasComment("user yang melakukan print");

                entity.Property(e => e.PrintedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("printed_date")
                    .HasComment("tanggal print");

                entity.Property(e => e.Sequence)
                    .HasColumnName("sequence")
                    .HasComment("urutan");
            });

            modelBuilder.Entity<TrCaSlik>(entity =>
            {
                entity.ToTable("tr_CA_SLIK");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("ID keuangan CA");

                entity.Property(e => e.BankId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("bank_id")
                    .HasComment("ID bank");

                entity.Property(e => e.CaNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CA_no")
                    .HasComment("nomor CA");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.FacilityName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("facility_name")
                    .HasComment("nama fasilitas");

                entity.Property(e => e.FacilityType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("facility_type")
                    .HasComment("tipe fasilitas");

                entity.Property(e => e.KolMax)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KOL_max")
                    .HasComment("maksimum tingkat kolektabilitas");

                entity.Property(e => e.KolStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KOL_status")
                    .HasComment("status tingkat kolektabilitas");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.Os)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OS")
                    .HasComment("nominal sisa besaran hutang debitur");

                entity.Property(e => e.Plafon)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("plafon")
                    .HasComment("nominal besaran hutang maksimum debitur");

                entity.Property(e => e.Relation)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("relation")
                    .HasComment("jenis hubungan");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("status")
                    .HasComment("status SLIK");
            });

            modelBuilder.Entity<TrCas>(entity =>
            {
                entity.HasKey(e => e.CreditId);

                entity.ToTable("tr_CAS");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.Analysis)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("analysis")
                    .HasComment("analisa");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("birth_date")
                    .HasComment("tanggal lahir nasabah");

                entity.Property(e => e.BirthPlace)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("birth_place")
                    .HasComment("tempat lahir nasabah");

                entity.Property(e => e.BranchId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("branch_id")
                    .HasComment("ID cabang");

                entity.Property(e => e.CompanyId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("company_id")
                    .HasComment("ID perusahaan");

                entity.Property(e => e.Conclusion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("conclusion")
                    .HasComment("kesimpulan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.CreditSourceId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("credit_source_id")
                    .HasComment("ID sumber kredit");

                entity.Property(e => e.CreditSourceStatus)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("credit_source_status")
                    .HasComment("status sumber kredit");

                entity.Property(e => e.CustomerAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("customer_address")
                    .HasComment("alamat nasabah");

                entity.Property(e => e.CustomerLocationId)
                    .HasColumnName("customer_location_id")
                    .HasComment("ID lokasi nasabah");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("customer_name")
                    .HasComment("nama nasabah");

                entity.Property(e => e.CustomerSourceId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("customer_source_id")
                    .HasComment("ID sumber konsumen");

                entity.Property(e => e.CustomerType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("customer_type")
                    .HasComment("tipe konsumen");

                entity.Property(e => e.Email)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("email")
                    .HasComment("email nasabah");

                entity.Property(e => e.EvaluationId)
                    .HasColumnName("evaluation_id")
                    .HasComment("ID evaluasi");

                entity.Property(e => e.Gender)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("gender")
                    .HasComment("jenis kelamin nasabah");

                entity.Property(e => e.IdentityAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("identity_address")
                    .HasComment("alamat pada kartu identitas");

                entity.Property(e => e.IdentityLocationId)
                    .HasColumnName("identity_location_id")
                    .HasComment("ID lokasi identitas");

                entity.Property(e => e.IdentityNumber)
                    .IsRequired()
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("identity_number")
                    .HasComment("nomor identitas");

                entity.Property(e => e.IdentityTypeId)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("identity_type_id")
                    .HasComment("ID tipe identitas");

                entity.Property(e => e.IsApuppt)
                    .HasColumnName("is_APUPPT")
                    .HasComment("indikator APUPPT atau tidak");

                entity.Property(e => e.IsBlacklist)
                    .HasColumnName("is_blacklist")
                    .HasComment("indikator blacklist atau tidak");

                entity.Property(e => e.IsInstantApproval)
                    .HasColumnName("is_instant_approval")
                    .HasComment("indikator instant approval atau tidak");

                entity.Property(e => e.IsRepeatOrder)
                    .HasColumnName("is_repeat_order")
                    .HasComment("indikator repeat order atau tidak");

                entity.Property(e => e.IsSurveyed)
                    .HasColumnName("is_surveyed")
                    .HasComment("indikator sudah survey atau belum");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("issue_date")
                    .HasComment("tanggal penerbitan kartu identitas");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.MailToAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("mail_to_address")
                    .HasComment("alamat tertagih");

                entity.Property(e => e.MailToLocationId)
                    .HasColumnName("mail_to_location_id")
                    .HasComment("ID lokasi tertagih");

                entity.Property(e => e.MailToSourceId)
                    .HasColumnName("mail_to_source_id")
                    .HasComment("ID sumber tertagih");

                entity.Property(e => e.MailToTelephoneNumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("mail_to_telephone_number")
                    .HasComment("nomor telepon tertagih");

                entity.Property(e => e.MaritalStatus)
                    .HasColumnName("marital_status")
                    .HasComment("status pernikahan");

                entity.Property(e => e.MobilePhone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("mobile_phone")
                    .HasComment("nomor handphone");

                entity.Property(e => e.MotherName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("mother_name")
                    .HasComment("nama ibu nasabah");

                entity.Property(e => e.NpwpNo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NPWP_no")
                    .HasComment("nomor NPWP");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("order_id")
                    .HasComment("ID order");

                entity.Property(e => e.OutletCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("outlet_code")
                    .HasComment("kode outlet");

                entity.Property(e => e.OwnershipProof)
                    .HasColumnName("ownership_proof")
                    .HasComment("bukti kepemilikan");

                entity.Property(e => e.OwnershipProofName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ownership_proof_name")
                    .HasComment("nama bukti kepemilikan");

                entity.Property(e => e.RepeatOrderReason)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("repeat_order_reason")
                    .HasComment("alasan repeat order");

                entity.Property(e => e.ResidenceCondition)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("residence_condition")
                    .HasComment("kondisi rumah");

                entity.Property(e => e.ResidenceDistance)
                    .HasColumnName("residence_distance")
                    .HasComment("jarak rumah nasabah");

                entity.Property(e => e.ResidenceStatusId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("residence_status_id")
                    .HasComment("ID status tempat tinggal");

                entity.Property(e => e.SourcesAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("sources_address")
                    .HasComment("alamat narasumber");

                entity.Property(e => e.SourcesId)
                    .HasColumnName("sources_id")
                    .HasComment("ID narasumber");

                entity.Property(e => e.SourcesName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("sources_name")
                    .HasComment("nama narasumber");

                entity.Property(e => e.TelephoneNumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("telephone_number")
                    .HasComment("nomor telepon");

                entity.Property(e => e.ValidThru)
                    .HasColumnType("datetime")
                    .HasColumnName("valid_thru")
                    .HasComment("masa berlaku kartu identitas");
            });

            modelBuilder.Entity<TrCasAcDetail>(entity =>
            {
                entity.ToTable("tr_CAS_AC_detail");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.CreditId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("document_no")
                    .HasComment("nomor dokumen");

                entity.Property(e => e.FileName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("file_name")
                    .HasComment("nama file");

                entity.Property(e => e.FilePath)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("file_path")
                    .HasComment("path/lokasi file");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.PhotoId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("photo_id")
                    .HasComment("ID foto");

                entity.Property(e => e.PhotoTypeId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("photo_type_id")
                    .HasComment("ID tipe foto");
            });

            modelBuilder.Entity<TrCasAcHeader>(entity =>
            {
                entity.HasKey(e => e.CreditId)
                    .HasName("PK__tr_CAS_A__C15A9C36F392D3E9");

                entity.ToTable("tr_CAS_AC_header");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.AdvantageNotes)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("advantage_notes")
                    .HasComment("catatan kelebihan");

                entity.Property(e => e.ApprovalStatement)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("approval_statement")
                    .HasComment("pernyataan approval");

                entity.Property(e => e.ApprovedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("approved_by")
                    .HasComment("user yang menyetujui");

                entity.Property(e => e.ApprovedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("approved_date")
                    .HasComment("tanggal disetujui");

                entity.Property(e => e.Capacity)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("capacity")
                    .HasComment("ID foto");

                entity.Property(e => e.Capital)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("capital")
                    .HasComment("kapasitas");

                entity.Property(e => e.Character)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("character")
                    .HasComment("karakter");

                entity.Property(e => e.CmoAdditionalAnalysis)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CMO_additional_analysis")
                    .HasComment("analisa tambahan CMO");

                entity.Property(e => e.Collateral)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("collateral")
                    .HasComment("jaminan");

                entity.Property(e => e.Condition)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("condition")
                    .HasComment("kondisi");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.DeficiencyNotes)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("deficiency_notes")
                    .HasComment("catatan kekurangan");

                entity.Property(e => e.DocumentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("document_date")
                    .HasComment("ID tipe foto");

                entity.Property(e => e.DocumentNo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("document_no")
                    .HasComment("nomor dokumen");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.Opportunity)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("opportunity")
                    .HasComment("peluang");

                entity.Property(e => e.RfaReason)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("RFA_reason")
                    .HasComment("alasan RFA");

                entity.Property(e => e.SavingInformation)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("saving_information")
                    .HasComment("informasi saat menyimpan");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("status")
                    .IsFixedLength()
                    .HasComment("status");

                entity.Property(e => e.Strenght)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("strenght")
                    .HasComment("kekuatan");

                entity.Property(e => e.Threat)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("threat")
                    .HasComment("ancaman");

                entity.Property(e => e.Weakness)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("weakness")
                    .HasComment("kelemahan");
            });

            modelBuilder.Entity<TrCasApuppt>(entity =>
            {
                entity.HasKey(e => new { e.CreditId, e.QuestionId, e.QuestionFlag });

                entity.ToTable("tr_CAS_APUPPT");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.QuestionId)
                    .HasColumnName("question_id")
                    .HasComment("ID pertanyaan");

                entity.Property(e => e.QuestionFlag)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("question_flag")
                    .HasComment("penanda pertanyaan");

                entity.Property(e => e.Answer)
                    .IsUnicode(false)
                    .HasColumnName("answer")
                    .HasComment("jawaban");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.HasOne(d => d.Credit)
                    .WithMany(p => p.TrCasApuppt)
                    .HasForeignKey(d => d.CreditId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tr_CAS_APUPPT_tr_CAS");
            });

            modelBuilder.Entity<TrCasCorporateDocument>(entity =>
            {
                entity.HasKey(e => e.CreditId);

                entity.ToTable("tr_CAS_corporate_document");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.CommissionerIdentityNumber)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("commissioner_identity_number")
                    .HasComment("nomor KTP komisaris");

                entity.Property(e => e.CompletenessLetterDueDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("completeness_letter_due_date")
                    .HasComment("tanggal jatuh tempo surat kelengkapan");

                entity.Property(e => e.CompletenessLetterIssueDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("completeness_letter_issue_date")
                    .HasComment("tanggal terbit surat kelengkapan");

                entity.Property(e => e.CorporateCommisionerName)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("corporate_commisioner_name")
                    .HasComment("nama komisaris perusahaan");

                entity.Property(e => e.CorporateDebiturType)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("corporate_debitur_type")
                    .HasComment("tipe debitur perusahaan");

                entity.Property(e => e.CorporateDirectorName)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("corporate_director_name")
                    .HasComment("nama direksi/direktur perusahaan");

                entity.Property(e => e.CorporateEmail)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("corporate_email")
                    .HasComment("email perusahaan");

                entity.Property(e => e.CorporateFaxNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("corporate_fax_number")
                    .HasComment("nomor fax perusahaan");

                entity.Property(e => e.CorporateIndustryId)
                    .HasColumnName("corporate_industry_id")
                    .HasComment("ID bidang usaha perusahaan");

                entity.Property(e => e.CorporateMonthPeriod)
                    .HasColumnName("corporate_month_period")
                    .HasComment("periode bulan lama usaha perusahaan");

                entity.Property(e => e.CorporateNumberOfEmployee)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("corporate_number_of_employee")
                    .HasComment("jumlah karyawan perusahaan");

                entity.Property(e => e.CorporateOtherIndustry)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("corporate_other_industry")
                    .HasComment("bidang usaha lain perusahaan");

                entity.Property(e => e.CorporateSite)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("corporate_site")
                    .HasComment("website/situs perusahaan");

                entity.Property(e => e.CorporateStatus)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("corporate_status")
                    .HasComment("status perusahaan");

                entity.Property(e => e.CorporateTaxIdNumber)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("corporate_tax_id_number")
                    .HasComment("NPWP perusahaan");

                entity.Property(e => e.CorporateTelephoneNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("corporate_telephone_number")
                    .HasComment("nomor telepon perusahaan");

                entity.Property(e => e.CorporateYearPeriod)
                    .HasColumnName("corporate_year_period")
                    .HasComment("periode tahun lama usaha perusahaan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.DirectorIdentityNumber)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("director_identity_number")
                    .HasComment("nomor KTP direksi/direktur");

                entity.Property(e => e.DirectorTaxIdNumber)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("director_tax_id_number")
                    .HasComment("NPWP direksi/direktur");

                entity.Property(e => e.FoundersDeedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("founders_deed_date")
                    .HasComment("tanggal akta pendirian perusahaan");

                entity.Property(e => e.FoundersDeedNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("founders_deed_number")
                    .HasComment("nomor akta pendirian perusahaan");

                entity.Property(e => e.FoundersNotaryName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("founders_notary_name")
                    .HasComment("nama notaris akta pendirian perusahaan");

                entity.Property(e => e.IsCompletenessLetter)
                    .HasColumnName("is_completeness_letter")
                    .HasComment("indikator surat kelengkapan SITU atau izin gangguan");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.ManagementDeedDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("management_deed_date")
                    .HasComment("tanggal akta pengurus terakhir perusahaan");

                entity.Property(e => e.ManagementDeedNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("management_deed_number")
                    .HasComment("nomor akta pengurus terakhir perusahaan");

                entity.Property(e => e.ManagementNotaryName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("management_notary_name")
                    .HasComment("nama notaris akta pengurus terakhir perusahaan");

                entity.Property(e => e.SiupDueDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("SIUP_due_date")
                    .HasComment("tanggal jatuh tempo SIUP");

                entity.Property(e => e.SiupId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SIUP_id")
                    .HasComment("nomor SIUP");

                entity.Property(e => e.SiupIssueDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("SIUP_issue_date")
                    .HasComment("tanggal terbit SIUP");

                entity.Property(e => e.TdpDueDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TDP_due_date")
                    .HasComment("tanggal jatuh tempo TDP");

                entity.Property(e => e.TdpId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TDP_id")
                    .HasComment("nomor TDP");

                entity.Property(e => e.TdpIssueDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TDP_issue_date")
                    .HasComment("tanggal terbit TDP");

                entity.HasOne(d => d.Credit)
                    .WithOne(p => p.TrCasCorporateDocument)
                    .HasForeignKey<TrCasCorporateDocument>(d => d.CreditId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tr_CAS_corporate_document_tr_CAS");
            });

            modelBuilder.Entity<TrCasFinancial>(entity =>
            {
                entity.HasKey(e => e.CreditId);

                entity.ToTable("tr_CAS_financial");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.CommodityType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("commodity_type")
                    .HasComment("jenis komoditi");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.EducationExpenses)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("education_expenses")
                    .HasComment("biaya pendidikan (per bulan)");

                entity.Property(e => e.HealthExpenses)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("health_expenses")
                    .HasComment("biaya kesehatan (per bulan)");

                entity.Property(e => e.HouseholdExpenses)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("household_expenses")
                    .HasComment("biaya pengeluaran rumah tangga (per bulan)");

                entity.Property(e => e.IndustryTypeId)
                    .HasColumnName("industry_type_id")
                    .HasComment("ID bidang usaha");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.MonthlyOtherInstallment)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("monthly_other_installment")
                    .HasComment("cicilan lain");

                entity.Property(e => e.NumberOfDependents)
                    .HasColumnName("number_of_dependents")
                    .HasComment("jumlah tanggungan");

                entity.Property(e => e.OfficeAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("office_address")
                    .HasComment("alamat kantor");

                entity.Property(e => e.OfficeFax)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("office_fax")
                    .HasComment("nomor fax kantor");

                entity.Property(e => e.OfficeLocationId)
                    .HasColumnName("office_location_id")
                    .HasComment("ID lokasi kantor");

                entity.Property(e => e.OfficeName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("office_name")
                    .HasComment("nama perusahaan");

                entity.Property(e => e.OfficeTelephoneNumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("office_telephone_number")
                    .HasComment("nomor telepon kantor");

                entity.Property(e => e.OtherIncome)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("other_income")
                    .HasComment("penghasilan tambahan");

                entity.Property(e => e.OtherIncomeDesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("other_income_desc")
                    .HasComment("deskripsi dari penghasilan tambahan");

                entity.Property(e => e.Position)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("position")
                    .HasComment("jabatan");

                entity.Property(e => e.PrimaryIncome)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("primary_income")
                    .HasComment("penghasilan utama");

                entity.Property(e => e.ProfessionId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("profession_id")
                    .HasComment("ID profesi");

                entity.Property(e => e.YearsOfWorkExperience)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("years_of_work_experience")
                    .HasComment("lama bekerja");

                entity.HasOne(d => d.Credit)
                    .WithOne(p => p.TrCasFinancial)
                    .HasForeignKey<TrCasFinancial>(d => d.CreditId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tr_CAS_financial_tr_CAS");
            });

            modelBuilder.Entity<TrCasInstallment>(entity =>
            {
                entity.HasKey(e => new { e.CreditId, e.MonthlyOtherInstallmentId });

                entity.ToTable("tr_CAS_installment");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.MonthlyOtherInstallmentId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("monthly_other_installment_id")
                    .HasComment("ID cicilan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.HasOne(d => d.Credit)
                    .WithMany(p => p.TrCasInstallment)
                    .HasForeignKey(d => d.CreditId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tr_CAS_installment_tr_CAS");
            });

            modelBuilder.Entity<TrCasPaymentPoint>(entity =>
            {
                entity.ToTable("tr_CAS_payment_point");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("ID transaksi");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.CreditId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.PaymentPointId)
                    .HasColumnName("payment_point_id")
                    .HasComment("ID titik pembayaran");

                entity.Property(e => e.PaymentTypeId)
                    .HasColumnName("payment_type_id")
                    .HasComment("ID tipe pembayaran");

                entity.HasOne(d => d.Credit)
                    .WithMany(p => p.TrCasPaymentPoint)
                    .HasForeignKey(d => d.CreditId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tr_CAS_payment_point_tr_CAS");
            });

            modelBuilder.Entity<TrCasPhotoDetail>(entity =>
            {
                entity.ToTable("Tr_CAS_photo_detail");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on");

                entity.Property(e => e.CreditId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id");

                entity.Property(e => e.FilePath)
                    .IsUnicode(false)
                    .HasColumnName("filePath");

                entity.Property(e => e.Filename)
                    .IsUnicode(false)
                    .HasColumnName("filename");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on");

                entity.Property(e => e.PhotoId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("photo_id");

                entity.Property(e => e.PhotoTypeId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("photo_type_id");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrCasReferences>(entity =>
            {
                entity.HasKey(e => new { e.CreditId, e.ReferenceId })
                    .HasName("PK_tr_CAS_references_1");

                entity.ToTable("tr_CAS_references");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.ReferenceId)
                    .HasColumnName("reference_id")
                    .HasComment("ID referensi");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.ReferencesAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("references_address")
                    .HasComment("alamat referensi");

                entity.Property(e => e.ReferencesBirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("references_birth_date")
                    .HasComment("tanggal lahir referensi");

                entity.Property(e => e.ReferencesBirthPlace)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("references_birth_place")
                    .HasComment("tempat lahir referensi");

                entity.Property(e => e.ReferencesFax)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("references_fax")
                    .HasComment("nomor fax referensi");

                entity.Property(e => e.ReferencesIdentityNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("references_identity_number")
                    .HasComment("nomor identitas referensi");

                entity.Property(e => e.ReferencesIdentityTypeId)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("references_identity_type_id")
                    .HasComment("ID tipe identitas referensi");

                entity.Property(e => e.ReferencesIncome)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("references_income")
                    .HasComment("penghasilan utama referensi");

                entity.Property(e => e.ReferencesLocationId)
                    .HasColumnName("references_location_id")
                    .HasComment("ID lokasi referensi");

                entity.Property(e => e.ReferencesMobileNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("references_mobile_number")
                    .HasComment("nomor handphone referensi");

                entity.Property(e => e.ReferencesName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("references_name")
                    .HasComment("nama referensi");

                entity.Property(e => e.ReferencesOccupation)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("references_occupation")
                    .HasComment("pekerjaan referensi");

                entity.Property(e => e.ReferencesOfficePhoneNumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("references_office_phone_number")
                    .HasComment("nomor telepon kantor referensi");

                entity.Property(e => e.ReferencesOtherIncome)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("references_other_income")
                    .HasComment("penghasilan tambahan referensi");

                entity.Property(e => e.ReferencesOtherIncomeDesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("references_other_income_desc")
                    .HasComment("deskripsi penghasilan tambahan referensi");

                entity.Property(e => e.ReferencesRelationship)
                    .HasColumnName("references_relationship")
                    .HasComment("hubungan referensi");

                entity.Property(e => e.ReferencesTelephoneNumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("references_telephone_number")
                    .HasComment("nomor telepon referensi");

                entity.HasOne(d => d.Credit)
                    .WithMany(p => p.TrCasReferences)
                    .HasForeignKey(d => d.CreditId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tr_CAS_references_tr_CAS");
            });

            modelBuilder.Entity<TrCasRepeatOrder>(entity =>
            {
                entity.HasKey(e => e.CreditId);

                entity.ToTable("tr_CAS_repeat_order");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("account_name")
                    .HasComment("nama akun");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("account_number")
                    .HasComment("nomor akun");

                entity.Property(e => e.AgreementNumberOld)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("agreement_number_old")
                    .HasComment("nomor NPP lama");

                entity.Property(e => e.BankId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("bank_id")
                    .HasComment("ID bank");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.ReferenceSourceDesc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("reference_source_desc");

                entity.Property(e => e.RepeatOrderApplicantRelationId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("repeat_order_applicant_relation_id")
                    .HasComment("ID hubungan dengan pemohon repeat order");

                entity.Property(e => e.RepeatOrderCategoryId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("repeat_order_category_id")
                    .HasComment("ID kategori repeat order");

                entity.Property(e => e.RepeatOrderDecisionId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("repeat_order_decision_id")
                    .HasComment("ID keputusan repeat order");

                entity.Property(e => e.RepeatOrderDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("repeat_order_description")
                    .HasComment("deskripsi dari repeat order");

                entity.Property(e => e.RepeatOrderReferenceSourceId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("repeat_order_reference_source_id")
                    .HasComment("ID sumber referensi repeat order");

                entity.Property(e => e.TelephoneNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("telephone_number")
                    .HasComment("nomor telepon");

                entity.HasOne(d => d.Credit)
                    .WithOne(p => p.TrCasRepeatOrder)
                    .HasForeignKey<TrCasRepeatOrder>(d => d.CreditId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tr_CAS_repeat_order_tr_CAS");
            });

            modelBuilder.Entity<TrCm>(entity =>
            {
                entity.HasKey(e => e.CreditId);

                entity.ToTable("tr_CM");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.AccountReceiveable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("account_receiveable")
                    .IsFixedLength()
                    .HasComment("tipe account receivable");

                entity.Property(e => e.AdminFee)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("admin_fee")
                    .HasComment("biaya admin");

                entity.Property(e => e.AdminFeeKredit)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("admin_fee_kredit")
                    .HasComment("biaya admin kredit");

                entity.Property(e => e.AmountInstallment)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("amount_installment")
                    .HasComment("nilai angsuran");

                entity.Property(e => e.ApplicationTypeId)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("application_type_id")
                    .HasComment("ID tipe aplikasi");

                entity.Property(e => e.ApprovalDescription)
                    .IsUnicode(false)
                    .HasColumnName("approval_description")
                    .HasComment("deskripsi approval");

                entity.Property(e => e.ApprovedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("approved_by")
                    .HasComment("user yang menyetujui");

                entity.Property(e => e.ApprovedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("approved_date")
                    .HasComment("tanggal disetujui");

                entity.Property(e => e.AreaCollectionKonsId)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("area_collection_kons_id")
                    .HasComment("ID area collection konsumen");

                entity.Property(e => e.AssetCost)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("asset_cost")
                    .HasComment("harga/biaya aset");

                entity.Property(e => e.BankAccountIdUmc)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("bank_account_id_umc")
                    .HasComment("ID akun bank UMC");

                entity.Property(e => e.BiayaProsesId)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("biaya_proses_id")
                    .HasComment("ID biaya proses");

                entity.Property(e => e.BiayaProsesSeq)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("biaya_proses_seq")
                    .HasComment("urutan biaya proses");

                entity.Property(e => e.BiayaProvisi)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("biaya_provisi")
                    .HasComment("biaya provisi");

                entity.Property(e => e.BiayaProvisiIns)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("biaya_provisi_Ins")
                    .HasComment("biaya provisi asuransi");

                entity.Property(e => e.BiayaProvisiInsKredit)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("biaya_provisi_ins_kredit")
                    .HasComment("biaya provisi asuransi kredit");

                entity.Property(e => e.BiayaProvisiKredit)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("biaya_provisi_kredit")
                    .HasComment("biaya provisi kredit");

                entity.Property(e => e.BpkbInvoice).HasColumnName("BPKB_invoice");

                entity.Property(e => e.BranchId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("branch_id")
                    .HasComment("ID cabang");

                entity.Property(e => e.BranchIdFirst)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("branch_id_first");

                entity.Property(e => e.Cc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CC")
                    .HasComment("CC kendaraan");

                entity.Property(e => e.CgscabangNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CGSCabangNo")
                    .HasComment("nomor CGS cabang");

                entity.Property(e => e.ChannelId)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("channel_id")
                    .HasComment("ID kanal");

                entity.Property(e => e.ChannelName)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("channel_name")
                    .HasComment("nama saluran");

                entity.Property(e => e.CollectiblePeriod)
                    .HasColumnName("collectible_period")
                    .HasComment("periode tertagih");

                entity.Property(e => e.CollectibleSequencePeriod)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("collectible_sequence_period")
                    .HasComment("periode urutan tertagih");

                entity.Property(e => e.CompanyId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("company_id")
                    .HasComment("ID perusahaan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.CreditDate)
                    .HasColumnType("datetime")
                    .HasColumnName("credit_date")
                    .HasComment("tanggal kredit");

                entity.Property(e => e.CustomerPayAmount)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("customer_pay_amount")
                    .HasComment("jumlah bayar nasabah");

                entity.Property(e => e.DealerCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dealer_code")
                    .HasComment("kode dealer");

                entity.Property(e => e.Deposit)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("deposit")
                    .HasComment("nominal deposit");

                entity.Property(e => e.DepositInstallment)
                    .HasColumnName("deposit_installment")
                    .HasComment("deposit angsuran");

                entity.Property(e => e.DiscDeposit)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("disc_deposit")
                    .HasComment("biaya administrasi dealer");

                entity.Property(e => e.DiscType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("disc_type")
                    .IsFixedLength()
                    .HasComment("tipe biaya administrasi dealer");

                entity.Property(e => e.DiscountDealer)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("discount_dealer")
                    .HasComment("jumlah diskon dealer");

                entity.Property(e => e.DtmCorrection)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("dtm_correction")
                    .HasComment("tanggal koreksi");

                entity.Property(e => e.EffectiveRate)
                    .HasColumnName("effective_rate")
                    .HasComment("bunga efektif");

                entity.Property(e => e.FinCode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("fin_code")
                    .IsFixedLength()
                    .HasComment("kode produk finance");

                entity.Property(e => e.FinishDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("finish_date")
                    .HasComment("tanggal selesai");

                entity.Property(e => e.FirstLcr)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("first_LCR")
                    .HasComment("nominal LCR awal");

                entity.Property(e => e.FirstOp)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("first_OP")
                    .HasComment("nominal OP awal");

                entity.Property(e => e.FirstPayment)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("first_payment")
                    .HasComment("pembayaran pertama");

                entity.Property(e => e.FirstUli)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("first_ULI")
                    .HasComment("nominal ULI awal");

                entity.Property(e => e.FlatRate)
                    .HasColumnName("flat_rate")
                    .HasComment("bunga flat");

                entity.Property(e => e.GrossDownPayment)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("gross_down_payment")
                    .HasComment("uang muka gross");

                entity.Property(e => e.InstallmentDecimal)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("installment_decimal")
                    .HasComment("nominal desimal angsuran");

                entity.Property(e => e.InstallmentId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("installment_id")
                    .HasComment("ID angsuran");

                entity.Property(e => e.InstallmentType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("installment_type")
                    .HasComment("tipe angsuran");

                entity.Property(e => e.InsuranceFee)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("insurance_fee")
                    .HasComment("biaya asuransi");

                entity.Property(e => e.InsuranceFeeGross)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("insurance_fee_gross")
                    .HasComment("biaya asuransi gross");

                entity.Property(e => e.InterestRateTypeId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("interest_rate_type_id")
                    .HasComment("ID jenis suku bunga");

                entity.Property(e => e.IsAvalis)
                    .HasColumnName("is_avalis")
                    .HasComment("indikator avalis atau tidak");

                entity.Property(e => e.IsConvert)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("is_convert")
                    .HasComment("indikator dikonversi atau tidak");

                entity.Property(e => e.IsFlagQuota)
                    .HasColumnType("datetime")
                    .HasColumnName("is_flag_quota")
                    .HasComment("indikator flagging quota atau tidak");

                entity.Property(e => e.IsItemNew)
                    .HasColumnName("is_item_new")
                    .HasComment("indikator kendaraan baru atau tidak");

                entity.Property(e => e.IsLifeIns)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("is_life_ins")
                    .HasComment("indikator asuransi jiwa atau tidak");

                entity.Property(e => e.IsMilikPt)
                    .HasColumnName("is_milik_PT")
                    .HasComment("indikator milik PT atau tidak");

                entity.Property(e => e.IsNewPriceList)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("is_new_price_list")
                    .HasComment("indikator price list baru atau tidak");

                entity.Property(e => e.IsQq)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("is_QQ")
                    .HasComment("pemilik STNK");

                entity.Property(e => e.IsTac)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("is_TAC")
                    .HasComment("indikator TAC atau tidak");

                entity.Property(e => e.IsTopupMs)
                    .HasColumnName("is_topup_ms")
                    .HasComment("indikator top up mega solusi atau tidak");

                entity.Property(e => e.IsTutupBuka)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("is_tutup_buka")
                    .HasComment("indikator tutup buka atau tidak");

                entity.Property(e => e.ItemId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("item_id")
                    .HasComment("ID item");

                entity.Property(e => e.ItemMerkId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("item_merk_id")
                    .HasComment("ID merk item");

                entity.Property(e => e.ItemMerkTypeId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("item_merk_type_id")
                    .HasComment("ID tipe merk item");

                entity.Property(e => e.JmlPembiayaan)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("jml_pembiayaan")
                    .HasComment("jumlah pembiayaan");

                entity.Property(e => e.KomperMax)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("komper_max")
                    .HasComment("nominal komper maksimum");

                entity.Property(e => e.LastPayDate)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("last_pay_date")
                    .HasComment("tanggal bayar terakhir");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.Lcr)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("LCR")
                    .HasComment("nominal LCR");

                entity.Property(e => e.LeasingCode)
                    .HasColumnName("leasing_code")
                    .HasComment("kode leasing");

                entity.Property(e => e.LossFee)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("loss_fee")
                    .HasComment("biaya kerugian");

                entity.Property(e => e.LossFeeKredit)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("loss_fee_kredit")
                    .HasComment("biaya kerugian kredit");

                entity.Property(e => e.ModelId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("model_id")
                    .HasComment("ID model");

                entity.Property(e => e.NettDownPayment)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("nett_down_payment")
                    .HasComment("uang muka murni");

                entity.Property(e => e.NikCollectionCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("NIK_collection_code")
                    .IsFixedLength()
                    .HasComment("NIK collector");

                entity.Property(e => e.NikMh)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NIK_MH")
                    .HasComment("NIK marketing head");

                entity.Property(e => e.NikSurveryorCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NIK_surveryor_code")
                    .HasComment("NIK surveyor");

                entity.Property(e => e.NominalBiayaProses)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("nominal_biaya_proses")
                    .HasComment("nominal biaya proses");

                entity.Property(e => e.NominalBiayaProsesKredit)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("nominal_biaya_proses_kredit")
                    .HasComment("nominal biaya proses kredit");

                entity.Property(e => e.OldNpp)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("old_npp")
                    .HasComment("npp lama");

                entity.Property(e => e.OngkosBbn)
                    .HasColumnType("decimal(9, 0)")
                    .HasColumnName("ongkos_BBN")
                    .HasComment("ongkos biaya balik nama");

                entity.Property(e => e.OngkosTagih)
                    .HasColumnType("decimal(9, 0)")
                    .HasColumnName("ongkos_tagih")
                    .HasComment("ongkos penagihan");

                entity.Property(e => e.Op)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("OP")
                    .HasComment("nominal OP");

                entity.Property(e => e.OverdueRate)
                    .HasColumnName("overdue_rate")
                    .HasComment("bunga OD");

                entity.Property(e => e.OwnershipAccountTypeId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ownership_account_type_id")
                    .HasComment("ID tipe pemilik akun");

                entity.Property(e => e.PackageId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("package_id")
                    .HasComment("ID paket");

                entity.Property(e => e.PackagePembiayaanSecq)
                    .HasColumnName("package_pembiayaan_secq")
                    .HasComment("urutan paket pembiayaan");

                entity.Property(e => e.PaketPembiayaanId)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("paket_pembiayaan_id")
                    .IsFixedLength()
                    .HasComment("ID paket pembiayaan");

                entity.Property(e => e.PoNo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PO_no")
                    .HasComment("nomor PO (purchase order)");

                entity.Property(e => e.PoSource)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("po_source")
                    .HasComment("sumber PO");

                entity.Property(e => e.PoSourceOther)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("po_source_other")
                    .IsFixedLength()
                    .HasComment("sumber lain PO");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("ID produk");

                entity.Property(e => e.ProductMarketingId)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("product_marketing_id")
                    .HasComment("ID produk marketing");

                entity.Property(e => e.ProgramId)
                    .HasColumnName("program_id")
                    .HasComment("ID program");

                entity.Property(e => e.QqName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("QQ_name")
                    .HasComment("nama STNK");

                entity.Property(e => e.RateValue)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("rate_value")
                    .HasComment("nilai bunga");

                entity.Property(e => e.ReasonRfa)
                    .HasColumnType("datetime")
                    .HasColumnName("reason_RFA")
                    .HasComment("alasan RFA");

                entity.Property(e => e.RefundBunga)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("refund_bunga")
                    .HasComment("nilai bunga refund");

                entity.Property(e => e.RefundBungaPercent)
                    .HasColumnName("refund_bunga_percent")
                    .HasComment("persen bunga refund");

                entity.Property(e => e.ResidualValue)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("residual_value")
                    .HasComment("nilai residual/sisa");

                entity.Property(e => e.RiskCategoryId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("risk_category_id");

                entity.Property(e => e.StatusApproval)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("status_approval")
                    .HasComment("status approval");

                entity.Property(e => e.StatusCredit)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("status_credit")
                    .IsFixedLength()
                    .HasComment("status kredit");

                entity.Property(e => e.StnkStatusId)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("STNK_status_id");

                entity.Property(e => e.TacMax)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("TAC_max")
                    .HasComment("nominal TAC maksimum");

                entity.Property(e => e.Tenor)
                    .HasColumnName("tenor")
                    .HasComment("lama angsuran");

                entity.Property(e => e.TipeCover)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("tipe_cover")
                    .HasComment("tipe cover");

                entity.Property(e => e.TipeGuna)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("tipe_guna")
                    .HasComment("tipe guna");

                entity.Property(e => e.UangMukaMurniKons)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("uang_muka_murni_kons")
                    .HasComment("uang muka murni konsumen");

                entity.Property(e => e.Uli)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("ULI")
                    .HasComment("nominal ULI");

                entity.Property(e => e.UsrCorrection)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("usr_correction")
                    .HasComment("user yang mengkoreksi");

                entity.Property(e => e.YearItem)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("year_item")
                    .HasComment("tahun kendaraan");
            });

            modelBuilder.Entity<TrCmInsurance>(entity =>
            {
                entity.HasKey(e => e.CreditId);

                entity.ToTable("tr_CM_Insurance");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.Acp)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACP")
                    .IsFixedLength();

                entity.Property(e => e.AllRisk1).HasComment("AllRisk1 (menentukan nominal biaya proses)");

                entity.Property(e => e.AllRisk2).HasComment("AllRisk2 (menentukan nominal biaya proses)");

                entity.Property(e => e.AllRisk3).HasComment("AllRisk3 (menentukan nominal biaya proses)");

                entity.Property(e => e.AllRisk4).HasComment("AllRisk4 (menentukan nominal biaya proses)");

                entity.Property(e => e.AllRisk5).HasComment("AllRisk5 (menentukan nominal biaya proses)");

                entity.Property(e => e.Cpfee)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("CPFee");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.InsModel).HasComment("model asuransi");

                entity.Property(e => e.InsTipeBayar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("tipe bayar asuransi");

                entity.Property(e => e.KreditFee)
                    .HasColumnType("numeric(18, 0)")
                    .HasComment("biaya kredit");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.LossFee)
                    .HasColumnType("numeric(18, 0)")
                    .HasComment("biaya kerugian");

                entity.Property(e => e.PolicyFee)
                    .HasColumnType("numeric(18, 0)")
                    .HasComment("biaya polis");

                entity.Property(e => e.TahunKredit).HasComment("tahun kredit");

                entity.Property(e => e.TahunTunai).HasComment("tahun tunai");

                entity.Property(e => e.Tlo1)
                    .HasColumnName("TLO1")
                    .HasComment("TLO1 (menentukan nominal biaya proses)");

                entity.Property(e => e.Tlo2)
                    .HasColumnName("TLO2")
                    .HasComment("TLO2 (menentukan nominal biaya proses)");

                entity.Property(e => e.Tlo3)
                    .HasColumnName("TLO3")
                    .HasComment("TLO3 (menentukan nominal biaya proses)");

                entity.Property(e => e.Tlo4)
                    .HasColumnName("TLO4")
                    .HasComment("TLO4 (menentukan nominal biaya proses)");

                entity.Property(e => e.Tlo5)
                    .HasColumnName("TLO5")
                    .HasComment("TLO5 (menentukan nominal biaya proses)");

                entity.Property(e => e.TunaiFee)
                    .HasColumnType("numeric(18, 0)")
                    .HasComment("biaya tunai");
            });

            modelBuilder.Entity<TrCmLifeInsuranceCredit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tr_CM_life_insurance_credit");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.ItemCode)
                    .HasMaxLength(255)
                    .HasColumnName("Item_Code")
                    .HasComment("kode barang");

                entity.Property(e => e.ItemPrice)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Item_Price")
                    .HasComment("harga barang");

                entity.Property(e => e.KreditFee)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Kredit_Fee")
                    .HasComment("biaya kredit");

                entity.Property(e => e.KreditFeeVendor)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Kredit_Fee_Vendor")
                    .HasComment("biaya kredit vendor");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.PersenPremi)
                    .HasColumnName("Persen_Premi")
                    .HasComment("persen premi");

                entity.Property(e => e.TahunKredit)
                    .HasMaxLength(255)
                    .HasColumnName("Tahun_Kredit")
                    .HasComment("tahun kredit");

                entity.Property(e => e.TahunTunai)
                    .HasMaxLength(255)
                    .HasColumnName("Tahun_Tunai")
                    .HasComment("tahun tunai");

                entity.Property(e => e.TotalFee)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Total_Fee")
                    .HasComment("total biaya");

                entity.Property(e => e.TotalFeeInsurance)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Total_Fee_Insurance")
                    .HasComment("total biaya asuransi");

                entity.Property(e => e.TunaiFee)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Tunai_Fee")
                    .HasComment("biaya tunai");

                entity.Property(e => e.VendorPrice)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Vendor_Price")
                    .HasComment("harga vendor");
            });

            modelBuilder.Entity<TrCmPriceAwal>(entity =>
            {
                entity.HasKey(e => e.CreditId)
                    .HasName("PK__tr_CM_pr__C15A9C369AE36068");

                entity.ToTable("tr_CM_price_awal");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.AdminFee)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("admin_fee")
                    .HasComment("biaya admin");

                entity.Property(e => e.AmountInstallment)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("amount_installment")
                    .HasComment("nilai angsuran");

                entity.Property(e => e.AssetCost)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("asset_cost")
                    .HasComment("harga/biaya aset");

                entity.Property(e => e.BiayaProvisiIns)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("biaya_provisi_INS")
                    .HasComment("biaya provisi asuransi");

                entity.Property(e => e.CountUppingOtr)
                    .HasColumnName("count_upping_OTR")
                    .HasComment("berapa kali konversi OTR");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.DiscDeposit)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("disc_deposit")
                    .HasComment("biaya administrasi dealer");

                entity.Property(e => e.EffectiveRate)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("effective_rate")
                    .HasComment("bunga efektif");

                entity.Property(e => e.FlatRate)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("flat_rate")
                    .HasComment("bunga flat");

                entity.Property(e => e.GrossDownPayment)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("gross_down_payment")
                    .HasComment("uang muka gross");

                entity.Property(e => e.InsuranceFee)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("insurance_fee")
                    .HasComment("biaya asuransi");

                entity.Property(e => e.JmlPembiayaan)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("jml_pembiayaan")
                    .HasComment("jumlah pembiayaan");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.MdpsAwal)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("MDPS_awal")
                    .HasComment("selisih bunga awal");

                entity.Property(e => e.MdpsCurr)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("MDPS_curr")
                    .HasComment("selisih bunga saat ini");

                entity.Property(e => e.NettDownPayment)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("nett_down_payment")
                    .HasComment("uang muka murni");

                entity.Property(e => e.PersenNfa)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("persen_NFA")
                    .HasComment("persenan NFA");

                entity.Property(e => e.RateValue)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("rate_value")
                    .HasComment("nilai bunga");

                entity.Property(e => e.Subsidi)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("subsidi")
                    .HasComment("nominal subsidi");

                entity.Property(e => e.Tenor)
                    .HasColumnName("tenor")
                    .HasComment("lama angsuran");

                entity.Property(e => e.TotalUppingOtr)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("total_upping_OTR")
                    .HasComment("nominal konversi OTR");

                entity.Property(e => e.TypeKonversi)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("type_konversi")
                    .HasComment("tipe konversi");
            });

            modelBuilder.Entity<TrCmSubsidiDp>(entity =>
            {
                entity.HasKey(e => new { e.CreditId, e.SubsidiDpId })
                    .HasName("PK__tr_CM_su__DDD3A5BB2DE9B5EC");

                entity.ToTable("tr_CM_subsidi_DP");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.SubsidiDpId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("subsidi_DP_id")
                    .HasComment("ID subsidi DP");

                entity.Property(e => e.Amount)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("amount")
                    .HasComment("jumlah subsidi DP");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.ExcludeDpGross)
                    .HasColumnName("exclude_DP_gross")
                    .HasComment("indikator untuk exclude uang muka gross atau tidak");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<TrCmUmc>(entity =>
            {
                entity.HasKey(e => e.CreditId);

                entity.ToTable("tr_CM_UMC");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.AccountNameUmc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("account_name_umc")
                    .HasComment("nama rekening UMC");

                entity.Property(e => e.AccountNoUmc)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("account_no_umc")
                    .HasComment("nomor rekening UMC");

                entity.Property(e => e.AgentId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("agent_id")
                    .HasComment("ID agen");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("agent_name")
                    .HasComment("nama agen");

                entity.Property(e => e.BankAccountIdUmc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("bank_account_id_umc")
                    .HasComment("ID akun bank UMC");

                entity.Property(e => e.BankIdUmc)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("bank_id_umc")
                    .HasComment("ID bank UMC");

                entity.Property(e => e.BankNameUmc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("bank_name_umc")
                    .HasComment("nama bank UMC");

                entity.Property(e => e.CompanyId)
                    .HasColumnName("company_id")
                    .HasComment("ID perusahaan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IdAgentType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("id_agent_type")
                    .HasComment("ID tipe agen");

                entity.Property(e => e.IdentityNumberOfStnk)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("identity_number_of_STNK")
                    .HasComment("nomor STNK");

                entity.Property(e => e.IsExternal)
                    .HasColumnName("is_external")
                    .HasComment("indikator eksternal atau tidak");

                entity.Property(e => e.IsPersonalAccount)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("is_personal_account")
                    .HasComment("indikator rekening pribadi atau tidak");

                entity.Property(e => e.IsSameKk)
                    .HasColumnName("is_same_KK")
                    .HasComment("indikator apakah KK sama atau tidak");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.OwnershipAccountTypeId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ownership_account_type_id")
                    .HasComment("ID tipe pemilik akun");

                entity.Property(e => e.SchemeId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("scheme_id")
                    .HasComment("ID skema");
            });

            modelBuilder.Entity<TrDealerOrderSourceHeader>(entity =>
            {
                entity.HasKey(e => e.OrderSourceNo);

                entity.ToTable("tr_dealer_order_source_header");

                entity.Property(e => e.OrderSourceNo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("order_source_no")
                    .HasComment("nomor sumber order");

                entity.Property(e => e.ApprovedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("approved_by")
                    .HasComment("user yang menyetujui");

                entity.Property(e => e.ApprovedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("approved_date")
                    .HasComment("tanggal disetujui");

                entity.Property(e => e.ChangesDesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("changes_desc")
                    .HasComment("deskripsi perubahan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.CreditId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.DealerCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dealer_code")
                    .HasComment("kode dealer");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("status")
                    .IsFixedLength()
                    .HasComment("status sumber order");

                entity.HasOne(d => d.Credit)
                    .WithMany(p => p.TrDealerOrderSourceHeader)
                    .HasForeignKey(d => d.CreditId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tr_dealer_order_source_header_tr_NPP");
            });

            modelBuilder.Entity<TrDealerOrderSourceTac>(entity =>
            {
                entity.HasKey(e => new { e.CreditId, e.JobTitleId });

                entity.ToTable("tr_dealer_order_source_TAC");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.JobTitleId)
                    .HasColumnName("job_title_id")
                    .HasComment("ID jabatan");

                entity.Property(e => e.AmountTacRefund)
                    .HasColumnType("decimal(21, 2)")
                    .HasColumnName("amount_TAC_refund")
                    .HasComment("nominal refund TAC");

                entity.Property(e => e.AmountTacRefundAfterTax)
                    .HasColumnType("decimal(21, 2)")
                    .HasColumnName("amount_TAC_refund_after_tax")
                    .HasComment("nominal refund TAC setelah pajak");

                entity.Property(e => e.BankAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("bank_account_name")
                    .HasComment("nama rekening bank");

                entity.Property(e => e.BankAccountNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("bank_account_number")
                    .HasComment("nomor rekening bank");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.PersonelId)
                    .HasColumnName("personel_id")
                    .HasComment("ID personel");

                entity.Property(e => e.PersonelName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("personel_name")
                    .HasComment("nama personel");

                entity.Property(e => e.RateTacRefund)
                    .HasColumnType("decimal(21, 2)")
                    .HasColumnName("rate_TAC_refund")
                    .HasComment("bunga refund TAC");

                entity.HasOne(d => d.Credit)
                    .WithMany(p => p.TrDealerOrderSourceTac)
                    .HasForeignKey(d => d.CreditId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tr_dealer_order_source_TAC_tr_NPP");
            });

            modelBuilder.Entity<TrDealerOrderSourceThirdParty>(entity =>
            {
                entity.HasKey(e => new { e.CreditId, e.JobTitleId });

                entity.ToTable("tr_dealer_order_source_third_party");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.JobTitleId)
                    .HasColumnName("job_title_id")
                    .HasComment("ID jabatan");

                entity.Property(e => e.AmountProvisiRefund)
                    .HasColumnType("decimal(21, 2)")
                    .HasColumnName("amount_provisi_refund")
                    .HasComment("nominal refund provisi");

                entity.Property(e => e.AmountProvisiRefundAfterTax)
                    .HasColumnType("decimal(21, 2)")
                    .HasColumnName("amount_provisi_refund_after_tax")
                    .HasComment("nominal refund provisi setelah pajak");

                entity.Property(e => e.BankAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("bank_account_name")
                    .HasComment("nama rekening bank");

                entity.Property(e => e.BankAccountNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("bank_account_number")
                    .HasComment("nomor rekening bank");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.PersonelId)
                    .HasColumnName("personel_id")
                    .HasComment("ID personel");

                entity.Property(e => e.PersonelName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("personel_name")
                    .HasComment("nama personel");

                entity.Property(e => e.RateProvisiRefund)
                    .HasColumnType("decimal(21, 2)")
                    .HasColumnName("rate_provisi_refund")
                    .HasComment("bunga refund provisi");

                entity.HasOne(d => d.Credit)
                    .WithMany(p => p.TrDealerOrderSourceThirdParty)
                    .HasForeignKey(d => d.CreditId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tr_dealer_order_source_third_party_tr_NPP");
            });

            modelBuilder.Entity<TrGenerateCode>(entity =>
            {
                entity.ToTable("tr_generate_code");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CodeFormat)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("code_format");

                entity.Property(e => e.CodeType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("code_type");

                entity.Property(e => e.LastGenerateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("last_generate_date");

                entity.Property(e => e.LastNumber).HasColumnName("last_number");

                entity.Property(e => e.PeriodMonth)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("period_month");

                entity.Property(e => e.PeriodYear)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("period_year");
            });

            modelBuilder.Entity<TrGenerateCodeHistory>(entity =>
            {
                entity.ToTable("tr_generate_code_history");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BranchId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("branch_id");

                entity.Property(e => e.CodeOutput)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("code_output");

                entity.Property(e => e.CodeType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("code_type");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("create_date");

                entity.Property(e => e.EmployeeId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("employee_id");

                entity.Property(e => e.StatusTransaction)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("status_transaction");
            });

            modelBuilder.Entity<TrHierarchyTransaction>(entity =>
            {
                entity.HasKey(e => new { e.TransId, e.TransTypeId, e.HierarchyTransId });

                entity.ToTable("tr_hierarchy_transaction");

                entity.Property(e => e.TransId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("trans_id");

                entity.Property(e => e.TransTypeId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("trans_type_id");

                entity.Property(e => e.HierarchyTransId).HasColumnName("hierarchy_trans_id");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on");

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("employee_id");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on");

                entity.Property(e => e.NextEmployeeId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("next_employee_id");

                entity.Property(e => e.Reason)
                    .IsUnicode(false)
                    .HasColumnName("reason");

                entity.Property(e => e.ReasonId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("reason_id");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("status")
                    .IsFixedLength();

                entity.Property(e => e.SuperEmployeeId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("super_employee_id");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("trans_date");
            });

            modelBuilder.Entity<TrItems>(entity =>
            {
                entity.HasKey(e => e.CreditId);

                entity.ToTable("tr_items");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id");

                entity.Property(e => e.CarNoUmc)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("car_no_UMC");

                entity.Property(e => e.ChasisNo)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("chasis_no");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on");

                entity.Property(e => e.ItemColor)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("item_color");

                entity.Property(e => e.KeyNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("key_no");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on");

                entity.Property(e => e.MachineNo)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("machine_no");

                entity.HasOne(d => d.Credit)
                    .WithOne(p => p.TrItems)
                    .HasForeignKey<TrItems>(d => d.CreditId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tr_items_tr_NPP");
            });

            modelBuilder.Entity<TrNpp>(entity =>
            {
                entity.HasKey(e => e.CreditId);

                entity.ToTable("tr_NPP");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.AgreementDate)
                    .HasColumnType("datetime")
                    .HasColumnName("agreement_date")
                    .HasComment("tanggal NPP");

                entity.Property(e => e.AgreementStatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("agreement_status")
                    .HasComment("status NPP");

                entity.Property(e => e.AgreementValue)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("agreement_value")
                    .HasComment("nilai NPP");

                entity.Property(e => e.ApproveBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("approve_by")
                    .HasComment("user yang menyetujui");

                entity.Property(e => e.ApproveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("approve_date")
                    .HasComment("tanggal disetujui");

                entity.Property(e => e.BankReferenceId)
                    .HasColumnName("bank_reference_id")
                    .HasComment("ID referensi bank");

                entity.Property(e => e.BankReferenceSubId)
                    .HasColumnName("bank_reference_sub_id")
                    .HasComment("ID sub referensi bank");

                entity.Property(e => e.BastDate)
                    .HasColumnType("datetime")
                    .HasColumnName("BAST_date")
                    .HasComment("tanggal BAST");

                entity.Property(e => e.BastNo)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("BAST_no")
                    .HasComment("nomor BAST");

                entity.Property(e => e.BillReceiptDate)
                    .HasColumnType("datetime")
                    .HasColumnName("bill_receipt_date")
                    .HasComment("tanggal tanda terima tagihan");

                entity.Property(e => e.BillReceivedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("bill_received_date")
                    .HasComment("tanggal tagihan diterima");

                entity.Property(e => e.BpkbLetterDate)
                    .HasColumnType("datetime")
                    .HasColumnName("BPKB_letter_date")
                    .HasComment("tanggal surat BPKB");

                entity.Property(e => e.BpkbLetterNo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BPKB_letter_no")
                    .HasComment("nomor surat BPKB");

                entity.Property(e => e.BranchId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("branch_id")
                    .HasComment("ID cabang");

                entity.Property(e => e.CompanyId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("company_id")
                    .HasComment("ID perusahaan");

                entity.Property(e => e.ConsumenInstallmentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("consumen_installment_date")
                    .HasComment("tanggal angsuran konsumen");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.DisbursalTypeUmc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("disbursal_type_UMC")
                    .HasComment("tipe pencairan UMC");

                entity.Property(e => e.DisbursalTypeUmcIncentive)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("disbursal_type_UMC_incentive")
                    .HasComment("insentif tipe pencairan UMC");

                entity.Property(e => e.DownPaymentReceiptDate)
                    .HasColumnType("datetime")
                    .HasColumnName("down_payment_receipt_date")
                    .HasComment("tanggal tanda terima uang muka");

                entity.Property(e => e.DownPaymentReceiptNo)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("down_payment_receipt_no")
                    .HasComment("nomor tanda terima uang muka");

                entity.Property(e => e.EstimatedInsuranceCost)
                    .HasColumnType("numeric(21, 2)")
                    .HasColumnName("estimated_insurance_cost")
                    .HasComment("biaya perkiraan asuransi");

                entity.Property(e => e.IncentiveNominal)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("incentive_nominal")
                    .HasComment("nominal insentif");

                entity.Property(e => e.InstallmentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("installment_date")
                    .HasComment("tanggal angsuran");

                entity.Property(e => e.InsuranceBillingPeriodical)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("insurance_billing_periodical")
                    .HasComment("tagihan asuransi berkala");

                entity.Property(e => e.InsuranceCoveragePeriod)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("insurance_coverage_period")
                    .HasComment("periode cakupan asuransi");

                entity.Property(e => e.InsuranceId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("insurance_id")
                    .HasComment("ID asuransi");

                entity.Property(e => e.IsPlafon)
                    .HasColumnName("is_plafon")
                    .HasComment("indikator plafon atau tidak");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.NfaPercent)
                    .HasColumnType("numeric(21, 2)")
                    .HasColumnName("NFA_percent")
                    .HasComment("persenan NFA");

                entity.Property(e => e.OtherApValue)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("other_AP_value")
                    .HasComment("nilai AP lainnya");

                entity.Property(e => e.ReceiptDate)
                    .HasColumnType("datetime")
                    .HasColumnName("receipt_date")
                    .HasComment("tanggal resi");

                entity.Property(e => e.ReceiptNo)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("receipt_no")
                    .HasComment("nomor resi");
            });

            modelBuilder.Entity<TrNppPrint>(entity =>
            {
                entity.HasKey(e => e.CreditId);

                entity.ToTable("tr_NPP_print");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.CompleteCheckDate)
                    .HasColumnType("datetime")
                    .HasColumnName("complete_check_date")
                    .HasComment("tanggal cek penyelesaian");

                entity.Property(e => e.CompleteCheckName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("complete_check_name")
                    .HasComment("nama cek penyelesaian");

                entity.Property(e => e.CompleteStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("complete_status")
                    .HasComment("status penyelesaian");

                entity.Property(e => e.FiduciaryReceiveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fiduciary_receive_date")
                    .HasComment("tanggal terima fidusia");

                entity.Property(e => e.FiduciaryReceiveStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("fiduciary_receive_status")
                    .HasComment("status terima fidusia");

                entity.Property(e => e.FiduciaryReceiver)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("fiduciary_receiver")
                    .HasComment("penerima fidusia");

                entity.Property(e => e.FiduciaryRevisionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fiduciary_revision_date")
                    .HasComment("tanggal revisi fidusia");

                entity.Property(e => e.FiduciaryRevisionRequest)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("fiduciary_revision_request")
                    .HasComment("permintaan revisi fidusia");

                entity.Property(e => e.FiduciaryRevisionSender)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("fiduciary_revision_sender")
                    .HasComment("pengirim revisi fidusia");

                entity.Property(e => e.FiduciaryRevisionSenderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fiduciary_revision_sender_date")
                    .HasComment("tanggal pengirim revisi fidusia");

                entity.Property(e => e.FiduciaryRevisionSenderStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("fiduciary_revision_sender_status")
                    .HasComment("status pengirim revisi fidusia");

                entity.Property(e => e.FiduciaryRevisionStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("fiduciary_revision_status")
                    .HasComment("status revisi fidusia");

                entity.Property(e => e.FiduciarySendDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fiduciary_send_date")
                    .HasComment("tanggal kirim fidusia");

                entity.Property(e => e.FiduciarySendStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("fiduciary_send_status")
                    .HasComment("status kirim fidusia");

                entity.Property(e => e.FiduciarySender)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("fiduciary_sender")
                    .HasComment("pengirim fidusia");

                entity.Property(e => e.FirstPrintByAkad)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("first_print_by_akad")
                    .HasComment("user yang pertama kali print akad");

                entity.Property(e => e.FirstPrintByFiduciary)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("first_print_by_fiduciary")
                    .HasComment("user yang pertama kali print fidusia");

                entity.Property(e => e.FirstPrintByPk)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("first_print_by_PK")
                    .HasComment("user yang pertama kali print PK");

                entity.Property(e => e.FirstPrintDateAkad)
                    .HasColumnType("datetime")
                    .HasColumnName("first_print_date_akad")
                    .HasComment("tanggal pertama kali print akad");

                entity.Property(e => e.FirstPrintDateFiduciary)
                    .HasColumnType("datetime")
                    .HasColumnName("first_print_date_fiduciary")
                    .HasComment("tanggal pertama kali print fidusia");

                entity.Property(e => e.FirstPrintDatePk)
                    .HasColumnType("datetime")
                    .HasColumnName("first_print_date_PK")
                    .HasComment("tanggal pertama kali print PK");

                entity.Property(e => e.IsPrintAkad)
                    .HasColumnName("is_print_akad")
                    .HasComment("indikator print akad atau tidak");

                entity.Property(e => e.IsPrintFiduciary)
                    .HasColumnName("is_print_fiduciary")
                    .HasComment("indikator print fidusia atau tidak");

                entity.Property(e => e.IsPrintPk)
                    .HasColumnName("is_print_PK")
                    .HasComment("indikator print PK atau tidak");

                entity.Property(e => e.IsUpload)
                    .HasColumnName("is_upload")
                    .HasComment("indikator upload atau tidak");

                entity.Property(e => e.LastPrintByAkad)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_print_by_akad")
                    .HasComment("user yang terakhir kali print akad");

                entity.Property(e => e.LastPrintByFiduciary)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_print_by_fiduciary")
                    .HasComment("user yang terakhir kali print fidusia");

                entity.Property(e => e.LastPrintByPk)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_print_by_PK")
                    .HasComment("user yang terakhir kali print PK");

                entity.Property(e => e.LastPrintDateAkad)
                    .HasColumnType("datetime")
                    .HasColumnName("last_print_date_akad")
                    .HasComment("tanggal terakhir kali print akad");

                entity.Property(e => e.LastPrintDateFiduciary)
                    .HasColumnType("datetime")
                    .HasColumnName("last_print_date_fiduciary")
                    .HasComment("tanggal terakhir kali print fidusia");

                entity.Property(e => e.LastPrintDatePk)
                    .HasColumnType("datetime")
                    .HasColumnName("last_print_date_PK")
                    .HasComment("tanggal terakhir kali print PK");

                entity.Property(e => e.NotaryReceiveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("notary_receive_date")
                    .HasComment("tanggal terima notaris");

                entity.Property(e => e.NotaryReceiveStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("notary_receive_status")
                    .HasComment("status terima notaris");

                entity.Property(e => e.NotaryReceiver)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("notary_receiver")
                    .HasComment("penerima notaris");

                entity.Property(e => e.NotarySendDate)
                    .HasColumnType("datetime")
                    .HasColumnName("notary_send_date")
                    .HasComment("tanggal kirim notaris");

                entity.Property(e => e.NotarySendStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("notary_send_status")
                    .HasComment("status kirim notaris");

                entity.Property(e => e.NotarySender)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("notary_sender")
                    .HasComment("pengirim notaris");

                entity.Property(e => e.SumOfPrintAkad)
                    .HasColumnName("sum_of_print_akad")
                    .HasComment("total berapa kali print akad");

                entity.Property(e => e.SumOfPrintFiduciary)
                    .HasColumnName("sum_of_print_fiduciary")
                    .HasComment("total berapa kali print fidusia");

                entity.Property(e => e.SumOfPrintPk)
                    .HasColumnName("sum_of_print_PK")
                    .HasComment("total berapa kali print PK");

                entity.HasOne(d => d.Credit)
                    .WithOne(p => p.TrNppPrint)
                    .HasForeignKey<TrNppPrint>(d => d.CreditId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tr_NPP_print_tr_NPP");
            });

            modelBuilder.Entity<TrPo>(entity =>
            {
                entity.HasKey(e => e.PoNo);

                entity.ToTable("tr_PO");

                entity.Property(e => e.PoNo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PO_no")
                    .HasComment("nomor PO (purchase order)");

                entity.Property(e => e.BranchId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("branch_id")
                    .HasComment("ID cabang");

                entity.Property(e => e.CompanyId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("company_id")
                    .HasComment("ID perusahaan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.CreditId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.FirstPrintBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("first_print_by")
                    .HasComment("user pertama print");

                entity.Property(e => e.FirstPrintDate)
                    .HasColumnType("datetime")
                    .HasColumnName("first_print_date")
                    .HasComment("tanggal pertama print");

                entity.Property(e => e.IsPrint)
                    .HasColumnName("is_print")
                    .HasComment("indikator print atau tidak");

                entity.Property(e => e.LastPrintBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_print_by")
                    .HasComment("user terakhir print");

                entity.Property(e => e.LastPrintDate)
                    .HasColumnType("datetime")
                    .HasColumnName("last_print_date")
                    .HasComment("tanggal terakhir print");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.PoDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PO_date")
                    .HasComment("tanggal PO (purchase order)");

                entity.Property(e => e.StatusPo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("status_PO")
                    .IsFixedLength()
                    .HasComment("status PO (purchase order)");

                entity.Property(e => e.SumOfPrint)
                    .HasColumnName("sum_of_print")
                    .HasComment("jumlah berapa kali print");
            });

            modelBuilder.Entity<TrPoSendToEmail>(entity =>
            {
                entity.HasKey(e => e.SendEmailId);

                entity.ToTable("tr_PO_send_to_email");

                entity.Property(e => e.SendEmailId)
                    .HasColumnName("send_email_id")
                    .HasComment("ID kirim email");

                entity.Property(e => e.BranchId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("branch_id")
                    .HasComment("ID cabang");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.DealerCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dealer_code")
                    .HasComment("kode dealer");

                entity.Property(e => e.FileName)
                    .IsUnicode(false)
                    .HasColumnName("file_name")
                    .HasComment("nama file");

                entity.Property(e => e.FilePath)
                    .IsUnicode(false)
                    .HasColumnName("file_path")
                    .HasComment("path/lokasi file");

                entity.Property(e => e.IsSend)
                    .HasColumnName("is_send")
                    .HasComment("indikator sudah kirim atau tidak");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.PoNo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PO_no")
                    .HasComment("nomor PO (purchase order)");
            });

            modelBuilder.Entity<TrPoolingOrders>(entity =>
            {
                entity.HasKey(e => e.OrderId);

                entity.ToTable("tr_pooling_orders");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("order_id");

                entity.Property(e => e.AppiFileName)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("APPI_file_name");

                entity.Property(e => e.AppiFilePath)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("APPI_file_path");

                entity.Property(e => e.AppiResult)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("APPI_result");

                entity.Property(e => e.ApplicationTypeId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("application_type_id");

                entity.Property(e => e.ApproveBy)
                    .IsUnicode(false)
                    .HasColumnName("approve_by");

                entity.Property(e => e.ApproveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("approve_date");

                entity.Property(e => e.AssetBrandId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("asset_brand_id");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("birth_date");

                entity.Property(e => e.BranchId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("branch_id");

                entity.Property(e => e.CompanyId)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("company_id");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on");

                entity.Property(e => e.CustomerName)
                    .IsUnicode(false)
                    .HasColumnName("customer_name");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.DistrictSurveyId).HasColumnName("district_survey_id");

                entity.Property(e => e.GrossDownPayment)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("gross_down_payment");

                entity.Property(e => e.HomeStatusId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("home_status_id");

                entity.Property(e => e.HomeTimeStayId).HasColumnName("home_time_stay_id");

                entity.Property(e => e.IdentityNumber)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("identity_number");

                entity.Property(e => e.IdentityTypeId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("identity_type_id");

                entity.Property(e => e.IncomeId).HasColumnName("income_id");

                entity.Property(e => e.IndustryTypeId).HasColumnName("industry_type_id");

                entity.Property(e => e.ItemMerkTypeId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("item_merk_type_id");

                entity.Property(e => e.KepemilikanUsahaId).HasColumnName("kepemilikan_usaha_id");

                entity.Property(e => e.LamaBekerjaId).HasColumnName("lama_bekerja_id");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on");

                entity.Property(e => e.MaritalId).HasColumnName("marital_id");

                entity.Property(e => e.MaritalStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("marital_status")
                    .IsFixedLength();

                entity.Property(e => e.NikSurveyorCode)
                    .IsUnicode(false)
                    .HasColumnName("NIK_surveyor_code");

                entity.Property(e => e.OrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("order_date");

                entity.Property(e => e.PefindoFileName)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("pefindo_file_name");

                entity.Property(e => e.PefindoFilePath)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("pefindo_file_path");

                entity.Property(e => e.PefindoResult)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pefindo_result");

                entity.Property(e => e.PefindoScore)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pefindo_score");

                entity.Property(e => e.Phone1)
                    .IsUnicode(false)
                    .HasColumnName("phone1");

                entity.Property(e => e.Phone2)
                    .IsUnicode(false)
                    .HasColumnName("phone2");

                entity.Property(e => e.PhotoKtpPasangan)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("photo_KTP_pasangan");

                entity.Property(e => e.PhotoKtpPemohon)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("photo_KTP_pemohon");

                entity.Property(e => e.PhotoNpwp)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("photo_NPWP");

                entity.Property(e => e.PositionId)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("position_id");

                entity.Property(e => e.ProfessionId)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("profession_id");

                entity.Property(e => e.ProvinceSurveyId).HasColumnName("province_survey_id");

                entity.Property(e => e.Recommendation)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("recommendation");

                entity.Property(e => e.RegencySurveyId).HasColumnName("regency_survey_id");

                entity.Property(e => e.RejectBy)
                    .IsUnicode(false)
                    .HasColumnName("reject_by");

                entity.Property(e => e.RejectDate)
                    .HasColumnType("datetime")
                    .HasColumnName("reject_date");

                entity.Property(e => e.SlikFileNamePasangan)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("SLIK_file_name_pasangan");

                entity.Property(e => e.SlikFileNamePemohon)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("SLIK_file_name_pemohon");

                entity.Property(e => e.SlikFilePathPasangan)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SLIK_file_path_pasangan");

                entity.Property(e => e.SlikFilePathPemohon)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SLIK_file_path_pemohon");

                entity.Property(e => e.SlikResultPasangan)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SLIK_result_pasangan");

                entity.Property(e => e.SlikResultPemohon)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SLIK_result_pemohon");

                entity.Property(e => e.SpouseBirthDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("spouse_birth_date");

                entity.Property(e => e.SpouseIdentityNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("spouse_identity_number");

                entity.Property(e => e.SpouseName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("spouse_name");

                entity.Property(e => e.StatusOrder)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("status_order");

                entity.Property(e => e.SurveyAddress)
                    .IsUnicode(false)
                    .HasColumnName("survey_address");

                entity.Property(e => e.SurveyAddressDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("survey_address_desc");

                entity.Property(e => e.SurveyAppointment)
                    .HasColumnType("datetime")
                    .HasColumnName("survey_appointment");

                entity.Property(e => e.SurveyTime)
                    .IsUnicode(false)
                    .HasColumnName("survey_time");

                entity.Property(e => e.SyncDate)
                    .HasColumnType("datetime")
                    .HasColumnName("sync_date");

                entity.Property(e => e.Tenor).HasColumnName("tenor");

                entity.Property(e => e.VillageSurveyId).HasColumnName("village_survey_id");
            });

            modelBuilder.Entity<TrSendPoLog>(entity =>
            {
                entity.ToTable("tr_send_PO_log");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountReceiveable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("account_receiveable")
                    .IsFixedLength();

                entity.Property(e => e.AmountInstallment)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("amount_installment");

                entity.Property(e => e.ApprovedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("approved_date");

                entity.Property(e => e.AssetCost)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("asset_cost");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on");

                entity.Property(e => e.CreditDate)
                    .HasColumnType("datetime")
                    .HasColumnName("credit_date");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id");

                entity.Property(e => e.DealerCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dealer_code");

                entity.Property(e => e.EffectiveRate).HasColumnName("effective_rate");

                entity.Property(e => e.Email)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.FlatRate).HasColumnName("flat_rate");

                entity.Property(e => e.GrossDownPayment)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("gross_down_payment");

                entity.Property(e => e.ItemId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("item_id");

                entity.Property(e => e.ItemMerkId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("item_merk_id");

                entity.Property(e => e.ItemMerkTypeId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("item_merk_type_id");

                entity.Property(e => e.JmlPembiayaan)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("jml_pembiayaan");

                entity.Property(e => e.NettDownPayment)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("nett_down_payment");

                entity.Property(e => e.PoNo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PO_no");

                entity.Property(e => e.Tenor).HasColumnName("tenor");
            });

            modelBuilder.Entity<TrVerificationCustomer>(entity =>
            {
                entity.HasKey(e => e.CreditId)
                    .HasName("PK_tr_verification_consumen");

                entity.ToTable("tr_verification_customer");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.AdminFeeOther)
                    .HasColumnName("admin_fee_other")
                    .HasComment("opsi biaya admin lainnya");

                entity.Property(e => e.AdminFeeOtherAmount)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("admin_fee_other_amount")
                    .HasComment("jumlah nominal biaya admin lainnya");

                entity.Property(e => e.ApprovedDateNpp)
                    .HasColumnType("datetime")
                    .HasColumnName("approved_date_npp")
                    .HasComment("tanggal approve NPP");

                entity.Property(e => e.BillingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("billing_date")
                    .HasComment("tanggal terima tagihan");

                entity.Property(e => e.ConfirmationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("confirmation_date")
                    .HasComment("tanggal konfirmasi");

                entity.Property(e => e.ConfirmationTime)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("confirmation_time")
                    .HasComment("jam konfirmasi");

                entity.Property(e => e.ContactedOption)
                    .HasColumnName("contacted_option")
                    .HasComment("nomor telepon konsumen");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.ItemReceiverName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("item_receiver_name")
                    .HasComment("nama penerima kendaraan");

                entity.Property(e => e.ItemReceiverRelation)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("item_receiver_relation")
                    .HasComment("hubungan penerima kendaraan");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.OptionConsumenPayment)
                    .HasColumnName("option_consumen_payment")
                    .HasComment("opsi pembayaran konsumen (sesuai/tidak sesuai)");

                entity.Property(e => e.OptionConsumenPaymentReal)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("option_consumen_payment_real")
                    .HasComment("pembayaran konsumen sebenarnya");

                entity.Property(e => e.OptionDisbursementUmc)
                    .HasColumnName("option_disbursement_UMC")
                    .HasComment("opsi pencairan UMC (sesuai/tidak sesuai)");

                entity.Property(e => e.OptionDisbursementUmcReal)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("option_disbursement_UMC_real")
                    .HasComment("pencairan UMC sebenarnya");

                entity.Property(e => e.OptionInstallment)
                    .HasColumnName("option_installment")
                    .HasComment("opsi angsuran (sesuai/tidak sesuai)");

                entity.Property(e => e.OptionInstallmentReal)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("option_installment_real")
                    .HasComment("angsuran sebenarnya");

                entity.Property(e => e.OptionItemReceivedDate)
                    .HasColumnName("option_item_received_date")
                    .HasComment("opsi tanggal terima kendaraan (sesuai/tidak sesuai)");

                entity.Property(e => e.OptionItemReceivedDateReal)
                    .HasColumnType("datetime")
                    .HasColumnName("option_item_received_date_real")
                    .HasComment("tanggal terima kendaraan sebenarnya");

                entity.Property(e => e.OptionItemType)
                    .HasColumnName("option_item_type")
                    .HasComment("opsi tipe kendaraan (sesuai/tidak sesuai)");

                entity.Property(e => e.OptionItemTypeReal)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("option_item_type_real")
                    .HasComment("tipe kendaraan sebenarnya");

                entity.Property(e => e.OptionTenor)
                    .HasColumnName("option_tenor")
                    .HasComment("opsi tenor (sesuai/tidak sesuai)");

                entity.Property(e => e.OptionTenorReal)
                    .HasColumnName("option_tenor_real")
                    .HasComment("tenor sebenarnya");

                entity.Property(e => e.OtherNotes)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("other_notes")
                    .HasComment("catatan lain");

                entity.Property(e => e.RequestOfDueDate)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("request_of_due_date")
                    .HasComment("jatuh tempo");

                entity.Property(e => e.VerificationStatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("verification_status")
                    .IsFixedLength()
                    .HasComment("status verifikasi konsumen");
            });

            modelBuilder.Entity<TrVerificationCustomerApplicationIn>(entity =>
            {
                entity.HasKey(e => new { e.FieldId, e.CreditId })
                    .HasName("PK_tr_verification_consumen_application_in");

                entity.ToTable("tr_verification_customer_application_in");

                entity.Property(e => e.FieldId)
                    .HasColumnName("field_id")
                    .HasComment("ID field");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.ApplicationFileName)
                    .IsUnicode(false)
                    .HasColumnName("application_file_name")
                    .HasComment("nama file dokumen aplikasi");

                entity.Property(e => e.ApplicationFilePath)
                    .IsUnicode(false)
                    .HasColumnName("application_file_path")
                    .HasComment("path/lokasi file dokumen aplikasi");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsTrue)
                    .HasColumnName("is_true")
                    .HasComment("indikator ada atau tidak ada");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<VwAgreementOld>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_agreement_old");

                entity.Property(e => e.ItemMerk)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("item_merk");

                entity.Property(e => e.ItemTypeName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("item_type_name");

                entity.Property(e => e.LesseeId)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("lessee_id");

                entity.Property(e => e.NppNo)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("npp_no");
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingGeneratedFunctions(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}