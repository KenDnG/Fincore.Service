// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using FINCORE.LIBRARY.DTO.EntityFramework.Acquisition.AcquisitionModel;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace FINCORE.LIBRARY.DTO.EntityFramework.Acquisition.AcquisitionContext
{
    public partial class AcquisitionContext
    {
        private IAcquisitionContextProcedures _procedures;

        public virtual IAcquisitionContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new AcquisitionContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IAcquisitionContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<sp_approve_cmResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_approve_cm_carResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_approve_nppResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_approve_vertelResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_check_APUPPTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_check_blacklistResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_check_data_referensi_slikResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_delete_bpkbResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_delete_casResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_delete_credit_typeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_generate_estimated_insurance_cost_R2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_generate_estimated_insurance_cost_R4Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_account_ownerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_admin_provisi_interest_feeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_agreement_number_oldResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_analisa_cmo_caResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_approval_reasonResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_approval_schemeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_approval_scheme_listResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_approval_userResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_approver_reasonResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_auto_numberResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_BPKB_BAST_IN_DtlResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_BPKB_ThirdParty_DtlResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_BPKBBASTDtlResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_BPKBPinjamDtlResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_BPKBSKDtlResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_branch_exceptionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_ca_car_detailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_casResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_cas_listResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_cas_po_listResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_check_user_print_poResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_cm_yearResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_cmo_dealer_caResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_credit_sourceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_credit_typeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_credit_type_listResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_credit_type_list_testlookupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_customer_sourceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_customer_typeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_data_nppResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_data_order_source_TACResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_data_order_source_TPResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_data_process_cmResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_data_storage_locationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_data_VerifikasiKonsumenResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_dealer_by_codeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_DocumentFieldResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_employee_surcodeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_evaluationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_fcl_result_detail_konsumen_slikResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_fcl_result_detail_kredit_slikResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_fcl_result_header_slikResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_fcl_result_history_kol_slikResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_fcl_result_summary_slikResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_fclidResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_financing_packageResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_foto_caResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_fotocek_caResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_general_parameterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_gf_bankResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_hierarchy_transactionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_history_approvalResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_identity_typeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_industry_typeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_installmentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_insurance_random_R2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_InsuranceFeeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_life_insurance_kreditResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_list_cmo_caResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_list_dealer_caResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_location_bpkbResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_marital_statusResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_MarketPriceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_monthly_other_installmentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_ms_account_receiveableResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_ms_application_typeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_ms_asset_kindResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_ms_asset_kind_classResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_ms_insurance_cover_typeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_ms_insurance_typeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_ms_interest_rate_typeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_ms_item_brandResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_ms_item_brand_typeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_ms_photo_typeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_ms_productResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_ms_product_financeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_ms_product_marketingResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_ms_provenance_pooling_orderResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_ms_STNK_nameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_ms_usage_typeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_msreferencetype_refnameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_next_approval_schemeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_ngulikResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_nik_konsumenResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_npp_editResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_npp_viewResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_ownership_proofResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_acquisition_mobilResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_acquisition_motorResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_approval_inboxResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_BPKBResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_BPKB_expResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_BPKB_LookupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_BPKBAsuransiResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_BPKBBiroJasaResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_BPKBDealerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_caResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_CA_Lookup_HistoryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_casResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_cas_newResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_lookup_agreement_oldResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_lookup_banknameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_lookup_CGSNoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_lookup_dealerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_lookup_itemResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_lookup_locationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_lookup_marketingheadResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_lookup_msbankResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_lookup_OldNPPResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_lookup_perantaraResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_lookup_surveyorResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_NPPResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_OMAResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_paging_approvalschemeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pooling_orderResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_price_awalResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_process_feeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_process_provisi_insResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_professionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_relationshipResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_repeat_order_categoryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_repeat_order_decisionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_repeat_order_reference_sourceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_residence_statusResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_risk_categoryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_search_casResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_sourceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_storage_locationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_tipe_perantaraResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_tr_cmResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_tr_cm_carResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_tr_cm_photo_detailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_trcas_acheader_numberResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_insert_analisa_cmo_caResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_insert_bpkb_multiple_dbResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_insert_casResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_insert_cas_poResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_insert_cas_with_table_typeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_insert_cmResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_insert_cm_carResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_insert_cm_photo_detailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_insert_cmo_analisa_ca_carResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_insert_credit_typeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_insert_foto_caResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_insert_generate_code_historyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_insert_test_multiple_dbResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_insert_tr_casResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_insert_VerifikasiKonsumenResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_Name_ValueResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_pagination_get_nik_konsumenResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_pagination_lookup_orderidResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_print_CA_approval_progressResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_print_CA_CResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_print_CA_mutasi_rekeningResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_print_CA_PResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_print_CA_SLIKResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_print_npp_approval_letterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_print_npp_consument_statement_letterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_print_npp_important_noticeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_print_npp_memorandum_of_understandingResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_print_npp_name_change_receiptResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_print_npp_name_change_statement_letterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_print_npp_power_of_attorneyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_print_npp_power_of_attorney_fidusiaResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_print_npp_second_statement_letterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_print_npp_statement_letterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_print_po_acquisitionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_print_po_acquisition_mobilResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_print_po_acquisition_motorResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_print_vertelResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_print_vertel_dokumen_inResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_rfa_cmResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SP_RFNDO_Check_ByNppResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SP_RFNDO_Check_Result_GetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SP_RFNDO_GetAssetDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_send_email_print_POResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_template_nameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_trans_open_cmResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_update_analisa_cmo_caResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_update_bpkbResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_update_casResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_update_credit_typeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_update_foto_caResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_update_status_approval_vertelResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spGetListNewVertelLookUpPagingResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spGetListNewVerteltestResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spGetListNewVerteltestPagingResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spSubledgerBookingResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spSubledgerContractInsertResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spSubledgerSupplierInsertResult>().HasNoKey().ToView(null);
        }
    }

    public partial class AcquisitionContextProcedures : IAcquisitionContextProcedures
    {
        private readonly AcquisitionContext _context;

        public AcquisitionContextProcedures(AcquisitionContext context)
        {
            _context = context;
        }

        public virtual async Task<List<sp_approve_cmResult>> sp_approve_cmAsync(string credit_id, string reason_id, string reason, string StatusApproval, string CreatedBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "credit_id",
                    Size = 20,
                    Value = credit_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "reason_id",
                    Size = 10,
                    Value = reason_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "reason",
                    Size = 255,
                    Value = reason ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StatusApproval",
                    Size = 5,
                    Value = StatusApproval ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 20,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_approve_cmResult>("EXEC @returnValue = [dbo].[sp_approve_cm] @credit_id, @reason_id, @reason, @StatusApproval, @CreatedBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_approve_cm_carResult>> sp_approve_cm_carAsync(string credit_id, string reason_id, string reason, string StatusApproval, string CreatedBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "credit_id",
                    Size = 20,
                    Value = credit_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "reason_id",
                    Size = 10,
                    Value = reason_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "reason",
                    Size = 255,
                    Value = reason ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StatusApproval",
                    Size = 5,
                    Value = StatusApproval ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 20,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_approve_cm_carResult>("EXEC @returnValue = [dbo].[sp_approve_cm_car] @credit_id, @reason_id, @reason, @StatusApproval, @CreatedBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_approve_nppResult>> sp_approve_nppAsync(string credit_id, string reason_id, string reason, string StatusApproval, string CreatedBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "credit_id",
                    Size = 20,
                    Value = credit_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "reason_id",
                    Size = 10,
                    Value = reason_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "reason",
                    Size = 255,
                    Value = reason ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StatusApproval",
                    Size = 5,
                    Value = StatusApproval ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 20,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_approve_nppResult>("EXEC @returnValue = [dbo].[sp_approve_npp] @credit_id, @reason_id, @reason, @StatusApproval, @CreatedBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_approve_vertelResult>> sp_approve_vertelAsync(int? reasonId, int? type, string employeeId, string trans_id, string reasonDescription, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "reasonId",
                    Value = reasonId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "employeeId",
                    Size = 100,
                    Value = employeeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_id",
                    Size = -1,
                    Value = trans_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "reasonDescription",
                    Size = -1,
                    Value = reasonDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_approve_vertelResult>("EXEC @returnValue = [dbo].[sp_approve_vertel] @reasonId, @type, @employeeId, @trans_id, @reasonDescription", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_check_APUPPTResult>> sp_check_APUPPTAsync(string KTPNo, string KTPNo1, string KTPNo2, string Name, DateTime? BirthDate, string BirthPlaceKota, string Address, string Occupation, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "KTPNo",
                    Size = 16,
                    Value = KTPNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "KTPNo1",
                    Size = 16,
                    Value = KTPNo1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "KTPNo2",
                    Size = 16,
                    Value = KTPNo2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Name",
                    Size = 100,
                    Value = Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BirthDate",
                    Value = BirthDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "BirthPlaceKota",
                    Size = 50,
                    Value = BirthPlaceKota ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Address",
                    Size = 255,
                    Value = Address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Occupation",
                    Size = 50,
                    Value = Occupation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_check_APUPPTResult>("EXEC @returnValue = [dbo].[sp_check_APUPPT] @KTPNo, @KTPNo1, @KTPNo2, @Name, @BirthDate, @BirthPlaceKota, @Address, @Occupation", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_check_blacklistResult>> sp_check_blacklistAsync(string KTPNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "KTPNo",
                    Size = -1,
                    Value = KTPNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_check_blacklistResult>("EXEC @returnValue = [dbo].[sp_check_blacklist] @KTPNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_check_data_referensi_slikResult>> sp_check_data_referensi_slikAsync(string nik, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "nik",
                    Size = 50,
                    Value = nik ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_check_data_referensi_slikResult>("EXEC @returnValue = [dbo].[sp_check_data_referensi_slik] @nik", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_delete_bpkbResult>> sp_delete_bpkbAsync(string BPKBNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BPKBNo",
                    Size = 100,
                    Value = BPKBNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_delete_bpkbResult>("EXEC @returnValue = [dbo].[sp_delete_bpkb] @BPKBNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_delete_casResult>> sp_delete_casAsync(string Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_delete_casResult>("EXEC @returnValue = [dbo].[sp_delete_cas] @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_delete_credit_typeResult>> sp_delete_credit_typeAsync(string Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_delete_credit_typeResult>("EXEC @returnValue = [dbo].[sp_delete_credit_type] @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_generate_estimated_insurance_cost_R2Result>> sp_generate_estimated_insurance_cost_R2Async(decimal? HargaOTR, string piintCompanyID, string piintbrancID, int? Tenor, int? piintPeriod, string pivchInsRateTable, string pivchInsID, OutputParameter<decimal?> ponumEstimatedInsCostValue, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterponumEstimatedInsCostValue = new SqlParameter
            {
                ParameterName = "ponumEstimatedInsCostValue",
                Precision = 21,
                Scale = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ponumEstimatedInsCostValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "HargaOTR",
                    Precision = 21,
                    Scale = 2,
                    Value = HargaOTR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "piintCompanyID",
                    Size = 1,
                    Value = piintCompanyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "piintbrancID",
                    Size = 5,
                    Value = piintbrancID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Tenor",
                    Value = Tenor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "piintPeriod",
                    Value = piintPeriod ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pivchInsRateTable",
                    Size = 50,
                    Value = pivchInsRateTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pivchInsID",
                    Size = 3,
                    Value = pivchInsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterponumEstimatedInsCostValue,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_generate_estimated_insurance_cost_R2Result>("EXEC @returnValue = [dbo].[sp_generate_estimated_insurance_cost_R2] @HargaOTR, @piintCompanyID, @piintbrancID, @Tenor, @piintPeriod, @pivchInsRateTable, @pivchInsID, @ponumEstimatedInsCostValue OUTPUT", sqlParameters, cancellationToken);

            ponumEstimatedInsCostValue.SetValue(parameterponumEstimatedInsCostValue.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_generate_estimated_insurance_cost_R4Result>> sp_generate_estimated_insurance_cost_R4Async(string pivchBranchID, int? piintTenor, decimal? pinumHargaPertanggungan, DateTime? pidtmDownloadDate, int? pidtmItemYear, string pivchModelID, int? piintTipeGuna, int? pivchInsModelID, string InsType1, string InsType2, string InsType3, string InsType4, string InsType5, OutputParameter<decimal?> poTotalPremi, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpoTotalPremi = new SqlParameter
            {
                ParameterName = "poTotalPremi",
                Precision = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = poTotalPremi?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pivchBranchID",
                    Size = 3,
                    Value = pivchBranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "piintTenor",
                    Value = piintTenor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pinumHargaPertanggungan",
                    Precision = 18,
                    Value = pinumHargaPertanggungan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pidtmDownloadDate",
                    Value = pidtmDownloadDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "pidtmItemYear",
                    Value = pidtmItemYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pivchModelID",
                    Size = 15,
                    Value = pivchModelID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "piintTipeGuna",
                    Value = piintTipeGuna ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pivchInsModelID",
                    Value = pivchInsModelID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InsType1",
                    Size = 15,
                    Value = InsType1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InsType2",
                    Size = 15,
                    Value = InsType2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InsType3",
                    Size = 15,
                    Value = InsType3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InsType4",
                    Size = 15,
                    Value = InsType4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InsType5",
                    Size = 15,
                    Value = InsType5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterpoTotalPremi,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_generate_estimated_insurance_cost_R4Result>("EXEC @returnValue = [dbo].[sp_generate_estimated_insurance_cost_R4] @pivchBranchID, @piintTenor, @pinumHargaPertanggungan, @pidtmDownloadDate, @pidtmItemYear, @pivchModelID, @piintTipeGuna, @pivchInsModelID, @InsType1, @InsType2, @InsType3, @InsType4, @InsType5, @poTotalPremi OUTPUT", sqlParameters, cancellationToken);

            poTotalPremi.SetValue(parameterpoTotalPremi.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_generate_insurance_cost_R4_OJKAsync(string pivchBranchID, int? piintTenor, decimal? pinumHargaPertanggungan, DateTime? pidtmDownloadDate, int? pidtmItemYear, string pivchModelID, int? piintTipeGuna, int? pivchInsModelID, string InsType1, string InsType2, string InsType3, string InsType4, string InsType5, OutputParameter<decimal?> poTotalPremi, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterpoTotalPremi = new SqlParameter
            {
                ParameterName = "poTotalPremi",
                Precision = 18,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = poTotalPremi?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pivchBranchID",
                    Size = 5,
                    Value = pivchBranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "piintTenor",
                    Value = piintTenor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pinumHargaPertanggungan",
                    Precision = 18,
                    Value = pinumHargaPertanggungan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pidtmDownloadDate",
                    Value = pidtmDownloadDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "pidtmItemYear",
                    Value = pidtmItemYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pivchModelID",
                    Size = 15,
                    Value = pivchModelID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "piintTipeGuna",
                    Value = piintTipeGuna ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pivchInsModelID",
                    Value = pivchInsModelID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InsType1",
                    Size = 15,
                    Value = InsType1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InsType2",
                    Size = 15,
                    Value = InsType2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InsType3",
                    Size = 15,
                    Value = InsType3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InsType4",
                    Size = 15,
                    Value = InsType4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InsType5",
                    Size = 15,
                    Value = InsType5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterpoTotalPremi,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_generate_insurance_cost_R4_OJK] @pivchBranchID, @piintTenor, @pinumHargaPertanggungan, @pidtmDownloadDate, @pidtmItemYear, @pivchModelID, @piintTipeGuna, @pivchInsModelID, @InsType1, @InsType2, @InsType3, @InsType4, @InsType5, @poTotalPremi OUTPUT", sqlParameters, cancellationToken);

            poTotalPremi.SetValue(parameterpoTotalPremi.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_account_ownerResult>> sp_get_account_ownerAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_account_ownerResult>("EXEC @returnValue = [dbo].[sp_get_account_owner]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_admin_provisi_interest_feeResult>> sp_get_admin_provisi_interest_feeAsync(string PackageID, string Tenor, string OTR, string ARType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PackageID",
                    Size = 20,
                    Value = PackageID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Tenor",
                    Size = 5,
                    Value = Tenor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OTR",
                    Size = 20,
                    Value = OTR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ARType",
                    Size = 20,
                    Value = ARType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_admin_provisi_interest_feeResult>("EXEC @returnValue = [dbo].[sp_get_admin_provisi_interest_fee] @PackageID, @Tenor, @OTR, @ARType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_agreement_number_oldResult>> sp_get_agreement_number_oldAsync(string lesseeid, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "lesseeid",
                    Size = 16,
                    Value = lesseeid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_agreement_number_oldResult>("EXEC @returnValue = [dbo].[sp_get_agreement_number_old] @lesseeid", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_analisa_cmo_caResult>> sp_get_analisa_cmo_caAsync(string CASId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CASId",
                    Size = 10,
                    Value = CASId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_analisa_cmo_caResult>("EXEC @returnValue = [dbo].[sp_get_analisa_cmo_ca] @CASId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_approval_reasonResult>> sp_get_approval_reasonAsync(string UserId, string reason_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Size = 20,
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "reason_id",
                    Size = 10,
                    Value = reason_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_approval_reasonResult>("EXEC @returnValue = [dbo].[sp_get_approval_reason] @UserId, @reason_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_approval_schemeResult>> sp_get_approval_schemeAsync(string BranchID, string TransTypeId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 10,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransTypeId",
                    Size = 10,
                    Value = TransTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_approval_schemeResult>("EXEC @returnValue = [dbo].[sp_get_approval_scheme] @BranchID, @TransTypeId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_approval_scheme_listResult>> sp_get_approval_scheme_listAsync(string ApprovalSchemeID, string BranchID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApprovalSchemeID",
                    Size = 10,
                    Value = ApprovalSchemeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 5,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_approval_scheme_listResult>("EXEC @returnValue = [dbo].[sp_get_approval_scheme_list] @ApprovalSchemeID, @BranchID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_approval_userResult>> sp_get_approval_userAsync(string ApprovalSchemeID, string ApprovalLevelDesc, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApprovalSchemeID",
                    Size = 10,
                    Value = ApprovalSchemeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ApprovalLevelDesc",
                    Size = 10,
                    Value = ApprovalLevelDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_approval_userResult>("EXEC @returnValue = [dbo].[sp_get_approval_user] @ApprovalSchemeID, @ApprovalLevelDesc", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_approver_reasonResult>> sp_get_approver_reasonAsync(string typeApproval, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "typeApproval",
                    Size = 100,
                    Value = typeApproval ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_approver_reasonResult>("EXEC @returnValue = [dbo].[sp_get_approver_reason] @typeApproval", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_auto_numberResult>> sp_get_auto_numberAsync(string branchId, string codeType, OutputParameter<string> credit_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametercredit_id = new SqlParameter
            {
                ParameterName = "credit_id",
                Size = 50,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = credit_id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "branchId",
                    Size = 50,
                    Value = branchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "codeType",
                    Size = 50,
                    Value = codeType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parametercredit_id,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_auto_numberResult>("EXEC @returnValue = [dbo].[sp_get_auto_number] @branchId, @codeType, @credit_id OUTPUT", sqlParameters, cancellationToken);

            credit_id.SetValue(parametercredit_id.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_BPKB_BAST_IN_DtlResult>> sp_get_BPKB_BAST_IN_DtlAsync(string CreditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 100,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_BPKB_BAST_IN_DtlResult>("EXEC @returnValue = [dbo].[sp_get_BPKB_BAST_IN_Dtl] @CreditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_BPKB_ThirdParty_DtlResult>> sp_get_BPKB_ThirdParty_DtlAsync(string CreditId, string CompanyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 100,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Size = 100,
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_BPKB_ThirdParty_DtlResult>("EXEC @returnValue = [dbo].[sp_get_BPKB_ThirdParty_Dtl] @CreditId, @CompanyId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_BPKBBASTDtlResult>> sp_get_BPKBBASTDtlAsync(string CreditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 100,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_BPKBBASTDtlResult>("EXEC @returnValue = [dbo].[sp_get_BPKBBASTDtl] @CreditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_BPKBPinjamDtlResult>> sp_get_BPKBPinjamDtlAsync(string CreditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 100,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_BPKBPinjamDtlResult>("EXEC @returnValue = [dbo].[sp_get_BPKBPinjamDtl] @CreditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_BPKBSKDtlResult>> sp_get_BPKBSKDtlAsync(string CreditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 100,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_BPKBSKDtlResult>("EXEC @returnValue = [dbo].[sp_get_BPKBSKDtl] @CreditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_branch_exceptionResult>> sp_get_branch_exceptionAsync(string BranchId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Size = 5,
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_branch_exceptionResult>("EXEC @returnValue = [dbo].[sp_get_branch_exception] @BranchId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_ca_car_detailResult>> sp_get_ca_car_detailAsync(string credit_id, string CreatedBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "credit_id",
                    Size = 20,
                    Value = credit_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 20,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_ca_car_detailResult>("EXEC @returnValue = [dbo].[sp_get_ca_car_detail] @credit_id, @CreatedBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_casResult>> sp_get_casAsync(string Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_casResult>("EXEC @returnValue = [dbo].[sp_get_cas] @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_cas_listResult>> sp_get_cas_listAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_cas_listResult>("EXEC @returnValue = [dbo].[sp_get_cas_list]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_cas_po_listResult>> sp_get_cas_po_listAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_cas_po_listResult>("EXEC @returnValue = [dbo].[sp_get_cas_po_list]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_check_user_print_poResult>> sp_get_check_user_print_poAsync(string nikUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "nikUser",
                    Size = 50,
                    Value = nikUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_check_user_print_poResult>("EXEC @returnValue = [dbo].[sp_get_check_user_print_po] @nikUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_cm_yearResult>> sp_get_cm_yearAsync(string item_id, string Item_Brand_Id, string asset_kind_class_id, string asset_type_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "item_id",
                    Size = 3,
                    Value = item_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Item_Brand_Id",
                    Size = 10,
                    Value = Item_Brand_Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "asset_kind_class_id",
                    Size = 10,
                    Value = asset_kind_class_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "asset_type_id",
                    Size = 10,
                    Value = asset_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_cm_yearResult>("EXEC @returnValue = [dbo].[sp_get_cm_year] @item_id, @Item_Brand_Id, @asset_kind_class_id, @asset_type_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_cmo_dealer_caResult>> sp_get_cmo_dealer_caAsync(string CreditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 10,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_cmo_dealer_caResult>("EXEC @returnValue = [dbo].[sp_get_cmo_dealer_ca] @CreditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_credit_sourceResult>> sp_get_credit_sourceAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_credit_sourceResult>("EXEC @returnValue = [dbo].[sp_get_credit_source]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_credit_typeResult>> sp_get_credit_typeAsync(string Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_credit_typeResult>("EXEC @returnValue = [dbo].[sp_get_credit_type] @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_credit_type_listResult>> sp_get_credit_type_listAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_credit_type_listResult>("EXEC @returnValue = [dbo].[sp_get_credit_type_list]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_credit_type_list_testlookupResult>> sp_get_credit_type_list_testlookupAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_credit_type_list_testlookupResult>("EXEC @returnValue = [dbo].[sp_get_credit_type_list_testlookup]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_customer_sourceResult>> sp_get_customer_sourceAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_customer_sourceResult>("EXEC @returnValue = [dbo].[sp_get_customer_source]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_customer_typeResult>> sp_get_customer_typeAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_customer_typeResult>("EXEC @returnValue = [dbo].[sp_get_customer_type]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_data_nppResult>> sp_get_data_nppAsync(string CreditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 30,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_data_nppResult>("EXEC @returnValue = [dbo].[sp_get_data_npp] @CreditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_data_order_source_TACResult>> sp_get_data_order_source_TACAsync(string CreditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 30,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_data_order_source_TACResult>("EXEC @returnValue = [dbo].[sp_get_data_order_source_TAC] @CreditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_data_order_source_TPResult>> sp_get_data_order_source_TPAsync(string CreditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 30,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_data_order_source_TPResult>("EXEC @returnValue = [dbo].[sp_get_data_order_source_TP] @CreditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_data_process_cmResult>> sp_get_data_process_cmAsync(string CreditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 30,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_data_process_cmResult>("EXEC @returnValue = [dbo].[sp_get_data_process_cm] @CreditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_data_storage_locationResult>> sp_get_data_storage_locationAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_data_storage_locationResult>("EXEC @returnValue = [dbo].[sp_get_data_storage_location]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_data_VerifikasiKonsumenResult>> sp_get_data_VerifikasiKonsumenAsync(string VerifikasiNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "VerifikasiNo",
                    Size = 100,
                    Value = VerifikasiNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_data_VerifikasiKonsumenResult>("EXEC @returnValue = [dbo].[sp_get_data_VerifikasiKonsumen] @VerifikasiNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_dealer_by_codeResult>> sp_get_dealer_by_codeAsync(string dealerCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dealerCode",
                    Size = 50,
                    Value = dealerCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_dealer_by_codeResult>("EXEC @returnValue = [dbo].[sp_get_dealer_by_code] @dealerCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_DocumentFieldResult>> sp_get_DocumentFieldAsync(string CMNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CMNo",
                    Size = 20,
                    Value = CMNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_DocumentFieldResult>("EXEC @returnValue = [dbo].[sp_get_DocumentField] @CMNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_employee_surcodeResult>> sp_get_employee_surcodeAsync(string NIKsurveryorcode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NIKsurveryorcode",
                    Size = 50,
                    Value = NIKsurveryorcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_employee_surcodeResult>("EXEC @returnValue = [dbo].[sp_get_employee_surcode] @NIKsurveryorcode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_evaluationResult>> sp_get_evaluationAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_evaluationResult>("EXEC @returnValue = [dbo].[sp_get_evaluation]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_fcl_result_detail_konsumen_slikResult>> sp_get_fcl_result_detail_konsumen_slikAsync(string fclid, string SearchTerm, int? PageIndex, int? PageSize, OutputParameter<int?> TotalPages, OutputParameter<int?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "fclid",
                    Size = 10,
                    Value = fclid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageIndex",
                    Value = PageIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_fcl_result_detail_konsumen_slikResult>("EXEC @returnValue = [dbo].[sp_get_fcl_result_detail_konsumen_slik] @fclid, @SearchTerm, @PageIndex, @PageSize, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_fcl_result_detail_kredit_slikResult>> sp_get_fcl_result_detail_kredit_slikAsync(string fclid, string SearchTerm, int? PageIndex, int? PageSize, OutputParameter<int?> TotalPages, OutputParameter<int?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "fclid",
                    Size = 10,
                    Value = fclid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageIndex",
                    Value = PageIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_fcl_result_detail_kredit_slikResult>("EXEC @returnValue = [dbo].[sp_get_fcl_result_detail_kredit_slik] @fclid, @SearchTerm, @PageIndex, @PageSize, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_fcl_result_header_slikResult>> sp_get_fcl_result_header_slikAsync(string fclid, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "fclid",
                    Size = 10,
                    Value = fclid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_fcl_result_header_slikResult>("EXEC @returnValue = [dbo].[sp_get_fcl_result_header_slik] @fclid", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_fcl_result_history_kol_slikResult>> sp_get_fcl_result_history_kol_slikAsync(string fclid, string SearchTerm, int? PageIndex, int? PageSize, OutputParameter<int?> TotalPages, OutputParameter<int?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "fclid",
                    Size = 10,
                    Value = fclid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageIndex",
                    Value = PageIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_fcl_result_history_kol_slikResult>("EXEC @returnValue = [dbo].[sp_get_fcl_result_history_kol_slik] @fclid, @SearchTerm, @PageIndex, @PageSize, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_fcl_result_summary_slikResult>> sp_get_fcl_result_summary_slikAsync(string fclid, string SearchTerm, int? PageIndex, int? PageSize, OutputParameter<int?> TotalPages, OutputParameter<int?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "fclid",
                    Size = 10,
                    Value = fclid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageIndex",
                    Value = PageIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_fcl_result_summary_slikResult>("EXEC @returnValue = [dbo].[sp_get_fcl_result_summary_slik] @fclid, @SearchTerm, @PageIndex, @PageSize, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_fclidResult>> sp_get_fclidAsync(string CASId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CASId",
                    Size = 10,
                    Value = CASId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_fclidResult>("EXEC @returnValue = [dbo].[sp_get_fclid] @CASId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_financing_packageResult>> sp_get_financing_packageAsync(string Tenor, string OTR, string ARType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Tenor",
                    Size = 10,
                    Value = Tenor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OTR",
                    Size = 50,
                    Value = OTR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ARType",
                    Size = 1,
                    Value = ARType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_financing_packageResult>("EXEC @returnValue = [dbo].[sp_get_financing_package] @Tenor, @OTR, @ARType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_foto_caResult>> sp_get_foto_caAsync(string CreditId, string PhotoTypeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 20,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhotoTypeID",
                    Size = 10,
                    Value = PhotoTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_foto_caResult>("EXEC @returnValue = [dbo].[sp_get_foto_ca] @CreditId, @PhotoTypeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_fotocek_caResult>> sp_get_fotocek_caAsync(string CreditId, string PhotoID, string PhotoTypeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 10,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhotoID",
                    Size = 10,
                    Value = PhotoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhotoTypeID",
                    Size = 10,
                    Value = PhotoTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_fotocek_caResult>("EXEC @returnValue = [dbo].[sp_get_fotocek_ca] @CreditId, @PhotoID, @PhotoTypeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_general_parameterResult>> sp_get_general_parameterAsync(string parameter, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "parameter",
                    Size = 15,
                    Value = parameter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_general_parameterResult>("EXEC @returnValue = [dbo].[sp_get_general_parameter] @parameter", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_gf_bankResult>> sp_get_gf_bankAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_gf_bankResult>("EXEC @returnValue = [dbo].[sp_get_gf_bank]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_hierarchy_transactionResult>> sp_get_hierarchy_transactionAsync(string employee_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "employee_id",
                    Size = 20,
                    Value = employee_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_hierarchy_transactionResult>("EXEC @returnValue = [dbo].[sp_get_hierarchy_transaction] @employee_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_history_approvalResult>> sp_get_history_approvalAsync(string credit_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "credit_id",
                    Size = 20,
                    Value = credit_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_history_approvalResult>("EXEC @returnValue = [dbo].[sp_get_history_approval] @credit_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_identity_typeResult>> sp_get_identity_typeAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_identity_typeResult>("EXEC @returnValue = [dbo].[sp_get_identity_type]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_industry_typeResult>> sp_get_industry_typeAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_industry_typeResult>("EXEC @returnValue = [dbo].[sp_get_industry_type]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_installmentResult>> sp_get_installmentAsync(string asset_kind_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "asset_kind_id",
                    Size = 3,
                    Value = asset_kind_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_installmentResult>("EXEC @returnValue = [dbo].[sp_get_installment] @asset_kind_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_insurance_random_R2Result>> sp_get_insurance_random_R2Async(string CM, OutputParameter<string> InsID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterInsID = new SqlParameter
            {
                ParameterName = "InsID",
                Size = 3,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = InsID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CM",
                    Size = 10,
                    Value = CM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterInsID,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_insurance_random_R2Result>("EXEC @returnValue = [dbo].[sp_get_insurance_random_R2] @CM, @InsID OUTPUT", sqlParameters, cancellationToken);

            InsID.SetValue(parameterInsID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_get_insurance_random_R4Async(string CM, OutputParameter<string> InsID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterInsID = new SqlParameter
            {
                ParameterName = "InsID",
                Size = 3,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = InsID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CM",
                    Size = 10,
                    Value = CM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterInsID,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_get_insurance_random_R4] @CM, @InsID OUTPUT", sqlParameters, cancellationToken);

            InsID.SetValue(parameterInsID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_InsuranceFeeResult>> sp_get_InsuranceFeeAsync(string asset_kind_id, string OTR, string CompanyId, string BranchId, string Tenor, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "asset_kind_id",
                    Size = 3,
                    Value = asset_kind_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OTR",
                    Size = 18,
                    Value = OTR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Size = 1,
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Size = 3,
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Tenor",
                    Size = 10,
                    Value = Tenor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_InsuranceFeeResult>("EXEC @returnValue = [dbo].[sp_get_InsuranceFee] @asset_kind_id, @OTR, @CompanyId, @BranchId, @Tenor", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_life_insurance_kreditResult>> sp_get_life_insurance_kreditAsync(string OTR, string DP, string AdminFeeKredit, string ProvisiFeeKredit, string BiayaProsesKredit, string BranchIdAsuransi, string Tenor, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "OTR",
                    Size = 20,
                    Value = OTR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DP",
                    Size = 20,
                    Value = DP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AdminFeeKredit",
                    Size = 20,
                    Value = AdminFeeKredit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisiFeeKredit",
                    Size = 20,
                    Value = ProvisiFeeKredit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BiayaProsesKredit",
                    Size = 20,
                    Value = BiayaProsesKredit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchIdAsuransi",
                    Size = 5,
                    Value = BranchIdAsuransi ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Tenor",
                    Size = 5,
                    Value = Tenor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_life_insurance_kreditResult>("EXEC @returnValue = [dbo].[sp_get_life_insurance_kredit] @OTR, @DP, @AdminFeeKredit, @ProvisiFeeKredit, @BiayaProsesKredit, @BranchIdAsuransi, @Tenor", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_list_cmo_caResult>> sp_get_list_cmo_caAsync(string CreditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 10,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_list_cmo_caResult>("EXEC @returnValue = [dbo].[sp_get_list_cmo_ca] @CreditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_list_dealer_caResult>> sp_get_list_dealer_caAsync(string CreditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 10,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_list_dealer_caResult>("EXEC @returnValue = [dbo].[sp_get_list_dealer_ca] @CreditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_location_bpkbResult>> sp_get_location_bpkbAsync(string BranchId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Size = 100,
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_location_bpkbResult>("EXEC @returnValue = [dbo].[sp_get_location_bpkb] @BranchId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_marital_statusResult>> sp_get_marital_statusAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_marital_statusResult>("EXEC @returnValue = [dbo].[sp_get_marital_status]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_MarketPriceResult>> sp_get_MarketPriceAsync(string asset_kind_id, string CompanyId, string BranchId, string asset_type_id, string Year, string credit_id, string tipe_kerja_sama, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "asset_kind_id",
                    Size = 3,
                    Value = asset_kind_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Size = 1,
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Size = 3,
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "asset_type_id",
                    Size = 10,
                    Value = asset_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Year",
                    Size = 4,
                    Value = Year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "credit_id",
                    Size = 14,
                    Value = credit_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "tipe_kerja_sama",
                    Size = 10,
                    Value = tipe_kerja_sama ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_MarketPriceResult>("EXEC @returnValue = [dbo].[sp_get_MarketPrice] @asset_kind_id, @CompanyId, @BranchId, @asset_type_id, @Year, @credit_id, @tipe_kerja_sama", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_monthly_other_installmentResult>> sp_get_monthly_other_installmentAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_monthly_other_installmentResult>("EXEC @returnValue = [dbo].[sp_get_monthly_other_installment]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_ms_account_receiveableResult>> sp_get_ms_account_receiveableAsync(string where, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "where",
                    Size = 225,
                    Value = where ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_ms_account_receiveableResult>("EXEC @returnValue = [dbo].[sp_get_ms_account_receiveable] @where", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_ms_application_typeResult>> sp_get_ms_application_typeAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_ms_application_typeResult>("EXEC @returnValue = [dbo].[sp_get_ms_application_type]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_ms_asset_kindResult>> sp_get_ms_asset_kindAsync(string asset_kind_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "asset_kind_id",
                    Size = 3,
                    Value = asset_kind_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_ms_asset_kindResult>("EXEC @returnValue = [dbo].[sp_get_ms_asset_kind] @asset_kind_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_ms_asset_kind_classResult>> sp_get_ms_asset_kind_classAsync(string item_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "item_id",
                    Size = 3,
                    Value = item_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_ms_asset_kind_classResult>("EXEC @returnValue = [dbo].[sp_get_ms_asset_kind_class] @item_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_ms_insurance_cover_typeResult>> sp_get_ms_insurance_cover_typeAsync(string where, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "where",
                    Size = 225,
                    Value = where ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_ms_insurance_cover_typeResult>("EXEC @returnValue = [dbo].[sp_get_ms_insurance_cover_type] @where", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_ms_insurance_typeResult>> sp_get_ms_insurance_typeAsync(string where, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "where",
                    Size = 225,
                    Value = where ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_ms_insurance_typeResult>("EXEC @returnValue = [dbo].[sp_get_ms_insurance_type] @where", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_ms_interest_rate_typeResult>> sp_get_ms_interest_rate_typeAsync(string where, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "where",
                    Size = 225,
                    Value = where ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_ms_interest_rate_typeResult>("EXEC @returnValue = [dbo].[sp_get_ms_interest_rate_type] @where", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_ms_item_brandResult>> sp_get_ms_item_brandAsync(string item_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "item_id",
                    Size = 3,
                    Value = item_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_ms_item_brandResult>("EXEC @returnValue = [dbo].[sp_get_ms_item_brand] @item_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_ms_item_brand_typeResult>> sp_get_ms_item_brand_typeAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_ms_item_brand_typeResult>("EXEC @returnValue = [dbo].[sp_get_ms_item_brand_type]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_ms_photo_typeResult>> sp_get_ms_photo_typeAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_ms_photo_typeResult>("EXEC @returnValue = [dbo].[sp_get_ms_photo_type]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_ms_productResult>> sp_get_ms_productAsync(string where, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "where",
                    Size = -1,
                    Value = where ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_ms_productResult>("EXEC @returnValue = [dbo].[sp_get_ms_product] @where", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_ms_product_financeResult>> sp_get_ms_product_financeAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_ms_product_financeResult>("EXEC @returnValue = [dbo].[sp_get_ms_product_finance]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_ms_product_marketingResult>> sp_get_ms_product_marketingAsync(string company_id, string asset_kind_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "company_id",
                    Size = 3,
                    Value = company_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "asset_kind_id",
                    Size = 3,
                    Value = asset_kind_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_ms_product_marketingResult>("EXEC @returnValue = [dbo].[sp_get_ms_product_marketing] @company_id, @asset_kind_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_ms_provenance_pooling_orderResult>> sp_get_ms_provenance_pooling_orderAsync(string where, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "where",
                    Size = 225,
                    Value = where ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_ms_provenance_pooling_orderResult>("EXEC @returnValue = [dbo].[sp_get_ms_provenance_pooling_order] @where", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_ms_STNK_nameResult>> sp_get_ms_STNK_nameAsync(string where, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "where",
                    Size = 225,
                    Value = where ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_ms_STNK_nameResult>("EXEC @returnValue = [dbo].[sp_get_ms_STNK_name] @where", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_ms_usage_typeResult>> sp_get_ms_usage_typeAsync(string where, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "where",
                    Size = 225,
                    Value = where ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_ms_usage_typeResult>("EXEC @returnValue = [dbo].[sp_get_ms_usage_type] @where", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_msreferencetype_refnameResult>> sp_get_msreferencetype_refnameAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_msreferencetype_refnameResult>("EXEC @returnValue = [dbo].[sp_get_msreferencetype_refname]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_next_approval_schemeResult>> sp_get_next_approval_schemeAsync(string ApprovalLevelDesc, string ApprovalSchemeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApprovalLevelDesc",
                    Size = 10,
                    Value = ApprovalLevelDesc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ApprovalSchemeID",
                    Size = 10,
                    Value = ApprovalSchemeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_next_approval_schemeResult>("EXEC @returnValue = [dbo].[sp_get_next_approval_scheme] @ApprovalLevelDesc, @ApprovalSchemeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_ngulikResult>> sp_get_ngulikAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_ngulikResult>("EXEC @returnValue = [dbo].[sp_get_ngulik]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_nik_konsumenResult>> sp_get_nik_konsumenAsync(string employee_name, string branchId, bool? isKonsol, bool? includePos, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "employee_name",
                    Size = 50,
                    Value = employee_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "branchId",
                    Size = 50,
                    Value = branchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isKonsol",
                    Value = isKonsol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "includePos",
                    Value = includePos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_nik_konsumenResult>("EXEC @returnValue = [dbo].[sp_get_nik_konsumen] @employee_name, @branchId, @isKonsol, @includePos", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_npp_editResult>> sp_get_npp_editAsync(string CreditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 30,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_npp_editResult>("EXEC @returnValue = [dbo].[sp_get_npp_edit] @CreditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_npp_viewResult>> sp_get_npp_viewAsync(string CreditId, string UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 30,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Size = 10,
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_npp_viewResult>("EXEC @returnValue = [dbo].[sp_get_npp_view] @CreditId, @UserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_ownership_proofResult>> sp_get_ownership_proofAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_ownership_proofResult>("EXEC @returnValue = [dbo].[sp_get_ownership_proof]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_acquisition_mobilResult>> sp_get_pagination_acquisition_mobilAsync(string Branch_Id, string SearchTerm, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Branch_Id",
                    Size = 5,
                    Value = Branch_Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_acquisition_mobilResult>("EXEC @returnValue = [dbo].[sp_get_pagination_acquisition_mobil] @Branch_Id, @SearchTerm, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_acquisition_motorResult>> sp_get_pagination_acquisition_motorAsync(string Branch_Id, string SearchTerm, string SearchTerm1, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Branch_Id",
                    Size = 5,
                    Value = Branch_Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerm1",
                    Size = 100,
                    Value = SearchTerm1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_acquisition_motorResult>("EXEC @returnValue = [dbo].[sp_get_pagination_acquisition_motor] @Branch_Id, @SearchTerm, @SearchTerm1, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_approval_inboxResult>> sp_get_pagination_approval_inboxAsync(string EmployeeId, string SearchTerm, OutputParameter<int?> PageIndex, OutputParameter<int?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EmployeeId",
                    Size = 60,
                    Value = EmployeeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_approval_inboxResult>("EXEC @returnValue = [dbo].[sp_get_pagination_approval_inbox] @EmployeeId, @SearchTerm, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_BPKBResult>> sp_get_pagination_BPKBAsync(string SearchTerm, string BranchID, int? PageIndex, int? PageSize, OutputParameter<int?> TotalPages, OutputParameter<int?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 100,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageIndex",
                    Value = PageIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_BPKBResult>("EXEC @returnValue = [dbo].[sp_get_pagination_BPKB] @SearchTerm, @BranchID, @PageIndex, @PageSize, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_BPKB_expResult>> sp_get_pagination_BPKB_expAsync(string SearchTerm, string BranchID, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 100,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_BPKB_expResult>("EXEC @returnValue = [dbo].[sp_get_pagination_BPKB_exp] @SearchTerm, @BranchID, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_BPKB_LookupResult>> sp_get_pagination_BPKB_LookupAsync(string SearchTerm, string BranchID, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 100,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_BPKB_LookupResult>("EXEC @returnValue = [dbo].[sp_get_pagination_BPKB_Lookup] @SearchTerm, @BranchID, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_BPKBAsuransiResult>> sp_get_pagination_BPKBAsuransiAsync(string SearchTerm, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_BPKBAsuransiResult>("EXEC @returnValue = [dbo].[sp_get_pagination_BPKBAsuransi] @SearchTerm, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_BPKBBiroJasaResult>> sp_get_pagination_BPKBBiroJasaAsync(string SearchTerm, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_BPKBBiroJasaResult>("EXEC @returnValue = [dbo].[sp_get_pagination_BPKBBiroJasa] @SearchTerm, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_BPKBDealerResult>> sp_get_pagination_BPKBDealerAsync(string SearchTerm, string CreditId, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 100,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_BPKBDealerResult>("EXEC @returnValue = [dbo].[sp_get_pagination_BPKBDealer] @SearchTerm, @CreditId, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_caResult>> sp_get_pagination_caAsync(string SearchTerm, int? PageIndex, int? PageSize, OutputParameter<int?> TotalPages, OutputParameter<int?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageIndex",
                    Value = PageIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_caResult>("EXEC @returnValue = [dbo].[sp_get_pagination_ca] @SearchTerm, @PageIndex, @PageSize, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_CA_Lookup_HistoryResult>> sp_get_pagination_CA_Lookup_HistoryAsync(string CANo, string TransTypeId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CANo",
                    Size = 10,
                    Value = CANo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransTypeId",
                    Size = 10,
                    Value = TransTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_CA_Lookup_HistoryResult>("EXEC @returnValue = [dbo].[sp_get_pagination_CA_Lookup_History] @CANo, @TransTypeId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_casResult>> sp_get_pagination_casAsync(string SearchTerm, OutputParameter<int?> PageIndex, OutputParameter<int?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<int?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_casResult>("EXEC @returnValue = [dbo].[sp_get_pagination_cas] @SearchTerm, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_cas_newResult>> sp_get_pagination_cas_newAsync(string SearchTerm, OutputParameter<int?> PageIndex, OutputParameter<int?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<int?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_cas_newResult>("EXEC @returnValue = [dbo].[sp_get_pagination_cas_new] @SearchTerm, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_lookup_agreement_oldResult>> sp_get_pagination_lookup_agreement_oldAsync(string SearchTerm, string LesseeId, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LesseeId",
                    Size = 50,
                    Value = LesseeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_lookup_agreement_oldResult>("EXEC @returnValue = [dbo].[sp_get_pagination_lookup_agreement_old] @SearchTerm, @LesseeId, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_lookup_banknameResult>> sp_get_pagination_lookup_banknameAsync(string SearchTerm, string BranchId, string CompanyId, string PemilikRekening, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Size = 5,
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Size = 1,
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PemilikRekening",
                    Size = 10,
                    Value = PemilikRekening ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_lookup_banknameResult>("EXEC @returnValue = [dbo].[sp_get_pagination_lookup_bankname] @SearchTerm, @BranchId, @CompanyId, @PemilikRekening, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_lookup_CGSNoResult>> sp_get_pagination_lookup_CGSNoAsync(string SearchTerm, string BranchId, string CompanyId, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Size = 5,
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Size = 1,
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_lookup_CGSNoResult>("EXEC @returnValue = [dbo].[sp_get_pagination_lookup_CGSNo] @SearchTerm, @BranchId, @CompanyId, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_lookup_dealerResult>> sp_get_pagination_lookup_dealerAsync(string SearchTerm, string item_id, string is_item_new, string branch_id, string item_merk, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "item_id",
                    Size = 3,
                    Value = item_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "is_item_new",
                    Size = 1,
                    Value = is_item_new ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "branch_id",
                    Size = 5,
                    Value = branch_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "item_merk",
                    Size = 10,
                    Value = item_merk ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_lookup_dealerResult>("EXEC @returnValue = [dbo].[sp_get_pagination_lookup_dealer] @SearchTerm, @item_id, @is_item_new, @branch_id, @item_merk, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_lookup_itemResult>> sp_get_pagination_lookup_itemAsync(string SearchTerm, string item_id, string item_brand_id, string asset_kind_class_id, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "item_id",
                    Size = 3,
                    Value = item_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "item_brand_id",
                    Size = 10,
                    Value = item_brand_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "asset_kind_class_id",
                    Size = 10,
                    Value = asset_kind_class_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_lookup_itemResult>("EXEC @returnValue = [dbo].[sp_get_pagination_lookup_item] @SearchTerm, @item_id, @item_brand_id, @asset_kind_class_id, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_lookup_locationResult>> sp_get_pagination_lookup_locationAsync(string SearchTerm, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_lookup_locationResult>("EXEC @returnValue = [dbo].[sp_get_pagination_lookup_location] @SearchTerm, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_lookup_marketingheadResult>> sp_get_pagination_lookup_marketingheadAsync(string SearchTerm, string item_id, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "item_id",
                    Size = 3,
                    Value = item_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_lookup_marketingheadResult>("EXEC @returnValue = [dbo].[sp_get_pagination_lookup_marketinghead] @SearchTerm, @item_id, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_lookup_msbankResult>> sp_get_pagination_lookup_msbankAsync(string SearchTerm, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_lookup_msbankResult>("EXEC @returnValue = [dbo].[sp_get_pagination_lookup_msbank] @SearchTerm, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_lookup_OldNPPResult>> sp_get_pagination_lookup_OldNPPAsync(string SearchTerm, string BranchId, string CompanyId, string ItemMerkTypeID, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Size = 5,
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Size = 5,
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ItemMerkTypeID",
                    Size = 20,
                    Value = ItemMerkTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_lookup_OldNPPResult>("EXEC @returnValue = [dbo].[sp_get_pagination_lookup_OldNPP] @SearchTerm, @BranchId, @CompanyId, @ItemMerkTypeID, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_lookup_perantaraResult>> sp_get_pagination_lookup_perantaraAsync(string SearchTerm, string BranchId, string CompanyId, string TipePerantara, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Size = 5,
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Size = 1,
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipePerantara",
                    Size = 10,
                    Value = TipePerantara ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_lookup_perantaraResult>("EXEC @returnValue = [dbo].[sp_get_pagination_lookup_perantara] @SearchTerm, @BranchId, @CompanyId, @TipePerantara, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_lookup_surveyorResult>> sp_get_pagination_lookup_surveyorAsync(string SearchTerm, string item_id, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "item_id",
                    Size = 3,
                    Value = item_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_lookup_surveyorResult>("EXEC @returnValue = [dbo].[sp_get_pagination_lookup_surveyor] @SearchTerm, @item_id, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_NPPResult>> sp_get_pagination_NPPAsync(string SearchTerm, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_NPPResult>("EXEC @returnValue = [dbo].[sp_get_pagination_NPP] @SearchTerm, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_OMAResult>> sp_get_pagination_OMAAsync(string SearchTerm, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_OMAResult>("EXEC @returnValue = [dbo].[sp_get_pagination_OMA] @SearchTerm, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_paging_approvalschemeResult>> sp_get_paging_approvalschemeAsync(string BranchID, string TransTypeId, string SearchTerm, int? PageIndex, int? PageSize, OutputParameter<int?> TotalPages, OutputParameter<int?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 10,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransTypeId",
                    Size = 10,
                    Value = TransTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageIndex",
                    Value = PageIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_paging_approvalschemeResult>("EXEC @returnValue = [dbo].[sp_get_paging_approvalscheme] @BranchID, @TransTypeId, @SearchTerm, @PageIndex, @PageSize, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pooling_orderResult>> sp_get_pooling_orderAsync(string orderId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "orderId",
                    Size = 50,
                    Value = orderId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pooling_orderResult>("EXEC @returnValue = [dbo].[sp_get_pooling_order] @orderId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_price_awalResult>> sp_get_price_awalAsync(string creditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "creditId",
                    Size = 100,
                    Value = creditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_price_awalResult>("EXEC @returnValue = [dbo].[sp_get_price_awal] @creditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_process_feeResult>> sp_get_process_feeAsync(string Tenor, string OTR, string InsCoverType, string BranchId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Tenor",
                    Size = 10,
                    Value = Tenor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OTR",
                    Size = 50,
                    Value = OTR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InsCoverType",
                    Size = 10,
                    Value = InsCoverType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Size = 5,
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_process_feeResult>("EXEC @returnValue = [dbo].[sp_get_process_fee] @Tenor, @OTR, @InsCoverType, @BranchId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_process_provisi_insResult>> sp_get_process_provisi_insAsync(string BiayaProsesID, string Tenor, string OTR, string InsCoverType, string BranchId, string ItemYear, string credit_id, string modelid, string loss_fee, string loss_fee_kredit, string usage_type_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BiayaProsesID",
                    Size = 20,
                    Value = BiayaProsesID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Tenor",
                    Size = 10,
                    Value = Tenor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OTR",
                    Size = 50,
                    Value = OTR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InsCoverType",
                    Size = 10,
                    Value = InsCoverType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Size = 5,
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ItemYear",
                    Size = 4,
                    Value = ItemYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "credit_id",
                    Size = 14,
                    Value = credit_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "modelid",
                    Size = 20,
                    Value = modelid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "loss_fee",
                    Size = 20,
                    Value = loss_fee ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "loss_fee_kredit",
                    Size = 20,
                    Value = loss_fee_kredit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "usage_type_id",
                    Size = 20,
                    Value = usage_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_process_provisi_insResult>("EXEC @returnValue = [dbo].[sp_get_process_provisi_ins] @BiayaProsesID, @Tenor, @OTR, @InsCoverType, @BranchId, @ItemYear, @credit_id, @modelid, @loss_fee, @loss_fee_kredit, @usage_type_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_professionResult>> sp_get_professionAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_professionResult>("EXEC @returnValue = [dbo].[sp_get_profession]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_relationshipResult>> sp_get_relationshipAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_relationshipResult>("EXEC @returnValue = [dbo].[sp_get_relationship]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_repeat_order_categoryResult>> sp_get_repeat_order_categoryAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_repeat_order_categoryResult>("EXEC @returnValue = [dbo].[sp_get_repeat_order_category]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_repeat_order_decisionResult>> sp_get_repeat_order_decisionAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_repeat_order_decisionResult>("EXEC @returnValue = [dbo].[sp_get_repeat_order_decision]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_repeat_order_reference_sourceResult>> sp_get_repeat_order_reference_sourceAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_repeat_order_reference_sourceResult>("EXEC @returnValue = [dbo].[sp_get_repeat_order_reference_source]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_residence_statusResult>> sp_get_residence_statusAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_residence_statusResult>("EXEC @returnValue = [dbo].[sp_get_residence_status]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_risk_categoryResult>> sp_get_risk_categoryAsync(decimal? Grade, decimal? FIDBranch, decimal? AssetCost, decimal? UangMuka, bool? CustomerBlackList, byte? Tenor, decimal? Installment, decimal? PenghasilanPerBulan, decimal? PenghasilanTambahan, decimal? PenghasilanPasangan, decimal? FIDDealer, int? JarakTempatTinggal, decimal? UangMukaMurni, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Grade",
                    Precision = 18,
                    Scale = 2,
                    Value = Grade ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FIDBranch",
                    Precision = 5,
                    Scale = 2,
                    Value = FIDBranch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AssetCost",
                    Precision = 12,
                    Value = AssetCost ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "UangMuka",
                    Precision = 12,
                    Value = UangMuka ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerBlackList",
                    Value = CustomerBlackList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Tenor",
                    Value = Tenor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "Installment",
                    Precision = 12,
                    Value = Installment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "PenghasilanPerBulan",
                    Precision = 12,
                    Value = PenghasilanPerBulan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "PenghasilanTambahan",
                    Precision = 12,
                    Value = PenghasilanTambahan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "PenghasilanPasangan",
                    Precision = 12,
                    Value = PenghasilanPasangan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FIDDealer",
                    Precision = 5,
                    Scale = 2,
                    Value = FIDDealer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "JarakTempatTinggal",
                    Value = JarakTempatTinggal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UangMukaMurni",
                    Precision = 12,
                    Value = UangMukaMurni ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_risk_categoryResult>("EXEC @returnValue = [dbo].[sp_get_risk_category] @Grade, @FIDBranch, @AssetCost, @UangMuka, @CustomerBlackList, @Tenor, @Installment, @PenghasilanPerBulan, @PenghasilanTambahan, @PenghasilanPasangan, @FIDDealer, @JarakTempatTinggal, @UangMukaMurni", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_search_casResult>> sp_get_search_casAsync(string Value, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Value",
                    Size = -1,
                    Value = Value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_search_casResult>("EXEC @returnValue = [dbo].[sp_get_search_cas] @Value", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_sourceResult>> sp_get_sourceAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_sourceResult>("EXEC @returnValue = [dbo].[sp_get_source]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_storage_locationResult>> sp_get_storage_locationAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_storage_locationResult>("EXEC @returnValue = [dbo].[sp_get_storage_location]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_tipe_perantaraResult>> sp_get_tipe_perantaraAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_tipe_perantaraResult>("EXEC @returnValue = [dbo].[sp_get_tipe_perantara]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_tr_cmResult>> sp_get_tr_cmAsync(string credit_id, string CreatedBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "credit_id",
                    Size = 20,
                    Value = credit_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 20,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_tr_cmResult>("EXEC @returnValue = [dbo].[sp_get_tr_cm] @credit_id, @CreatedBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_tr_cm_carResult>> sp_get_tr_cm_carAsync(string credit_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "credit_id",
                    Size = 20,
                    Value = credit_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_tr_cm_carResult>("EXEC @returnValue = [dbo].[sp_get_tr_cm_car] @credit_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_tr_cm_photo_detailResult>> sp_get_tr_cm_photo_detailAsync(string credit_id, string photo_type_id, string photo_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "credit_id",
                    Size = 20,
                    Value = credit_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "photo_type_id",
                    Size = 10,
                    Value = photo_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "photo_id",
                    Size = 10,
                    Value = photo_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_tr_cm_photo_detailResult>("EXEC @returnValue = [dbo].[sp_get_tr_cm_photo_detail] @credit_id, @photo_type_id, @photo_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_trcas_acheader_numberResult>> sp_get_trcas_acheader_numberAsync(string codeType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codeType",
                    Size = 50,
                    Value = codeType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_trcas_acheader_numberResult>("EXEC @returnValue = [dbo].[sp_get_trcas_acheader_number] @codeType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_insert_analisa_cmo_caResult>> sp_insert_analisa_cmo_caAsync(string CASId, string Capacity, string Capital, string Character, string Condition, string Collateral, string Strenght, string Weakness, string CreatedBy, DateTime? CreatedOn, string LastUpdatedBy, DateTime? LastUpdatedOn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CASId",
                    Size = 10,
                    Value = CASId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Capacity",
                    Size = 255,
                    Value = Capacity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Capital",
                    Size = 255,
                    Value = Capital ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Character",
                    Size = 255,
                    Value = Character ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Condition",
                    Size = 255,
                    Value = Condition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Collateral",
                    Size = 255,
                    Value = Collateral ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Strenght",
                    Size = 255,
                    Value = Strenght ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Weakness",
                    Size = 255,
                    Value = Weakness ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 15,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedOn",
                    Value = CreatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LastUpdatedBy",
                    Size = 15,
                    Value = LastUpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastUpdatedOn",
                    Value = LastUpdatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_insert_analisa_cmo_caResult>("EXEC @returnValue = [dbo].[sp_insert_analisa_cmo_ca] @CASId, @Capacity, @Capital, @Character, @Condition, @Collateral, @Strenght, @Weakness, @CreatedBy, @CreatedOn, @LastUpdatedBy, @LastUpdatedOn", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_insert_bpkb_multiple_dbResult>> sp_insert_bpkb_multiple_dbAsync(string BpkbNo, string BranchId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BpkbNo",
                    Size = 15,
                    Value = BpkbNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Size = 50,
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_insert_bpkb_multiple_dbResult>("EXEC @returnValue = [dbo].[sp_insert_bpkb_multiple_db] @BpkbNo, @BranchId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_insert_casResult>> sp_insert_casAsync(string CreatedBy, DateTime? CreatedOn, string LastUpdatedBy, DateTime? LastUpdatedOn, string CreditId, string OutletCode, string CreditSourceId, string MobileProduct, string OrderId, string CustomerType, bool? IsRepeatOrder, bool? IsInstantApproval, string RepeatOrderReason, string CustomerName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 15,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedOn",
                    Value = CreatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LastUpdatedBy",
                    Size = 15,
                    Value = LastUpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastUpdatedOn",
                    Value = LastUpdatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 14,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OutletCode",
                    Size = 8,
                    Value = OutletCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreditSourceId",
                    Size = 5,
                    Value = CreditSourceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MobileProduct",
                    Size = 5,
                    Value = MobileProduct ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrderId",
                    Size = 200,
                    Value = OrderId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerType",
                    Size = 1,
                    Value = CustomerType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsRepeatOrder",
                    Value = IsRepeatOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IsInstantApproval",
                    Value = IsInstantApproval ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "RepeatOrderReason",
                    Size = 50,
                    Value = RepeatOrderReason ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerName",
                    Size = 50,
                    Value = CustomerName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_insert_casResult>("EXEC @returnValue = [dbo].[sp_insert_cas] @CreatedBy, @CreatedOn, @LastUpdatedBy, @LastUpdatedOn, @CreditId, @OutletCode, @CreditSourceId, @MobileProduct, @OrderId, @CustomerType, @IsRepeatOrder, @IsInstantApproval, @RepeatOrderReason, @CustomerName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_insert_cas_poResult>> sp_insert_cas_poAsync(string CreatedBy, DateTime? CreatedOn, string LastUpdatedBy, DateTime? LastUpdatedOn, string CreditId, string OutletCode, string CreditSourceId, string MobileProduct, string OrderId, string CustomerType, bool? IsRepeatOrder, bool? IsInstantApproval, string RepeatOrderReason, string CustomerName, string KodeCabang, string PoNo, string TipeKonsumen, string ExistingCustomerRO, string NamaNasabah, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 15,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedOn",
                    Value = CreatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LastUpdatedBy",
                    Size = 15,
                    Value = LastUpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastUpdatedOn",
                    Value = LastUpdatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 14,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OutletCode",
                    Size = 8,
                    Value = OutletCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreditSourceId",
                    Size = 5,
                    Value = CreditSourceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MobileProduct",
                    Size = 5,
                    Value = MobileProduct ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrderId",
                    Size = 200,
                    Value = OrderId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerType",
                    Size = 1,
                    Value = CustomerType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsRepeatOrder",
                    Value = IsRepeatOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IsInstantApproval",
                    Value = IsInstantApproval ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "RepeatOrderReason",
                    Size = 50,
                    Value = RepeatOrderReason ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerName",
                    Size = 50,
                    Value = CustomerName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "KodeCabang",
                    Size = 50,
                    Value = KodeCabang ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PoNo",
                    Size = 50,
                    Value = PoNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipeKonsumen",
                    Size = 50,
                    Value = TipeKonsumen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ExistingCustomerRO",
                    Size = 50,
                    Value = ExistingCustomerRO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NamaNasabah",
                    Size = 50,
                    Value = NamaNasabah ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_insert_cas_poResult>("EXEC @returnValue = [dbo].[sp_insert_cas_po] @CreatedBy, @CreatedOn, @LastUpdatedBy, @LastUpdatedOn, @CreditId, @OutletCode, @CreditSourceId, @MobileProduct, @OrderId, @CustomerType, @IsRepeatOrder, @IsInstantApproval, @RepeatOrderReason, @CustomerName, @KodeCabang, @PoNo, @TipeKonsumen, @ExistingCustomerRO, @NamaNasabah", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_insert_cas_with_table_typeResult>> sp_insert_cas_with_table_typeAsync(DataTable CreditAnalystType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditAnalystType",
                    Value = CreditAnalystType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[tr_credit_analyst_type]",
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_insert_cas_with_table_typeResult>("EXEC @returnValue = [dbo].[sp_insert_cas_with_table_type] @CreditAnalystType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_insert_cmResult>> sp_insert_cmAsync(string credit_id, string application_type_id, string product_finance_id, int? is_item_new, string asset_kind_id, string item_brand_id, string item_brand_type_id, string asset_kind_class_id, string year, string product_id, string dealer_code, string surveyor_id, string marketinghead_id, string product_marketing_id, string provenance_PO_id, string CC, string usage_type_id, string account_receiveable, string tipe_cover, string insurance_type_id, string installment_id, string interest_rate_type_id, string tenor, string asset_cost, string gross_down_payment, string admin_fee, string biaya_provisi, string insurance_fee, string uang_muka_murni_kons, string jml_pembiayaan, string amount_installment, double? effective_rate, double? flat_rate, string disc_deposit, string overdue_rate, string CGSCabangNo, string STNK_name_id, string STNK_name_description, string disc_type, string TAC_max, string komper_max, string branch_id, string company_id, string deposit_installment, string is_topup_ms, string old_npp, string skema_id, string perantara_type_id, string agent_id, string agent_name, string ownership_account_type_id, string bank_account_id_umc, string bank_id_umc, string bank_name_umc, string account_no_umc, string account_name_umc, string CreatedBy, DateTime? CreatedOn, string LastUpdatedBy, DateTime? LastUpdatedOn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "credit_id",
                    Size = 20,
                    Value = credit_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "application_type_id",
                    Size = 15,
                    Value = application_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "product_finance_id",
                    Size = 15,
                    Value = product_finance_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "is_item_new",
                    Value = is_item_new ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "asset_kind_id",
                    Size = 3,
                    Value = asset_kind_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "item_brand_id",
                    Size = 10,
                    Value = item_brand_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "item_brand_type_id",
                    Size = 10,
                    Value = item_brand_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "asset_kind_class_id",
                    Size = 10,
                    Value = asset_kind_class_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "year",
                    Size = 4,
                    Value = year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "product_id",
                    Size = 10,
                    Value = product_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dealer_code",
                    Size = 10,
                    Value = dealer_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "surveyor_id",
                    Size = 10,
                    Value = surveyor_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "marketinghead_id",
                    Size = 10,
                    Value = marketinghead_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "product_marketing_id",
                    Size = 15,
                    Value = product_marketing_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "provenance_PO_id",
                    Size = 10,
                    Value = provenance_PO_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CC",
                    Size = 100,
                    Value = CC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "usage_type_id",
                    Size = 10,
                    Value = usage_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "account_receiveable",
                    Size = 1,
                    Value = account_receiveable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "tipe_cover",
                    Size = 10,
                    Value = tipe_cover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "insurance_type_id",
                    Size = 10,
                    Value = insurance_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "installment_id",
                    Size = 10,
                    Value = installment_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "interest_rate_type_id",
                    Size = 10,
                    Value = interest_rate_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "tenor",
                    Size = 20,
                    Value = tenor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "asset_cost",
                    Size = 20,
                    Value = asset_cost ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "gross_down_payment",
                    Size = 20,
                    Value = gross_down_payment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "admin_fee",
                    Size = 20,
                    Value = admin_fee ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "biaya_provisi",
                    Size = 20,
                    Value = biaya_provisi ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "insurance_fee",
                    Size = 20,
                    Value = insurance_fee ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "uang_muka_murni_kons",
                    Size = 20,
                    Value = uang_muka_murni_kons ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "jml_pembiayaan",
                    Size = 20,
                    Value = jml_pembiayaan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "amount_installment",
                    Size = 20,
                    Value = amount_installment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "effective_rate",
                    Value = effective_rate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "flat_rate",
                    Value = flat_rate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "disc_deposit",
                    Size = 20,
                    Value = disc_deposit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "overdue_rate",
                    Size = 20,
                    Value = overdue_rate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CGSCabangNo",
                    Size = 10,
                    Value = CGSCabangNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "STNK_name_id",
                    Size = 10,
                    Value = STNK_name_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "STNK_name_description",
                    Size = 100,
                    Value = STNK_name_description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "disc_type",
                    Size = 1,
                    Value = disc_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TAC_max",
                    Size = 20,
                    Value = TAC_max ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "komper_max",
                    Size = 20,
                    Value = komper_max ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "branch_id",
                    Size = 5,
                    Value = branch_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "company_id",
                    Size = 3,
                    Value = company_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "deposit_installment",
                    Size = 10,
                    Value = deposit_installment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "is_topup_ms",
                    Size = 10,
                    Value = is_topup_ms ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "old_npp",
                    Size = 20,
                    Value = old_npp ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "skema_id",
                    Size = 20,
                    Value = skema_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "perantara_type_id",
                    Size = 20,
                    Value = perantara_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "agent_id",
                    Size = 20,
                    Value = agent_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "agent_name",
                    Size = 100,
                    Value = agent_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ownership_account_type_id",
                    Size = 20,
                    Value = ownership_account_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bank_account_id_umc",
                    Size = 30,
                    Value = bank_account_id_umc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bank_id_umc",
                    Size = 30,
                    Value = bank_id_umc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bank_name_umc",
                    Size = 100,
                    Value = bank_name_umc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "account_no_umc",
                    Size = 30,
                    Value = account_no_umc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "account_name_umc",
                    Size = 100,
                    Value = account_name_umc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 10,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedOn",
                    Value = CreatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LastUpdatedBy",
                    Size = 10,
                    Value = LastUpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastUpdatedOn",
                    Value = LastUpdatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_insert_cmResult>("EXEC @returnValue = [dbo].[sp_insert_cm] @credit_id, @application_type_id, @product_finance_id, @is_item_new, @asset_kind_id, @item_brand_id, @item_brand_type_id, @asset_kind_class_id, @year, @product_id, @dealer_code, @surveyor_id, @marketinghead_id, @product_marketing_id, @provenance_PO_id, @CC, @usage_type_id, @account_receiveable, @tipe_cover, @insurance_type_id, @installment_id, @interest_rate_type_id, @tenor, @asset_cost, @gross_down_payment, @admin_fee, @biaya_provisi, @insurance_fee, @uang_muka_murni_kons, @jml_pembiayaan, @amount_installment, @effective_rate, @flat_rate, @disc_deposit, @overdue_rate, @CGSCabangNo, @STNK_name_id, @STNK_name_description, @disc_type, @TAC_max, @komper_max, @branch_id, @company_id, @deposit_installment, @is_topup_ms, @old_npp, @skema_id, @perantara_type_id, @agent_id, @agent_name, @ownership_account_type_id, @bank_account_id_umc, @bank_id_umc, @bank_name_umc, @account_no_umc, @account_name_umc, @CreatedBy, @CreatedOn, @LastUpdatedBy, @LastUpdatedOn", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_insert_cm_carResult>> sp_insert_cm_carAsync(string credit_id, string application_type_id, string product_finance_id, string is_item_new, string asset_kind_id, string item_brand_id, string item_brand_type_id, string asset_kind_class_id, string year, string product_id, string dealer_code, string surveyor_id, string marketinghead_id, string product_marketing_id, string provenance_PO_id, string CC, string usage_type_id, string account_receiveable, string tipe_cover, string interest_rate_type_id, string tenor, string asset_cost, string gross_down_payment, string admin_fee, string admin_fee_kredit, string biaya_provisi, string biaya_provisi_kredit, string insurance_fee, string uang_muka_murni_kons, string jml_pembiayaan, string amount_installment, string effective_rate, string flat_rate, string disc_deposit, string overdue_rate, string CGSCabangNo, string STNK_name_id, string STNK_name_description, string disc_type, string TAC_max, string komper_max, string is_avalis, string installment_type, string package_id, string biaya_proses_id, string nominal_biaya_proses, string nominal_biaya_proses_kredit, string loss_fee, string loss_fee_kredit, string provisi_ins_fee, string provisi_ins_fee_kredit, string customer_pay_amount, string installment_code, string residual_value, string discount_dealer, string ongkos_BBN, string ongkos_tagih, string SubsidiFinance, string SubsidiDealer, string SubsidiMainDealer, string SubsidiATPM, string SubsidiPihakKetiga, string SubsidiBunga, string mega_insurance_fee, string mega_insurance_fee_kredit, string handphone_fee, string handphone_fee_kredit, string branch_id, string is_life_ins, string company_id, string skema_id, string perantara_type_id, string agent_id, string agent_name, string ownership_account_type_id, string bank_account_id_umc, string bank_id_umc, string bank_name_umc, string account_no_umc, string account_name_umc, string CreatedBy, DateTime? CreatedOn, string LastUpdatedBy, DateTime? LastUpdatedOn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "credit_id",
                    Size = 20,
                    Value = credit_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "application_type_id",
                    Size = 15,
                    Value = application_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "product_finance_id",
                    Size = 15,
                    Value = product_finance_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "is_item_new",
                    Size = 1,
                    Value = is_item_new ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "asset_kind_id",
                    Size = 3,
                    Value = asset_kind_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "item_brand_id",
                    Size = 15,
                    Value = item_brand_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "item_brand_type_id",
                    Size = 15,
                    Value = item_brand_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "asset_kind_class_id",
                    Size = 15,
                    Value = asset_kind_class_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "year",
                    Size = 4,
                    Value = year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "product_id",
                    Size = 10,
                    Value = product_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dealer_code",
                    Size = 10,
                    Value = dealer_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "surveyor_id",
                    Size = 10,
                    Value = surveyor_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "marketinghead_id",
                    Size = 10,
                    Value = marketinghead_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "product_marketing_id",
                    Size = 10,
                    Value = product_marketing_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "provenance_PO_id",
                    Size = 10,
                    Value = provenance_PO_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CC",
                    Size = 100,
                    Value = CC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "usage_type_id",
                    Size = 10,
                    Value = usage_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "account_receiveable",
                    Size = 10,
                    Value = account_receiveable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "tipe_cover",
                    Size = 10,
                    Value = tipe_cover ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "interest_rate_type_id",
                    Size = 10,
                    Value = interest_rate_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "tenor",
                    Size = 20,
                    Value = tenor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "asset_cost",
                    Size = 20,
                    Value = asset_cost ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "gross_down_payment",
                    Size = 20,
                    Value = gross_down_payment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "admin_fee",
                    Size = 20,
                    Value = admin_fee ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "admin_fee_kredit",
                    Size = 20,
                    Value = admin_fee_kredit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "biaya_provisi",
                    Size = 20,
                    Value = biaya_provisi ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "biaya_provisi_kredit",
                    Size = 20,
                    Value = biaya_provisi_kredit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "insurance_fee",
                    Size = 20,
                    Value = insurance_fee ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "uang_muka_murni_kons",
                    Size = 20,
                    Value = uang_muka_murni_kons ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "jml_pembiayaan",
                    Size = 20,
                    Value = jml_pembiayaan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "amount_installment",
                    Size = 20,
                    Value = amount_installment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "effective_rate",
                    Size = 20,
                    Value = effective_rate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "flat_rate",
                    Size = 20,
                    Value = flat_rate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "disc_deposit",
                    Size = 20,
                    Value = disc_deposit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "overdue_rate",
                    Size = 20,
                    Value = overdue_rate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CGSCabangNo",
                    Size = 10,
                    Value = CGSCabangNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "STNK_name_id",
                    Size = 10,
                    Value = STNK_name_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "STNK_name_description",
                    Size = 100,
                    Value = STNK_name_description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "disc_type",
                    Size = 1,
                    Value = disc_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TAC_max",
                    Size = 20,
                    Value = TAC_max ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "komper_max",
                    Size = 20,
                    Value = komper_max ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "is_avalis",
                    Size = 1,
                    Value = is_avalis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "installment_type",
                    Size = 1,
                    Value = installment_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "package_id",
                    Size = 20,
                    Value = package_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "biaya_proses_id",
                    Size = 15,
                    Value = biaya_proses_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nominal_biaya_proses",
                    Size = 20,
                    Value = nominal_biaya_proses ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nominal_biaya_proses_kredit",
                    Size = 20,
                    Value = nominal_biaya_proses_kredit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "loss_fee",
                    Size = 20,
                    Value = loss_fee ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "loss_fee_kredit",
                    Size = 20,
                    Value = loss_fee_kredit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "provisi_ins_fee",
                    Size = 20,
                    Value = provisi_ins_fee ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "provisi_ins_fee_kredit",
                    Size = 20,
                    Value = provisi_ins_fee_kredit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "customer_pay_amount",
                    Size = 20,
                    Value = customer_pay_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "installment_code",
                    Size = 20,
                    Value = installment_code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "residual_value",
                    Size = 20,
                    Value = residual_value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "discount_dealer",
                    Size = 20,
                    Value = discount_dealer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ongkos_BBN",
                    Size = 20,
                    Value = ongkos_BBN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ongkos_tagih",
                    Size = 20,
                    Value = ongkos_tagih ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SubsidiFinance",
                    Size = 20,
                    Value = SubsidiFinance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SubsidiDealer",
                    Size = 20,
                    Value = SubsidiDealer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SubsidiMainDealer",
                    Size = 20,
                    Value = SubsidiMainDealer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SubsidiATPM",
                    Size = 20,
                    Value = SubsidiATPM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SubsidiPihakKetiga",
                    Size = 20,
                    Value = SubsidiPihakKetiga ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SubsidiBunga",
                    Size = 20,
                    Value = SubsidiBunga ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mega_insurance_fee",
                    Size = 20,
                    Value = mega_insurance_fee ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mega_insurance_fee_kredit",
                    Size = 20,
                    Value = mega_insurance_fee_kredit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "handphone_fee",
                    Size = 20,
                    Value = handphone_fee ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "handphone_fee_kredit",
                    Size = 20,
                    Value = handphone_fee_kredit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "branch_id",
                    Size = 5,
                    Value = branch_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "is_life_ins",
                    Size = 1,
                    Value = is_life_ins ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "company_id",
                    Size = 3,
                    Value = company_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "skema_id",
                    Size = 20,
                    Value = skema_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "perantara_type_id",
                    Size = 20,
                    Value = perantara_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "agent_id",
                    Size = 20,
                    Value = agent_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "agent_name",
                    Size = 100,
                    Value = agent_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ownership_account_type_id",
                    Size = 20,
                    Value = ownership_account_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bank_account_id_umc",
                    Size = 30,
                    Value = bank_account_id_umc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bank_id_umc",
                    Size = 30,
                    Value = bank_id_umc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bank_name_umc",
                    Size = 100,
                    Value = bank_name_umc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "account_no_umc",
                    Size = 30,
                    Value = account_no_umc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "account_name_umc",
                    Size = 100,
                    Value = account_name_umc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 15,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedOn",
                    Value = CreatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LastUpdatedBy",
                    Size = 15,
                    Value = LastUpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastUpdatedOn",
                    Value = LastUpdatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_insert_cm_carResult>("EXEC @returnValue = [dbo].[sp_insert_cm_car] @credit_id, @application_type_id, @product_finance_id, @is_item_new, @asset_kind_id, @item_brand_id, @item_brand_type_id, @asset_kind_class_id, @year, @product_id, @dealer_code, @surveyor_id, @marketinghead_id, @product_marketing_id, @provenance_PO_id, @CC, @usage_type_id, @account_receiveable, @tipe_cover, @interest_rate_type_id, @tenor, @asset_cost, @gross_down_payment, @admin_fee, @admin_fee_kredit, @biaya_provisi, @biaya_provisi_kredit, @insurance_fee, @uang_muka_murni_kons, @jml_pembiayaan, @amount_installment, @effective_rate, @flat_rate, @disc_deposit, @overdue_rate, @CGSCabangNo, @STNK_name_id, @STNK_name_description, @disc_type, @TAC_max, @komper_max, @is_avalis, @installment_type, @package_id, @biaya_proses_id, @nominal_biaya_proses, @nominal_biaya_proses_kredit, @loss_fee, @loss_fee_kredit, @provisi_ins_fee, @provisi_ins_fee_kredit, @customer_pay_amount, @installment_code, @residual_value, @discount_dealer, @ongkos_BBN, @ongkos_tagih, @SubsidiFinance, @SubsidiDealer, @SubsidiMainDealer, @SubsidiATPM, @SubsidiPihakKetiga, @SubsidiBunga, @mega_insurance_fee, @mega_insurance_fee_kredit, @handphone_fee, @handphone_fee_kredit, @branch_id, @is_life_ins, @company_id, @skema_id, @perantara_type_id, @agent_id, @agent_name, @ownership_account_type_id, @bank_account_id_umc, @bank_id_umc, @bank_name_umc, @account_no_umc, @account_name_umc, @CreatedBy, @CreatedOn, @LastUpdatedBy, @LastUpdatedOn", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_insert_cm_photo_detailResult>> sp_insert_cm_photo_detailAsync(string credit_id, string photo_type_id, string photo_id, string filename, string filepath, string StatusApproval, string CreatedBy, DateTime? CreatedOn, string LastUpdatedBy, DateTime? LastUpdatedOn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "credit_id",
                    Size = 20,
                    Value = credit_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "photo_type_id",
                    Size = 10,
                    Value = photo_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "photo_id",
                    Size = 10,
                    Value = photo_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "filename",
                    Size = -1,
                    Value = filename ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "filepath",
                    Size = -1,
                    Value = filepath ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StatusApproval",
                    Size = 3,
                    Value = StatusApproval ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 10,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedOn",
                    Value = CreatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LastUpdatedBy",
                    Size = 10,
                    Value = LastUpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastUpdatedOn",
                    Value = LastUpdatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_insert_cm_photo_detailResult>("EXEC @returnValue = [dbo].[sp_insert_cm_photo_detail] @credit_id, @photo_type_id, @photo_id, @filename, @filepath, @StatusApproval, @CreatedBy, @CreatedOn, @LastUpdatedBy, @LastUpdatedOn", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_insert_cmo_analisa_ca_carResult>> sp_insert_cmo_analisa_ca_carAsync(string credit_id, string Capacity, string Capital, string Character, string Condition, string Collateral, string advantage_notes, string deficiency_notes, string StatusApproval, string CreatedBy, string LastUpdatedBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "credit_id",
                    Size = 20,
                    Value = credit_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Capacity",
                    Size = -1,
                    Value = Capacity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Capital",
                    Size = -1,
                    Value = Capital ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Character",
                    Size = -1,
                    Value = Character ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Condition",
                    Size = -1,
                    Value = Condition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Collateral",
                    Size = -1,
                    Value = Collateral ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "advantage_notes",
                    Size = -1,
                    Value = advantage_notes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "deficiency_notes",
                    Size = -1,
                    Value = deficiency_notes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StatusApproval",
                    Size = 5,
                    Value = StatusApproval ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 20,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastUpdatedBy",
                    Size = 20,
                    Value = LastUpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_insert_cmo_analisa_ca_carResult>("EXEC @returnValue = [dbo].[sp_insert_cmo_analisa_ca_car] @credit_id, @Capacity, @Capital, @Character, @Condition, @Collateral, @advantage_notes, @deficiency_notes, @StatusApproval, @CreatedBy, @LastUpdatedBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_insert_credit_typeResult>> sp_insert_credit_typeAsync(string CreatedBy, DateTime? CreatedOn, string LastUpdatedBy, DateTime? LastUpdatedOn, string CreditTypeId, int? IdType, string CreditId, DateTime? ValidThru, DateTime? IssueDate, string IdNo, string IdAddress, int? LocationId, bool? IsActive, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 15,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedOn",
                    Value = CreatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LastUpdatedBy",
                    Size = 15,
                    Value = LastUpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastUpdatedOn",
                    Value = LastUpdatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CreditTypeId",
                    Size = 14,
                    Value = CreditTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdType",
                    Value = IdType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 10,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ValidThru",
                    Value = ValidThru ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IssueDate",
                    Value = IssueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdNo",
                    Size = 45,
                    Value = IdNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdAddress",
                    Size = 255,
                    Value = IdAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsActive",
                    Value = IsActive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_insert_credit_typeResult>("EXEC @returnValue = [dbo].[sp_insert_credit_type] @CreatedBy, @CreatedOn, @LastUpdatedBy, @LastUpdatedOn, @CreditTypeId, @IdType, @CreditId, @ValidThru, @IssueDate, @IdNo, @IdAddress, @LocationId, @IsActive", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_insert_foto_caResult>> sp_insert_foto_caAsync(string CASId, string filename, string filePath, string PhotoTypeID, string PhotoID, string CreatedBy, DateTime? CreatedOn, string LastUpdatedBy, DateTime? LastUpdatedOn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CASId",
                    Size = 10,
                    Value = CASId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "filename",
                    Size = 1000,
                    Value = filename ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "filePath",
                    Size = 255,
                    Value = filePath ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhotoTypeID",
                    Size = 10,
                    Value = PhotoTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhotoID",
                    Size = 10,
                    Value = PhotoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 15,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedOn",
                    Value = CreatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LastUpdatedBy",
                    Size = 15,
                    Value = LastUpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastUpdatedOn",
                    Value = LastUpdatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_insert_foto_caResult>("EXEC @returnValue = [dbo].[sp_insert_foto_ca] @CASId, @filename, @filePath, @PhotoTypeID, @PhotoID, @CreatedBy, @CreatedOn, @LastUpdatedBy, @LastUpdatedOn", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_insert_generate_code_historyResult>> sp_insert_generate_code_historyAsync(string codeType, string employeeId, string branchId, string codeOutput, string status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "codeType",
                    Size = 50,
                    Value = codeType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "employeeId",
                    Size = 50,
                    Value = employeeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "branchId",
                    Size = 50,
                    Value = branchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "codeOutput",
                    Size = 50,
                    Value = codeOutput ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_insert_generate_code_historyResult>("EXEC @returnValue = [dbo].[sp_insert_generate_code_history] @codeType, @employeeId, @branchId, @codeOutput, @status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_insert_log_neo_scoreAsync(string casid, string userid, string method, string menu, string menudetail, string parameter, OutputParameter<string> id, OutputParameter<string> status, OutputParameter<string> result, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterid = new SqlParameter
            {
                ParameterName = "id",
                Size = 15,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterstatus = new SqlParameter
            {
                ParameterName = "status",
                Size = 15,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = status?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterresult = new SqlParameter
            {
                ParameterName = "result",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = result?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "casid",
                    Size = 50,
                    Value = casid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userid",
                    Size = 50,
                    Value = userid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "method",
                    Size = 10,
                    Value = method ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "menu",
                    Size = 20,
                    Value = menu ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "menudetail",
                    Size = 50,
                    Value = menudetail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "parameter",
                    Size = -1,
                    Value = parameter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterid,
                parameterstatus,
                parameterresult,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_insert_log_neo_score] @casid, @userid, @method, @menu, @menudetail, @parameter, @id OUTPUT, @status OUTPUT, @result OUTPUT", sqlParameters, cancellationToken);

            id.SetValue(parameterid.Value);
            status.SetValue(parameterstatus.Value);
            result.SetValue(parameterresult.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_insert_test_multiple_dbResult>> sp_insert_test_multiple_dbAsync(string BpkbNo, string BranchId, string PoNo, string TipeKonsumen, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BpkbNo",
                    Size = 15,
                    Value = BpkbNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Size = 50,
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PoNo",
                    Size = 15,
                    Value = PoNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipeKonsumen",
                    Size = 10,
                    Value = TipeKonsumen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_insert_test_multiple_dbResult>("EXEC @returnValue = [dbo].[sp_insert_test_multiple_db] @BpkbNo, @BranchId, @PoNo, @TipeKonsumen", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_insert_tr_casResult>> sp_insert_tr_casAsync(string CreatedBy, string CreditId, string OutletCode, string CreditSourceId, string OrderId, string CustomerType, bool? IsRepeatOrder, bool? IsInstantApproval, string RepeatOrderReason, string CustomerName, string BirthPlace, DateTime? BirthDate, string Gender, string MotherName, string Email, string IdentityTypeId, string IdentityTypeNumber, DateTime? ValidThru, DateTime? IssueDate, string IdentityAddress, int? IdentityLocationId, bool? IsBlacklist, string CustomerAddress, int? CustomerLocationId, string TaxIdNumber, string TelephoneNumber, string MobilePhone, int? ResidenceDistance, string CustomerSourceId, bool? IsSurveyed, int? SourceId, string SourceName, string SourceAddress, int? EvaluationId, int? ResidenceStatusId, int? OwnershipProofId, string OwnershipProofName, string ResidenceCondition, bool? MaritalStatus, int? MailToSourceId, string MailToAddress, int? MailToLocationId, string MailToTelephoneNumber, int? IsFromPurchaseOrder, int? RiskCategoryId, int? CarRiskCategoryId, int? MobileRiskCategoryId, string OldCreditId, string CreditSourceStatus, string Analysis, string Conclusion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 15,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 14,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OutletCode",
                    Size = 8,
                    Value = OutletCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreditSourceId",
                    Size = 5,
                    Value = CreditSourceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrderId",
                    Size = 200,
                    Value = OrderId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerType",
                    Size = 1,
                    Value = CustomerType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsRepeatOrder",
                    Value = IsRepeatOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IsInstantApproval",
                    Value = IsInstantApproval ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "RepeatOrderReason",
                    Size = 50,
                    Value = RepeatOrderReason ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerName",
                    Size = 50,
                    Value = CustomerName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BirthPlace",
                    Size = 60,
                    Value = BirthPlace ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BirthDate",
                    Value = BirthDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Gender",
                    Size = 2,
                    Value = Gender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MotherName",
                    Size = 50,
                    Value = MotherName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Email",
                    Size = 60,
                    Value = Email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdentityTypeId",
                    Size = 2,
                    Value = IdentityTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdentityTypeNumber",
                    Size = 45,
                    Value = IdentityTypeNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ValidThru",
                    Value = ValidThru ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IssueDate",
                    Value = IssueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdentityAddress",
                    Size = 255,
                    Value = IdentityAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdentityLocationId",
                    Value = IdentityLocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsBlacklist",
                    Value = IsBlacklist ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerAddress",
                    Size = 255,
                    Value = CustomerAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerLocationId",
                    Value = CustomerLocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TaxIdNumber",
                    Size = 15,
                    Value = TaxIdNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TelephoneNumber",
                    Size = 15,
                    Value = TelephoneNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MobilePhone",
                    Size = 20,
                    Value = MobilePhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ResidenceDistance",
                    Value = ResidenceDistance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerSourceId",
                    Size = 5,
                    Value = CustomerSourceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsSurveyed",
                    Value = IsSurveyed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "SourceId",
                    Value = SourceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SourceName",
                    Size = 20,
                    Value = SourceName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SourceAddress",
                    Size = 255,
                    Value = SourceAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EvaluationId",
                    Value = EvaluationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ResidenceStatusId",
                    Value = ResidenceStatusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OwnershipProofId",
                    Value = OwnershipProofId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OwnershipProofName",
                    Size = 50,
                    Value = OwnershipProofName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ResidenceCondition",
                    Size = 255,
                    Value = ResidenceCondition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaritalStatus",
                    Value = MaritalStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "MailToSourceId",
                    Value = MailToSourceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MailToAddress",
                    Size = 255,
                    Value = MailToAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MailToLocationId",
                    Value = MailToLocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MailToTelephoneNumber",
                    Size = 15,
                    Value = MailToTelephoneNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsFromPurchaseOrder",
                    Value = IsFromPurchaseOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RiskCategoryId",
                    Value = RiskCategoryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CarRiskCategoryId",
                    Value = CarRiskCategoryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MobileRiskCategoryId",
                    Value = MobileRiskCategoryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OldCreditId",
                    Size = 15,
                    Value = OldCreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreditSourceStatus",
                    Size = 5,
                    Value = CreditSourceStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Analysis",
                    Size = 255,
                    Value = Analysis ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Conclusion",
                    Size = 1,
                    Value = Conclusion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_insert_tr_casResult>("EXEC @returnValue = [dbo].[sp_insert_tr_cas] @CreatedBy, @CreditId, @OutletCode, @CreditSourceId, @OrderId, @CustomerType, @IsRepeatOrder, @IsInstantApproval, @RepeatOrderReason, @CustomerName, @BirthPlace, @BirthDate, @Gender, @MotherName, @Email, @IdentityTypeId, @IdentityTypeNumber, @ValidThru, @IssueDate, @IdentityAddress, @IdentityLocationId, @IsBlacklist, @CustomerAddress, @CustomerLocationId, @TaxIdNumber, @TelephoneNumber, @MobilePhone, @ResidenceDistance, @CustomerSourceId, @IsSurveyed, @SourceId, @SourceName, @SourceAddress, @EvaluationId, @ResidenceStatusId, @OwnershipProofId, @OwnershipProofName, @ResidenceCondition, @MaritalStatus, @MailToSourceId, @MailToAddress, @MailToLocationId, @MailToTelephoneNumber, @IsFromPurchaseOrder, @RiskCategoryId, @CarRiskCategoryId, @MobileRiskCategoryId, @OldCreditId, @CreditSourceStatus, @Analysis, @Conclusion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_insert_VerifikasiKonsumenResult>> sp_insert_VerifikasiKonsumenAsync(string CMNo, string AgreementNumber, string StatusVerifikasi, bool? OptBisaDiHubungi, string NamaSTNK, string NamaPasanganSTNK, DateTime? TglTerimaTagihan, DateTime? TglKonfirmasi, string JamKonfirmasi, string NamaPenerimaMotor, string HubunganPenerimaMotor, string PermintaanJT, string CatatanLain, bool? OptTglTerimaMotor, DateTime? OptTglTerimaMotorSebenarnya, bool? OptTipeMotor, string OptTipeMotorSebenarnya, bool? OptAngsuran, decimal? OptAngsuranSebenarnya, bool? OptTenor, int? OptTenorSebenarnya, bool? OptDPSetor, decimal? OptDPSetorSebenarnya, string CreatedBy, DateTime? CreatedOn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CMNo",
                    Size = 100,
                    Value = CMNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AgreementNumber",
                    Size = 100,
                    Value = AgreementNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StatusVerifikasi",
                    Size = 1,
                    Value = StatusVerifikasi ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "OptBisaDiHubungi",
                    Value = OptBisaDiHubungi ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "NamaSTNK",
                    Size = 100,
                    Value = NamaSTNK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NamaPasanganSTNK",
                    Size = 100,
                    Value = NamaPasanganSTNK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TglTerimaTagihan",
                    Value = TglTerimaTagihan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TglKonfirmasi",
                    Value = TglKonfirmasi ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "JamKonfirmasi",
                    Size = 1,
                    Value = JamKonfirmasi ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NamaPenerimaMotor",
                    Size = 100,
                    Value = NamaPenerimaMotor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HubunganPenerimaMotor",
                    Size = 100,
                    Value = HubunganPenerimaMotor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PermintaanJT",
                    Size = 100,
                    Value = PermintaanJT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CatatanLain",
                    Size = 300,
                    Value = CatatanLain ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OptTglTerimaMotor",
                    Value = OptTglTerimaMotor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "OptTglTerimaMotorSebenarnya",
                    Value = OptTglTerimaMotorSebenarnya ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "OptTipeMotor",
                    Value = OptTipeMotor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "OptTipeMotorSebenarnya",
                    Size = 50,
                    Value = OptTipeMotorSebenarnya ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OptAngsuran",
                    Value = OptAngsuran ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "OptAngsuranSebenarnya",
                    Precision = 18,
                    Value = OptAngsuranSebenarnya ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "OptTenor",
                    Value = OptTenor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "OptTenorSebenarnya",
                    Value = OptTenorSebenarnya ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OptDPSetor",
                    Value = OptDPSetor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "OptDPSetorSebenarnya",
                    Precision = 18,
                    Value = OptDPSetorSebenarnya ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 100,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedOn",
                    Value = CreatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_insert_VerifikasiKonsumenResult>("EXEC @returnValue = [dbo].[sp_insert_VerifikasiKonsumen] @CMNo, @AgreementNumber, @StatusVerifikasi, @OptBisaDiHubungi, @NamaSTNK, @NamaPasanganSTNK, @TglTerimaTagihan, @TglKonfirmasi, @JamKonfirmasi, @NamaPenerimaMotor, @HubunganPenerimaMotor, @PermintaanJT, @CatatanLain, @OptTglTerimaMotor, @OptTglTerimaMotorSebenarnya, @OptTipeMotor, @OptTipeMotorSebenarnya, @OptAngsuran, @OptAngsuranSebenarnya, @OptTenor, @OptTenorSebenarnya, @OptDPSetor, @OptDPSetorSebenarnya, @CreatedBy, @CreatedOn", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_Name_ValueResult>> sp_Name_ValueAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_Name_ValueResult>("EXEC @returnValue = [dbo].[sp_Name_Value]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_pagination_get_nik_konsumenResult>> sp_pagination_get_nik_konsumenAsync(string employee_name, string branchId, bool? isKonsol, bool? includePos, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "employee_name",
                    Size = 50,
                    Value = employee_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "branchId",
                    Size = 50,
                    Value = branchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isKonsol",
                    Value = isKonsol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "includePos",
                    Value = includePos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_pagination_get_nik_konsumenResult>("EXEC @returnValue = [dbo].[sp_pagination_get_nik_konsumen] @employee_name, @branchId, @isKonsol, @includePos, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_pagination_lookup_orderidResult>> sp_pagination_lookup_orderidAsync(string SearchTerm, string Branchid, string TipeOrder, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Branchid",
                    Size = 5,
                    Value = Branchid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipeOrder",
                    Size = 50,
                    Value = TipeOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_pagination_lookup_orderidResult>("EXEC @returnValue = [dbo].[sp_pagination_lookup_orderid] @SearchTerm, @Branchid, @TipeOrder, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_print_CA_approval_progressResult>> sp_print_CA_approval_progressAsync(string CANo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CANo",
                    Size = 20,
                    Value = CANo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_print_CA_approval_progressResult>("EXEC @returnValue = [dbo].[sp_print_CA_approval_progress] @CANo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_print_CA_CResult>> sp_print_CA_CAsync(string CANo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CANo",
                    Size = 20,
                    Value = CANo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_print_CA_CResult>("EXEC @returnValue = [dbo].[sp_print_CA_C] @CANo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_print_CA_mutasi_rekeningResult>> sp_print_CA_mutasi_rekeningAsync(string CANo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CANo",
                    Size = 20,
                    Value = CANo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_print_CA_mutasi_rekeningResult>("EXEC @returnValue = [dbo].[sp_print_CA_mutasi_rekening] @CANo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_print_CA_PResult>> sp_print_CA_PAsync(string CANo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CANo",
                    Size = 20,
                    Value = CANo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_print_CA_PResult>("EXEC @returnValue = [dbo].[sp_print_CA_P] @CANo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_print_CA_SLIKResult>> sp_print_CA_SLIKAsync(string CANo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CANo",
                    Size = 20,
                    Value = CANo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_print_CA_SLIKResult>("EXEC @returnValue = [dbo].[sp_print_CA_SLIK] @CANo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_print_npp_approval_letterResult>> sp_print_npp_approval_letterAsync(string CreditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 30,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_print_npp_approval_letterResult>("EXEC @returnValue = [dbo].[sp_print_npp_approval_letter] @CreditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_print_npp_consument_statement_letterResult>> sp_print_npp_consument_statement_letterAsync(string CreditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 30,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_print_npp_consument_statement_letterResult>("EXEC @returnValue = [dbo].[sp_print_npp_consument_statement_letter] @CreditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_print_npp_important_noticeResult>> sp_print_npp_important_noticeAsync(string CreditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 30,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_print_npp_important_noticeResult>("EXEC @returnValue = [dbo].[sp_print_npp_important_notice] @CreditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_print_npp_log_insertAsync(string CreditId, bool? IsPrintPK, DateTime? PrintPKDate, string PrintPKBy, bool? IsPrintAkad, DateTime? PrintAkadDate, string PrintAkadBy, bool? IsPrintFiduciary, DateTime? PrintFiduciaryDate, string PrintFiduciaryBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 20,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsPrintPK",
                    Value = IsPrintPK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "PrintPKDate",
                    Value = PrintPKDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PrintPKBy",
                    Size = 15,
                    Value = PrintPKBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsPrintAkad",
                    Value = IsPrintAkad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "PrintAkadDate",
                    Value = PrintAkadDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PrintAkadBy",
                    Size = 15,
                    Value = PrintAkadBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsPrintFiduciary",
                    Value = IsPrintFiduciary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "PrintFiduciaryDate",
                    Value = PrintFiduciaryDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PrintFiduciaryBy",
                    Size = 15,
                    Value = PrintFiduciaryBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_print_npp_log_insert] @CreditId, @IsPrintPK, @PrintPKDate, @PrintPKBy, @IsPrintAkad, @PrintAkadDate, @PrintAkadBy, @IsPrintFiduciary, @PrintFiduciaryDate, @PrintFiduciaryBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_print_npp_memorandum_of_understandingResult>> sp_print_npp_memorandum_of_understandingAsync(string CreditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 30,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_print_npp_memorandum_of_understandingResult>("EXEC @returnValue = [dbo].[sp_print_npp_memorandum_of_understanding] @CreditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_print_npp_name_change_receiptResult>> sp_print_npp_name_change_receiptAsync(string CreditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 30,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_print_npp_name_change_receiptResult>("EXEC @returnValue = [dbo].[sp_print_npp_name_change_receipt] @CreditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_print_npp_name_change_statement_letterResult>> sp_print_npp_name_change_statement_letterAsync(string CreditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 30,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_print_npp_name_change_statement_letterResult>("EXEC @returnValue = [dbo].[sp_print_npp_name_change_statement_letter] @CreditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_print_npp_power_of_attorneyResult>> sp_print_npp_power_of_attorneyAsync(string CreditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 30,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_print_npp_power_of_attorneyResult>("EXEC @returnValue = [dbo].[sp_print_npp_power_of_attorney] @CreditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_print_npp_power_of_attorney_fidusiaResult>> sp_print_npp_power_of_attorney_fidusiaAsync(string CreditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 30,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_print_npp_power_of_attorney_fidusiaResult>("EXEC @returnValue = [dbo].[sp_print_npp_power_of_attorney_fidusia] @CreditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_print_npp_second_statement_letterResult>> sp_print_npp_second_statement_letterAsync(string CreditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 30,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_print_npp_second_statement_letterResult>("EXEC @returnValue = [dbo].[sp_print_npp_second_statement_letter] @CreditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_print_npp_statement_letterResult>> sp_print_npp_statement_letterAsync(string CreditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 30,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_print_npp_statement_letterResult>("EXEC @returnValue = [dbo].[sp_print_npp_statement_letter] @CreditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_print_po_acquisitionResult>> sp_print_po_acquisitionAsync(string poNo, string branchId, string printBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "poNo",
                    Size = 50,
                    Value = poNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "branchId",
                    Size = 10,
                    Value = branchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "printBy",
                    Size = 50,
                    Value = printBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_print_po_acquisitionResult>("EXEC @returnValue = [dbo].[sp_print_po_acquisition] @poNo, @branchId, @printBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_print_po_acquisition_mobilResult>> sp_print_po_acquisition_mobilAsync(string poNo, string branchId, string printBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "poNo",
                    Size = 50,
                    Value = poNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "branchId",
                    Size = 10,
                    Value = branchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "printBy",
                    Size = 50,
                    Value = printBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_print_po_acquisition_mobilResult>("EXEC @returnValue = [dbo].[sp_print_po_acquisition_mobil] @poNo, @branchId, @printBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_print_po_acquisition_motorResult>> sp_print_po_acquisition_motorAsync(string poNo, string branchId, string printBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "poNo",
                    Size = 50,
                    Value = poNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "branchId",
                    Size = 10,
                    Value = branchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "printBy",
                    Size = 50,
                    Value = printBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_print_po_acquisition_motorResult>("EXEC @returnValue = [dbo].[sp_print_po_acquisition_motor] @poNo, @branchId, @printBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_print_vertelResult>> sp_print_vertelAsync(string transId, string employeeId, string sessBranchId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "transId",
                    Size = -1,
                    Value = transId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "employeeId",
                    Size = -1,
                    Value = employeeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sessBranchId",
                    Size = -1,
                    Value = sessBranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_print_vertelResult>("EXEC @returnValue = [dbo].[sp_print_vertel] @transId, @employeeId, @sessBranchId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_print_vertel_dokumen_inResult>> sp_print_vertel_dokumen_inAsync(string transId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "transId",
                    Size = 20,
                    Value = transId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_print_vertel_dokumen_inResult>("EXEC @returnValue = [dbo].[sp_print_vertel_dokumen_in] @transId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_reset_insurance_proportion_R2Async(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_reset_insurance_proportion_R2]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_reset_insurance_proportion_R4Async(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_reset_insurance_proportion_R4]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_rfa_cmResult>> sp_rfa_cmAsync(string credit_id, string StatusApproval, string CreatedBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "credit_id",
                    Size = 20,
                    Value = credit_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StatusApproval",
                    Size = 3,
                    Value = StatusApproval ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 10,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_rfa_cmResult>("EXEC @returnValue = [dbo].[sp_rfa_cm] @credit_id, @StatusApproval, @CreatedBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SP_RFNDO_Check_ByNppResult>> SP_RFNDO_Check_ByNppAsync(string ChassisNo, string NppNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ChassisNo",
                    Size = 50,
                    Value = ChassisNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NppNo",
                    Size = 50,
                    Value = NppNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_RFNDO_Check_ByNppResult>("EXEC @returnValue = [dbo].[SP_RFNDO_Check_ByNpp] @ChassisNo, @NppNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SP_RFNDO_Check_Result_GetResult>> SP_RFNDO_Check_Result_GetAsync(string BPKB_id, string ChassisNo, string EngineNo, string NomorPolisi, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BPKB_id",
                    Size = 10,
                    Value = BPKB_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ChassisNo",
                    Size = 50,
                    Value = ChassisNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EngineNo",
                    Size = 50,
                    Value = EngineNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NomorPolisi",
                    Size = 15,
                    Value = NomorPolisi ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_RFNDO_Check_Result_GetResult>("EXEC @returnValue = [dbo].[SP_RFNDO_Check_Result_Get] @BPKB_id, @ChassisNo, @EngineNo, @NomorPolisi", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SP_RFNDO_GetAssetDetailResult>> SP_RFNDO_GetAssetDetailAsync(string AgreementNumber, string CMNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AgreementNumber",
                    Size = 50,
                    Value = AgreementNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CMNo",
                    Size = 100,
                    Value = CMNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_RFNDO_GetAssetDetailResult>("EXEC @returnValue = [dbo].[SP_RFNDO_GetAssetDetail] @AgreementNumber, @CMNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_send_email_print_POResult>> sp_send_email_print_POAsync(string pivchPOno, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pivchPOno",
                    Size = 25,
                    Value = pivchPOno ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_send_email_print_POResult>("EXEC @returnValue = [dbo].[sp_send_email_print_PO] @pivchPOno", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_template_nameResult>> sp_template_nameAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_template_nameResult>("EXEC @returnValue = [dbo].[sp_template_name]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_trans_open_cmResult>> sp_trans_open_cmAsync(string poNo, string creditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "poNo",
                    Size = 50,
                    Value = poNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "creditId",
                    Size = 50,
                    Value = creditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_trans_open_cmResult>("EXEC @returnValue = [dbo].[sp_trans_open_cm] @poNo, @creditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_update_analisa_cmo_caResult>> sp_update_analisa_cmo_caAsync(string CASId, string Capacity, string Capital, string Character, string Condition, string Collateral, string Strenght, string Weakness, string LastUpdatedBy, DateTime? LastUpdatedOn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CASId",
                    Size = 10,
                    Value = CASId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Capacity",
                    Size = 255,
                    Value = Capacity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Capital",
                    Size = 255,
                    Value = Capital ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Character",
                    Size = 255,
                    Value = Character ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Condition",
                    Size = 255,
                    Value = Condition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Collateral",
                    Size = 255,
                    Value = Collateral ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Strenght",
                    Size = 255,
                    Value = Strenght ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Weakness",
                    Size = 255,
                    Value = Weakness ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastUpdatedBy",
                    Size = 15,
                    Value = LastUpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastUpdatedOn",
                    Value = LastUpdatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_update_analisa_cmo_caResult>("EXEC @returnValue = [dbo].[sp_update_analisa_cmo_ca] @CASId, @Capacity, @Capital, @Character, @Condition, @Collateral, @Strenght, @Weakness, @LastUpdatedBy, @LastUpdatedOn", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_update_bpkbResult>> sp_update_bpkbAsync(string BPKBNo, string BranchId, string AgreementNumber, DateTime? BPKBDateIn, DateTime? BPKBDate, string FakturNo, DateTime? FakturDate, string PoliceNo, string LocationId, string LocationName, string SerialNo, string BPKBStatus, string CreatedBy, DateTime? CreatedOn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BPKBNo",
                    Size = 100,
                    Value = BPKBNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Size = 100,
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AgreementNumber",
                    Size = 100,
                    Value = AgreementNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BPKBDateIn",
                    Value = BPKBDateIn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "BPKBDate",
                    Value = BPKBDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FakturNo",
                    Size = 100,
                    Value = FakturNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FakturDate",
                    Value = FakturDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PoliceNo",
                    Size = 100,
                    Value = PoliceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Size = 100,
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LocationName",
                    Size = 100,
                    Value = LocationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SerialNo",
                    Size = 100,
                    Value = SerialNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BPKBStatus",
                    Size = 100,
                    Value = BPKBStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 100,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedOn",
                    Value = CreatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_update_bpkbResult>("EXEC @returnValue = [dbo].[sp_update_bpkb] @BPKBNo, @BranchId, @AgreementNumber, @BPKBDateIn, @BPKBDate, @FakturNo, @FakturDate, @PoliceNo, @LocationId, @LocationName, @SerialNo, @BPKBStatus, @CreatedBy, @CreatedOn", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_update_casResult>> sp_update_casAsync(string CreatedBy, DateTime? CreatedOn, string LastUpdatedBy, DateTime? LastUpdatedOn, string CreditId, string OutletCode, string CreditSourceId, string MobileProduct, string OrderId, string CustomerType, bool? IsRepeatOrder, bool? IsInstantApproval, string RepeatOrderReason, string CustomerName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 15,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedOn",
                    Value = CreatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LastUpdatedBy",
                    Size = 15,
                    Value = LastUpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastUpdatedOn",
                    Value = LastUpdatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 14,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OutletCode",
                    Size = 8,
                    Value = OutletCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreditSourceId",
                    Size = 5,
                    Value = CreditSourceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MobileProduct",
                    Size = 5,
                    Value = MobileProduct ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrderId",
                    Size = 200,
                    Value = OrderId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerType",
                    Size = 1,
                    Value = CustomerType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsRepeatOrder",
                    Value = IsRepeatOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IsInstantApproval",
                    Value = IsInstantApproval ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "RepeatOrderReason",
                    Size = 50,
                    Value = RepeatOrderReason ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerName",
                    Size = 50,
                    Value = CustomerName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_update_casResult>("EXEC @returnValue = [dbo].[sp_update_cas] @CreatedBy, @CreatedOn, @LastUpdatedBy, @LastUpdatedOn, @CreditId, @OutletCode, @CreditSourceId, @MobileProduct, @OrderId, @CustomerType, @IsRepeatOrder, @IsInstantApproval, @RepeatOrderReason, @CustomerName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_update_credit_typeResult>> sp_update_credit_typeAsync(string CreatedBy, DateTime? CreatedOn, string LastUpdatedBy, DateTime? LastUpdatedOn, string CreditTypeId, int? IdType, string CreditId, DateTime? ValidThru, DateTime? IssueDate, string IdNo, string IdAddress, int? LocationId, bool? IsActive, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 15,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedOn",
                    Value = CreatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LastUpdatedBy",
                    Size = 15,
                    Value = LastUpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastUpdatedOn",
                    Value = LastUpdatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CreditTypeId",
                    Size = 14,
                    Value = CreditTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdType",
                    Value = IdType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 10,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ValidThru",
                    Value = ValidThru ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IssueDate",
                    Value = IssueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdNo",
                    Size = 45,
                    Value = IdNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdAddress",
                    Size = 255,
                    Value = IdAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsActive",
                    Value = IsActive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_update_credit_typeResult>("EXEC @returnValue = [dbo].[sp_update_credit_type] @CreatedBy, @CreatedOn, @LastUpdatedBy, @LastUpdatedOn, @CreditTypeId, @IdType, @CreditId, @ValidThru, @IssueDate, @IdNo, @IdAddress, @LocationId, @IsActive", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_update_foto_caResult>> sp_update_foto_caAsync(string CASId, string filename, string filePath, string PhotoTypeID, string PhotoID, string CreatedBy, DateTime? CreatedOn, string LastUpdatedBy, DateTime? LastUpdatedOn, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CASId",
                    Size = 10,
                    Value = CASId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "filename",
                    Size = 1000,
                    Value = filename ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "filePath",
                    Size = 255,
                    Value = filePath ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhotoTypeID",
                    Size = 10,
                    Value = PhotoTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhotoID",
                    Size = 10,
                    Value = PhotoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 15,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedOn",
                    Value = CreatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LastUpdatedBy",
                    Size = 15,
                    Value = LastUpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastUpdatedOn",
                    Value = LastUpdatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_update_foto_caResult>("EXEC @returnValue = [dbo].[sp_update_foto_ca] @CASId, @filename, @filePath, @PhotoTypeID, @PhotoID, @CreatedBy, @CreatedOn, @LastUpdatedBy, @LastUpdatedOn", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_update_log_neo_scoreAsync(string id, string result, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 15,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "result",
                    Size = -1,
                    Value = result ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_update_log_neo_score] @id, @result", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_update_status_approval_vertelResult>> sp_update_status_approval_vertelAsync(string employeeId, string trans_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "employeeId",
                    Size = 100,
                    Value = employeeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "trans_id",
                    Size = -1,
                    Value = trans_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_update_status_approval_vertelResult>("EXEC @returnValue = [dbo].[sp_update_status_approval_vertel] @employeeId, @trans_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spGetListNewVertelLookUpPagingResult>> spGetListNewVertelLookUpPagingAsync(string SearchTerm, int? PageIndex, int? PageSize, OutputParameter<int?> TotalPages, OutputParameter<int?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageIndex",
                    Value = PageIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spGetListNewVertelLookUpPagingResult>("EXEC @returnValue = [dbo].[spGetListNewVertelLookUpPaging] @SearchTerm, @PageIndex, @PageSize, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spGetListNewVerteltestResult>> spGetListNewVerteltestAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spGetListNewVerteltestResult>("EXEC @returnValue = [dbo].[spGetListNewVerteltest]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spGetListNewVerteltestPagingResult>> spGetListNewVerteltestPagingAsync(string SearchTerm, OutputParameter<int?> PageIndex, OutputParameter<int?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<int?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spGetListNewVerteltestPagingResult>("EXEC @returnValue = [dbo].[spGetListNewVerteltestPaging] @SearchTerm, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spSubledgerBookingResult>> spSubledgerBookingAsync(string CreditId, string UsrCrt, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreditId",
                    Size = 20,
                    Value = CreditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsrCrt",
                    Size = 30,
                    Value = UsrCrt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spSubledgerBookingResult>("EXEC @returnValue = [dbo].[spSubledgerBooking] @CreditId, @UsrCrt", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spSubledgerContractInsertResult>> spSubledgerContractInsertAsync(string pivchTrxID, DateTime? pidtmTrxDate, DateTime? pidtmValueDate, string pivchLesseeNo, string pivchCMNo, string pivchNPPNo, decimal? pinumTrxAmount, string pivchTrxReferenceNo1, string pivchTrxReferenceNo2, string pivchVoucherNo, string pivchTrxSource, string pivchGLAccountNo, string pivchUsrCrt, string pivchBranchId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pivchTrxID",
                    Size = 10,
                    Value = pivchTrxID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pidtmTrxDate",
                    Value = pidtmTrxDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "pidtmValueDate",
                    Value = pidtmValueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "pivchLesseeNo",
                    Size = 10,
                    Value = pivchLesseeNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pivchCMNo",
                    Size = 10,
                    Value = pivchCMNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pivchNPPNo",
                    Size = 10,
                    Value = pivchNPPNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pinumTrxAmount",
                    Precision = 21,
                    Scale = 2,
                    Value = pinumTrxAmount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pivchTrxReferenceNo1",
                    Size = 20,
                    Value = pivchTrxReferenceNo1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pivchTrxReferenceNo2",
                    Size = 20,
                    Value = pivchTrxReferenceNo2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pivchVoucherNo",
                    Size = 20,
                    Value = pivchVoucherNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pivchTrxSource",
                    Size = 10,
                    Value = pivchTrxSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pivchGLAccountNo",
                    Size = 10,
                    Value = pivchGLAccountNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pivchUsrCrt",
                    Size = 15,
                    Value = pivchUsrCrt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pivchBranchId",
                    Size = 3,
                    Value = pivchBranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spSubledgerContractInsertResult>("EXEC @returnValue = [dbo].[spSubledgerContractInsert] @pivchTrxID, @pidtmTrxDate, @pidtmValueDate, @pivchLesseeNo, @pivchCMNo, @pivchNPPNo, @pinumTrxAmount, @pivchTrxReferenceNo1, @pivchTrxReferenceNo2, @pivchVoucherNo, @pivchTrxSource, @pivchGLAccountNo, @pivchUsrCrt, @pivchBranchId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spSubledgerSupplierInsertResult>> spSubledgerSupplierInsertAsync(string pivchTrxID, DateTime? pidtmTrxDate, DateTime? pidtmValueDate, string pivchSupplierID, string pivchAgreementNo, decimal? pinumTrxAmount, string pivchTrxReferenceNo1, string pivchTrxReferenceNo2, string pivchVoucherNo, string pivchTrxSource, string pivchGLAccountNo, string pivchUsrCrt, string pivchBranchId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pivchTrxID",
                    Size = 10,
                    Value = pivchTrxID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pidtmTrxDate",
                    Value = pidtmTrxDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "pidtmValueDate",
                    Value = pidtmValueDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "pivchSupplierID",
                    Size = 20,
                    Value = pivchSupplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pivchAgreementNo",
                    Size = 20,
                    Value = pivchAgreementNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pinumTrxAmount",
                    Precision = 21,
                    Scale = 2,
                    Value = pinumTrxAmount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "pivchTrxReferenceNo1",
                    Size = 20,
                    Value = pivchTrxReferenceNo1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pivchTrxReferenceNo2",
                    Size = 20,
                    Value = pivchTrxReferenceNo2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pivchVoucherNo",
                    Size = 20,
                    Value = pivchVoucherNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pivchTrxSource",
                    Size = 10,
                    Value = pivchTrxSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pivchGLAccountNo",
                    Size = 10,
                    Value = pivchGLAccountNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pivchUsrCrt",
                    Size = 15,
                    Value = pivchUsrCrt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pivchBranchId",
                    Size = 3,
                    Value = pivchBranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spSubledgerSupplierInsertResult>("EXEC @returnValue = [dbo].[spSubledgerSupplierInsert] @pivchTrxID, @pidtmTrxDate, @pidtmValueDate, @pivchSupplierID, @pivchAgreementNo, @pinumTrxAmount, @pivchTrxReferenceNo1, @pivchTrxReferenceNo2, @pivchVoucherNo, @pivchTrxSource, @pivchGLAccountNo, @pivchUsrCrt, @pivchBranchId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
