// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using System;
using System.Data;
using System.Linq;
using FINCORE.LIBRARY.DTO.EntityFramework.Acquisition.AcquisitionModel;

namespace FINCORE.LIBRARY.DTO.EntityFramework.Acquisition.AcquisitionContext
{
    public partial class AcquisitionContext
    {

        [DbFunction("fc_get_sequence_number", "dbo")]
        public static string fc_get_sequence_number(string last_number)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_get_agreement_value", "dbo")]
        public static decimal? fn_get_agreement_value(string credit_id)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_get_total_periode_tenor", "dbo")]
        public static decimal? fn_get_total_periode_tenor(int? Tenor)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_get_trans_type_id", "dbo")]
        public static string fn_get_trans_type_id(string credit_id, int? menu_id)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_GetEffectiveRate", "dbo")]
        public static decimal? fn_GetEffectiveRate(decimal? f_rental_amount, int? f_period, decimal? f_NFA_amount, decimal? f_rv_amount, string f_advance_arrears)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fnEPGenVerifikasiNo", "dbo")]
        public static string fnEPGenVerifikasiNo(string BranchID)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fnEPGetBranchEmployeeeKonsIncPos", "dbo")]
        public IQueryable<fnEPGetBranchEmployeeeKonsIncPosResult> fnEPGetBranchEmployeeeKonsIncPos(string BranchID, bool? isKonsol, bool? IncludePos)
        {
            return FromExpression(() => fnEPGetBranchEmployeeeKonsIncPos(BranchID, isKonsol, IncludePos));
        }

        [DbFunction("fnEPGetFlatRateMenurun", "dbo")]
        public static decimal? fnEPGetFlatRateMenurun(decimal? Pembiayaan, byte? Tenor, decimal? Installment)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fnEPGetFlatRateTetap", "dbo")]
        public static decimal? fnEPGetFlatRateTetap(decimal? Pembiayaan, decimal? Bunga, byte? Tenor)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fnEPGetInsentifMokasDealerAmtV3", "dbo")]
        public static decimal? fnEPGetInsentifMokasDealerAmtV3(string PerantaraID, string CMNo)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fnEPKonversiUppingOTR", "dbo")]
        public IQueryable<fnEPKonversiUppingOTRResult> fnEPKonversiUppingOTR(decimal? JmlPembiayaan, decimal? AssetCost, decimal? InsFee, decimal? UangMuka, decimal? Installment, byte? Tenor, int? AR, string KodeAngsuran, decimal? AdminFee, decimal? PersenNFA, string ItemId, string ItemMerkId, string ItemMerkTypeId, string credit_id, decimal? BiayaProvisi, string TipeAplikasiID, decimal? DiscDeposit, decimal? NilaiBunga)
        {
            return FromExpression(() => fnEPKonversiUppingOTR(JmlPembiayaan, AssetCost, InsFee, UangMuka, Installment, Tenor, AR, KodeAngsuran, AdminFee, PersenNFA, ItemId, ItemMerkId, ItemMerkTypeId, credit_id, BiayaProvisi, TipeAplikasiID, DiscDeposit, NilaiBunga));
        }

        [DbFunction("fnEPSubledgerBalanceCheck", "dbo")]
        public static bool? fnEPSubledgerBalanceCheck(decimal? TrxAmount)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fnGenerateAmortization", "dbo")]
        public IQueryable<fnGenerateAmortizationResult> fnGenerateAmortization(string CreditId, int? StartPeriod, int? Tenor, int? TenorInterval, decimal? PrincipalAmount, decimal? ResidualValue, string InArrearsOrAdvance, decimal? InterestRate, DateTime? ZeroDueDate, string InterestType, int? FloatingInterval, string InstallmentType, string EPUIDayBasis, string RoundingPolicy, int? RoundingPower, DateTime? FirstDueDate)
        {
            return FromExpression(() => fnGenerateAmortization(CreditId, StartPeriod, Tenor, TenorInterval, PrincipalAmount, ResidualValue, InArrearsOrAdvance, InterestRate, ZeroDueDate, InterestType, FloatingInterval, InstallmentType, EPUIDayBasis, RoundingPolicy, RoundingPower, FirstDueDate));
        }

        [DbFunction("fnGetClassType", "dbo")]
        public static string fnGetClassType(string Credit_Id)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fnGetInstallment", "dbo")]
        public static decimal? fnGetInstallment(decimal? f_amount_finance, decimal? f_periodical_interest, int? f_financing_period, decimal? f_rv_amount, string f_advancearrears, string f_RoundingPolicy, int? f_RoundingPower)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fnNumericRound", "dbo")]
        public static decimal? fnNumericRound(decimal? NumberToRound, string RoundingPolicy, int? RoundingPower)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        protected void OnModelCreatingGeneratedFunctions(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<fnEPGetBranchEmployeeeKonsIncPosResult>().HasNoKey();
            modelBuilder.Entity<fnEPKonversiUppingOTRResult>().HasNoKey();
            modelBuilder.Entity<fnGenerateAmortizationResult>().HasNoKey();
        }
    }
}
