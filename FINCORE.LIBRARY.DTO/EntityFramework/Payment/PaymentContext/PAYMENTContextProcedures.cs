// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using FINCORE.LIBRARY.DTO.EntityFramework.Payment.PaymentModel;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace FINCORE.LIBRARY.DTO.EntityFramework.Payment.PaymentContext
{
    public partial class PAYMENTContext
    {
        private IPAYMENTContextProcedures _procedures;

        public virtual IPAYMENTContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new PAYMENTContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IPAYMENTContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<sp_get_pagination_cashier_sessionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_cashier_session_expensesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_cashier_session_verifyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_update_cashier_session_verifyResult>().HasNoKey().ToView(null);
        }
    }

    public partial class PAYMENTContextProcedures : IPAYMENTContextProcedures
    {
        private readonly PAYMENTContext _context;

        public PAYMENTContextProcedures(PAYMENTContext context)
        {
            _context = context;
        }

        public virtual async Task<List<sp_get_pagination_cashier_sessionResult>> sp_get_pagination_cashier_sessionAsync(string BranchId, string SearchTerm, OutputParameter<int?> PageIndex, OutputParameter<int?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Size = 60,
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_cashier_sessionResult>("EXEC @returnValue = [dbo].[sp_get_pagination_cashier_session] @BranchId, @SearchTerm, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_cashier_session_expensesResult>> sp_get_pagination_cashier_session_expensesAsync(string BranchId, string SessionId, string SearchTerm, OutputParameter<int?> PageIndex, OutputParameter<int?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Size = 5,
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SessionId",
                    Size = 16,
                    Value = SessionId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_cashier_session_expensesResult>("EXEC @returnValue = [dbo].[sp_get_pagination_cashier_session_expenses] @BranchId, @SessionId, @SearchTerm, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_cashier_session_verifyResult>> sp_get_pagination_cashier_session_verifyAsync(string BranchId, string SearchTerm, OutputParameter<int?> PageIndex, OutputParameter<int?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Size = 60,
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_cashier_session_verifyResult>("EXEC @returnValue = [dbo].[sp_get_pagination_cashier_session_verify] @BranchId, @SearchTerm, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_update_cashier_session_verifyResult>> sp_update_cashier_session_verifyAsync(string SessionId, string EmployeeId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SessionId",
                    Size = 20,
                    Value = SessionId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeId",
                    Size = 20,
                    Value = EmployeeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_update_cashier_session_verifyResult>("EXEC @returnValue = [dbo].[sp_update_cashier_session_verify] @SessionId, @EmployeeId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
