// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using FINCORE.LIBRARY.DTO.EntityFramework.Payment.PaymentModel;

namespace FINCORE.LIBRARY.DTO.EntityFramework.Payment.PaymentContext
{
    public partial class PAYMENTContext : DbContext
    {
        public PAYMENTContext()
        {
        }

        public PAYMENTContext(DbContextOptions<PAYMENTContext> options)
            : base(options)
        {
        }

        public virtual DbSet<LogError> LogError { get; set; }
        public virtual DbSet<TrCashExpenses> TrCashExpenses { get; set; }
        public virtual DbSet<TrCashierSession> TrCashierSession { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<LogError>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("log_error");

                entity.Property(e => e.ErrorDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("error_date_time");

                entity.Property(e => e.ErrorMessage)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("error_message");

                entity.Property(e => e.ErrorNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("error_number");

                entity.Property(e => e.ErrorProcedure)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("error_procedure");

                entity.Property(e => e.ErrorState)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("error_state");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("user_name");
            });

            modelBuilder.Entity<TrCashExpenses>(entity =>
            {
                entity.HasKey(e => e.CreditId);

                entity.ToTable("tr_cash_expenses");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("credit_id");

                entity.Property(e => e.Amount)
                    .HasColumnType("numeric(13, 0)")
                    .HasColumnName("amount");

                entity.Property(e => e.BranchId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("branch_id");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on");

                entity.Property(e => e.ExpensesDate)
                    .HasColumnType("datetime")
                    .HasColumnName("expenses_date");

                entity.Property(e => e.FlagDepositBank).HasColumnName("flag_deposit_bank");

                entity.Property(e => e.SessionId)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("session_id");

                entity.Property(e => e.SourceTypeId)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("source_type_id");

                entity.Property(e => e.VerifyBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("verify_by");

                entity.Property(e => e.VerifyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("verify_date");
            });

            modelBuilder.Entity<TrCashierSession>(entity =>
            {
                entity.HasKey(e => e.SessionId);

                entity.ToTable("tr_cashier_session");

                entity.Property(e => e.SessionId)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("session_id")
                    .IsFixedLength();

                entity.Property(e => e.BranchId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("branch_id");

                entity.Property(e => e.CashAmount)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("cash_amount");

                entity.Property(e => e.CloseAmount)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("close_amount");

                entity.Property(e => e.CloseBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("close_by");

                entity.Property(e => e.CloseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("close_date");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on");

                entity.Property(e => e.CurrentAmount)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("current_amount");

                entity.Property(e => e.IsDeposit).HasColumnName("is_deposit");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on");

                entity.Property(e => e.OpenDate)
                    .HasColumnType("datetime")
                    .HasColumnName("open_date");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("user_id");

                entity.Property(e => e.VerifyBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("verify_by");

                entity.Property(e => e.VerifyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("verify_date");
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}