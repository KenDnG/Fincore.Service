// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using FINCORE.LIBRARY.DTO.EntityFramwork.Masters.MastersModels;

namespace FINCORE.LIBRARY.DTO.EntityFramework.Masters.MastersContext
{
    public partial class MastersContext : DbContext
    {
        public MastersContext()
        {
        }

        public MastersContext(DbContextOptions<MastersContext> options)
            : base(options)
        {
        }

        public virtual DbSet<LogError> LogError { get; set; }
        public virtual DbSet<MsAcVerification> MsAcVerification { get; set; }
        public virtual DbSet<MsAccountOwner> MsAccountOwner { get; set; }
        public virtual DbSet<MsAccountReceiveable> MsAccountReceiveable { get; set; }
        public virtual DbSet<MsAgent> MsAgent { get; set; }
        public virtual DbSet<MsAgentDocument> MsAgentDocument { get; set; }
        public virtual DbSet<MsAgentDocumentType> MsAgentDocumentType { get; set; }
        public virtual DbSet<MsAgentDummyHns> MsAgentDummyHns { get; set; }
        public virtual DbSet<MsAgentIdentity> MsAgentIdentity { get; set; }
        public virtual DbSet<MsAgentPositionReference> MsAgentPositionReference { get; set; }
        public virtual DbSet<MsAgentType> MsAgentType { get; set; }
        public virtual DbSet<MsApplicationType> MsApplicationType { get; set; }
        public virtual DbSet<MsApprovalLevel> MsApprovalLevel { get; set; }
        public virtual DbSet<MsApprovalMappingBm> MsApprovalMappingBm { get; set; }
        public virtual DbSet<MsApprovalReferenceUnit> MsApprovalReferenceUnit { get; set; }
        public virtual DbSet<MsApprovalScheme> MsApprovalScheme { get; set; }
        public virtual DbSet<MsApprovalUser> MsApprovalUser { get; set; }
        public virtual DbSet<MsApupptList> MsApupptList { get; set; }
        public virtual DbSet<MsApupptProfession> MsApupptProfession { get; set; }
        public virtual DbSet<MsApupptQuestion> MsApupptQuestion { get; set; }
        public virtual DbSet<MsApupptRedZone> MsApupptRedZone { get; set; }
        public virtual DbSet<MsAssetBrand> MsAssetBrand { get; set; }
        public virtual DbSet<MsAssetKind> MsAssetKind { get; set; }
        public virtual DbSet<MsAssetKindClass> MsAssetKindClass { get; set; }
        public virtual DbSet<MsAssetMapping> MsAssetMapping { get; set; }
        public virtual DbSet<MsAssetSeries> MsAssetSeries { get; set; }
        public virtual DbSet<MsAssetType> MsAssetType { get; set; }
        public virtual DbSet<MsBank> MsBank { get; set; }
        public virtual DbSet<MsBankDetail> MsBankDetail { get; set; }
        public virtual DbSet<MsBiayaProsesDesc> MsBiayaProsesDesc { get; set; }
        public virtual DbSet<MsBiayaProsesHdr> MsBiayaProsesHdr { get; set; }
        public virtual DbSet<MsBpkbLocation> MsBpkbLocation { get; set; }
        public virtual DbSet<MsBpkbReason> MsBpkbReason { get; set; }
        public virtual DbSet<MsBpkbReceiver> MsBpkbReceiver { get; set; }
        public virtual DbSet<MsBranchCreditSource> MsBranchCreditSource { get; set; }
        public virtual DbSet<MsBranchMappingOjk> MsBranchMappingOjk { get; set; }
        public virtual DbSet<MsBrandItemType> MsBrandItemType { get; set; }
        public virtual DbSet<MsCasApprovalReason> MsCasApprovalReason { get; set; }
        public virtual DbSet<MsCasRoProgramAmount> MsCasRoProgramAmount { get; set; }
        public virtual DbSet<MsCmCutMaxDisbursement> MsCmCutMaxDisbursement { get; set; }
        public virtual DbSet<MsCmMappingPlafondDisbursement> MsCmMappingPlafondDisbursement { get; set; }
        public virtual DbSet<MsCompany> MsCompany { get; set; }
        public virtual DbSet<MsCompanyBranch> MsCompanyBranch { get; set; }
        public virtual DbSet<MsCreditSource> MsCreditSource { get; set; }
        public virtual DbSet<MsCustomerSource> MsCustomerSource { get; set; }
        public virtual DbSet<MsCustomerType> MsCustomerType { get; set; }
        public virtual DbSet<MsDealer> MsDealer { get; set; }
        public virtual DbSet<MsDealerBankReference> MsDealerBankReference { get; set; }
        public virtual DbSet<MsDealerBranchAccess> MsDealerBranchAccess { get; set; }
        public virtual DbSet<MsDealerJobTitle> MsDealerJobTitle { get; set; }
        public virtual DbSet<MsDealerPersonel> MsDealerPersonel { get; set; }
        public virtual DbSet<MsDealerTax> MsDealerTax { get; set; }
        public virtual DbSet<MsDisbursalTypeUmc> MsDisbursalTypeUmc { get; set; }
        public virtual DbSet<MsDistrict> MsDistrict { get; set; }
        public virtual DbSet<MsEmployeeSync> MsEmployeeSync { get; set; }
        public virtual DbSet<MsEvaluation> MsEvaluation { get; set; }
        public virtual DbSet<MsExcludeInsuranceByBranchR4> MsExcludeInsuranceByBranchR4 { get; set; }
        public virtual DbSet<MsGeneralParameter> MsGeneralParameter { get; set; }
        public virtual DbSet<MsGeneralParameterBackup> MsGeneralParameterBackup { get; set; }
        public virtual DbSet<MsGetFieldDocApplicationIn> MsGetFieldDocApplicationIn { get; set; }
        public virtual DbSet<MsHierarchyTransaction> MsHierarchyTransaction { get; set; }
        public virtual DbSet<MsHouseCondition> MsHouseCondition { get; set; }
        public virtual DbSet<MsIdentityType> MsIdentityType { get; set; }
        public virtual DbSet<MsIncentiveAgentType> MsIncentiveAgentType { get; set; }
        public virtual DbSet<MsIncentiveAgentTypeDetailBranch> MsIncentiveAgentTypeDetailBranch { get; set; }
        public virtual DbSet<MsIncentiveAgentTypeDetailNpp> MsIncentiveAgentTypeDetailNpp { get; set; }
        public virtual DbSet<MsIncentiveAgentTypeHeader> MsIncentiveAgentTypeHeader { get; set; }
        public virtual DbSet<MsIncentiveBy> MsIncentiveBy { get; set; }
        public virtual DbSet<MsIncomeType> MsIncomeType { get; set; }
        public virtual DbSet<MsIndustryType> MsIndustryType { get; set; }
        public virtual DbSet<MsInstallment> MsInstallment { get; set; }
        public virtual DbSet<MsInsuranceByCreditR4> MsInsuranceByCreditR4 { get; set; }
        public virtual DbSet<MsInsuranceByDealerR2> MsInsuranceByDealerR2 { get; set; }
        public virtual DbSet<MsInsuranceByDealerR4> MsInsuranceByDealerR4 { get; set; }
        public virtual DbSet<MsInsuranceCostRateR2Ojk> MsInsuranceCostRateR2Ojk { get; set; }
        public virtual DbSet<MsInsuranceCostRateR4Ojk> MsInsuranceCostRateR4Ojk { get; set; }
        public virtual DbSet<MsInsuranceCostRateR4OjkKpm> MsInsuranceCostRateR4OjkKpm { get; set; }
        public virtual DbSet<MsInsuranceCoverType> MsInsuranceCoverType { get; set; }
        public virtual DbSet<MsInsurancePolicy> MsInsurancePolicy { get; set; }
        public virtual DbSet<MsInsuranceProportionR2> MsInsuranceProportionR2 { get; set; }
        public virtual DbSet<MsInsuranceProportionR2Syariah> MsInsuranceProportionR2Syariah { get; set; }
        public virtual DbSet<MsInsuranceProportionR4> MsInsuranceProportionR4 { get; set; }
        public virtual DbSet<MsInsuranceProportionR4Syariah> MsInsuranceProportionR4Syariah { get; set; }
        public virtual DbSet<MsInsuranceProportionR4UsedCar> MsInsuranceProportionR4UsedCar { get; set; }
        public virtual DbSet<MsInsuranceType> MsInsuranceType { get; set; }
        public virtual DbSet<MsInterestRateType> MsInterestRateType { get; set; }
        public virtual DbSet<MsLocation> MsLocation { get; set; }
        public virtual DbSet<MsMailToSource> MsMailToSource { get; set; }
        public virtual DbSet<MsMapDealerCode> MsMapDealerCode { get; set; }
        public virtual DbSet<MsMarital> MsMarital { get; set; }
        public virtual DbSet<MsModule> MsModule { get; set; }
        public virtual DbSet<MsModuleMenu> MsModuleMenu { get; set; }
        public virtual DbSet<MsMonthlyOtherInstallment> MsMonthlyOtherInstallment { get; set; }
        public virtual DbSet<MsNameValidation> MsNameValidation { get; set; }
        public virtual DbSet<MsNationality> MsNationality { get; set; }
        public virtual DbSet<MsNpwp> MsNpwp { get; set; }
        public virtual DbSet<MsOwnershipProof> MsOwnershipProof { get; set; }
        public virtual DbSet<MsPackageDetail> MsPackageDetail { get; set; }
        public virtual DbSet<MsPackageHeader> MsPackageHeader { get; set; }
        public virtual DbSet<MsPackageHeaderGiias> MsPackageHeaderGiias { get; set; }
        public virtual DbSet<MsPaymentPoint> MsPaymentPoint { get; set; }
        public virtual DbSet<MsPaymentType> MsPaymentType { get; set; }
        public virtual DbSet<MsPhoto> MsPhoto { get; set; }
        public virtual DbSet<MsPhotoType> MsPhotoType { get; set; }
        public virtual DbSet<MsPosition> MsPosition { get; set; }
        public virtual DbSet<MsPositionMenu> MsPositionMenu { get; set; }
        public virtual DbSet<MsPositionMenuSpecial> MsPositionMenuSpecial { get; set; }
        public virtual DbSet<MsPositionType> MsPositionType { get; set; }
        public virtual DbSet<MsProduct> MsProduct { get; set; }
        public virtual DbSet<MsProductFinance> MsProductFinance { get; set; }
        public virtual DbSet<MsProductMarketing> MsProductMarketing { get; set; }
        public virtual DbSet<MsProfession> MsProfession { get; set; }
        public virtual DbSet<MsPromotionLineText> MsPromotionLineText { get; set; }
        public virtual DbSet<MsProvenancePoolingOrder> MsProvenancePoolingOrder { get; set; }
        public virtual DbSet<MsProvince> MsProvince { get; set; }
        public virtual DbSet<MsPtInsurance> MsPtInsurance { get; set; }
        public virtual DbSet<MsReferenceType> MsReferenceType { get; set; }
        public virtual DbSet<MsRegency> MsRegency { get; set; }
        public virtual DbSet<MsRegional> MsRegional { get; set; }
        public virtual DbSet<MsRegionalArea> MsRegionalArea { get; set; }
        public virtual DbSet<MsRelationship> MsRelationship { get; set; }
        public virtual DbSet<MsRepeatOrderApplicantRelation> MsRepeatOrderApplicantRelation { get; set; }
        public virtual DbSet<MsRepeatOrderCategory> MsRepeatOrderCategory { get; set; }
        public virtual DbSet<MsRepeatOrderDecision> MsRepeatOrderDecision { get; set; }
        public virtual DbSet<MsRepeatOrderReason> MsRepeatOrderReason { get; set; }
        public virtual DbSet<MsRepeatOrderReferenceSource> MsRepeatOrderReferenceSource { get; set; }
        public virtual DbSet<MsReposessionMarketPrice> MsReposessionMarketPrice { get; set; }
        public virtual DbSet<MsResidenceStatus> MsResidenceStatus { get; set; }
        public virtual DbSet<MsRisk> MsRisk { get; set; }
        public virtual DbSet<MsRiskCategory> MsRiskCategory { get; set; }
        public virtual DbSet<MsRiskParameter> MsRiskParameter { get; set; }
        public virtual DbSet<MsServiceBureauBranch> MsServiceBureauBranch { get; set; }
        public virtual DbSet<MsServiceBureauHeader> MsServiceBureauHeader { get; set; }
        public virtual DbSet<MsSource> MsSource { get; set; }
        public virtual DbSet<MsStatusCredit> MsStatusCredit { get; set; }
        public virtual DbSet<MsStnkName> MsStnkName { get; set; }
        public virtual DbSet<MsStnkStatus> MsStnkStatus { get; set; }
        public virtual DbSet<MsSubsidyDp> MsSubsidyDp { get; set; }
        public virtual DbSet<MsSupplierMappingOjk> MsSupplierMappingOjk { get; set; }
        public virtual DbSet<MsTransSuperUser> MsTransSuperUser { get; set; }
        public virtual DbSet<MsTransType> MsTransType { get; set; }
        public virtual DbSet<MsTypeOfServiceBureauNecessity> MsTypeOfServiceBureauNecessity { get; set; }
        public virtual DbSet<MsUppingOtr> MsUppingOtr { get; set; }
        public virtual DbSet<MsUsageType> MsUsageType { get; set; }
        public virtual DbSet<MsUserPosition> MsUserPosition { get; set; }
        public virtual DbSet<MsVehicleCc> MsVehicleCc { get; set; }
        public virtual DbSet<MsVehicleColor> MsVehicleColor { get; set; }
        public virtual DbSet<MsVerificationCustomerStatus> MsVerificationCustomerStatus { get; set; }
        public virtual DbSet<MsVillage> MsVillage { get; set; }
        public virtual DbSet<MsYearFrame> MsYearFrame { get; set; }
        public virtual DbSet<TrAgentDocument> TrAgentDocument { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<LogError>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("log_error");

                entity.Property(e => e.ErrorDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("error_date_time");

                entity.Property(e => e.ErrorMessage)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("error_message");

                entity.Property(e => e.ErrorNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("error_number");

                entity.Property(e => e.ErrorProcedure)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("error_procedure");

                entity.Property(e => e.ErrorState)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("error_state");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("user_name");
            });

            modelBuilder.Entity<MsAcVerification>(entity =>
            {
                entity.HasKey(e => e.IdVerification);

                entity.ToTable("ms_AC_verification");

                entity.Property(e => e.IdVerification)
                    .HasColumnName("id_verification")
                    .HasComment("ID verifikasi");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("is_active")
                    .IsFixedLength()
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.VerificationDesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("verification_desc")
                    .HasComment("deskripsi dari verifikasi");
            });

            modelBuilder.Entity<MsAccountOwner>(entity =>
            {
                entity.HasKey(e => e.AccountOwnerId);

                entity.ToTable("ms_account_owner");

                entity.Property(e => e.AccountOwnerId)
                    .ValueGeneratedNever()
                    .HasColumnName("account_owner_id")
                    .HasComment("ID pemilik akun");

                entity.Property(e => e.AccountOwnerDesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("account_owner_desc")
                    .HasComment("deskripsi pemilik akun");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsAccountReceiveable>(entity =>
            {
                entity.HasKey(e => e.ArId)
                    .HasName("PK__ms_accou__003FC9DAF5C629F8");

                entity.ToTable("ms_account_receiveable");

                entity.Property(e => e.ArId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AR_id")
                    .HasComment("ID account receivable");

                entity.Property(e => e.ArNameDescription)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AR_name_description")
                    .HasComment("deskripsi dari account receivable");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsAgent>(entity =>
            {
                entity.HasKey(e => new { e.AgentId, e.BranchId, e.IsActive, e.AgentTypeId, e.Status });

                entity.ToTable("ms_agent");

                entity.Property(e => e.AgentId)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("agent_id");

                entity.Property(e => e.BranchId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("branch_id");

                entity.Property(e => e.IsActive).HasColumnName("is_active");

                entity.Property(e => e.AgentTypeId)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("agent_type_id");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("status")
                    .IsFixedLength();

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("address");

                entity.Property(e => e.AgentIdParent)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("agent_id_parent");

                entity.Property(e => e.AgentName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("agent_name");

                entity.Property(e => e.ApproveBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("approve_by");

                entity.Property(e => e.ApproveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("approve_date");

                entity.Property(e => e.BankId)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("bank_id");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("city");

                entity.Property(e => e.CompanyId)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("company_id");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on");

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("employee_id");

                entity.Property(e => e.EmployeeIdAgentCoordinator)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("employee_id_agent_coordinator");

                entity.Property(e => e.IdentityNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("identity_number");

                entity.Property(e => e.IdentityTypeId).HasColumnName("identity_type_id");

                entity.Property(e => e.IncentiveAgentTypeId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("incentive_agent_type_id");

                entity.Property(e => e.IsFreeTextReference).HasColumnName("is_free_text_reference");

                entity.Property(e => e.IsNpwp).HasColumnName("is_NPWP");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on");

                entity.Property(e => e.MobilePhone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("mobile_phone");

                entity.Property(e => e.NpwpAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NPWP_address");

                entity.Property(e => e.NpwpName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NPWP_name");

                entity.Property(e => e.NpwpNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NPWP_number");

                entity.Property(e => e.NpwpTypeId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NPWP_type_id");

                entity.Property(e => e.Phone)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("phone");

                entity.Property(e => e.PkpCumulative)
                    .HasColumnType("numeric(13, 0)")
                    .HasColumnName("PKP_cumulative");

                entity.Property(e => e.PositionIdAgentReference)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("position_id_agent_reference");

                entity.Property(e => e.ProfessionId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("profession_id");

                entity.Property(e => e.ReferenceName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("reference_name");

                entity.Property(e => e.ReferenceNik)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("reference_NIK");
            });

            modelBuilder.Entity<MsAgentDocument>(entity =>
            {
                entity.HasKey(e => e.DocumentId);

                entity.ToTable("ms_agent_document");

                entity.Property(e => e.DocumentId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("document_id")
                    .HasComment("ID dokumen");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.DocumentFileName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("document_file_name")
                    .HasComment("nama file dokumen");

                entity.Property(e => e.DocumentFilePath)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("document_file_path")
                    .HasComment("path/lokasi file dokumen");

                entity.Property(e => e.DocumentName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("document_name")
                    .HasComment("nama dokumen");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsAgentDocumentType>(entity =>
            {
                entity.HasKey(e => new { e.AgentTypeId, e.DocumentId });

                entity.ToTable("ms_agent_document_type");

                entity.Property(e => e.AgentTypeId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("agent_type_id")
                    .HasComment("ID tipe agen");

                entity.Property(e => e.DocumentId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("document_id")
                    .HasComment("ID dokumen");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.IsMandatory)
                    .HasColumnName("is_mandatory")
                    .HasComment("indikator mandatory atau tidak");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.MaxFileSize)
                    .HasColumnName("max_file_size")
                    .HasComment("ukuran file maksimum");
            });

            modelBuilder.Entity<MsAgentDummyHns>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ms_agent_dummy_hns");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AgentId)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("AgentID");

                entity.Property(e => e.AgentInduk)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AgentIndukId)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.AgentKoor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AgentName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AlamatNpwp)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("AlamatNPWP");

                entity.Property(e => e.ApproveBy)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.ApproveDate).HasColumnType("datetime");

                entity.Property(e => e.BankId)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("BankID");

                entity.Property(e => e.BranchId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("BranchID");

                entity.Property(e => e.City)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DocBukuTabunganName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("doc_buku_tabungan_name");

                entity.Property(e => e.DocBukuTabunganPath)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("doc_buku_tabungan_path");

                entity.Property(e => e.DocFotoBersamaMhKacabName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("doc_foto_bersama_mh_kacab_name");

                entity.Property(e => e.DocFotoBersamaMhKacabPath)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("doc_foto_bersama_mh_kacab_path");

                entity.Property(e => e.DocKtpName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("doc_ktp_name");

                entity.Property(e => e.DocKtpPath)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("doc_ktp_path");

                entity.Property(e => e.DocNpwpName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("doc_npwp_name");

                entity.Property(e => e.DocNpwpPath)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("doc_npwp_path");

                entity.Property(e => e.DocPerjanjianKerjaSamaName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("doc_perjanjian_kerja_sama_name");

                entity.Property(e => e.DocPerjanjianKerjaSamaPath)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("doc_perjanjian_kerja_sama_path");

                entity.Property(e => e.DocSuratRekomendasiKacabName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("doc_surat_rekomendasi_kacab_name");

                entity.Property(e => e.DocSuratRekomendasiKacabPath)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("doc_surat_rekomendasi_kacab_path");

                entity.Property(e => e.DtmCrt).HasColumnType("datetime");

                entity.Property(e => e.DtmUpd).HasColumnType("datetime");

                entity.Property(e => e.Hp)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("HP");

                entity.Property(e => e.IdentitasId).HasColumnName("IdentitasID");

                entity.Property(e => e.InsentifId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("InsentifID");

                entity.Property(e => e.IsFreeText).HasColumnName("isFreeText");

                entity.Property(e => e.IsNpwp).HasColumnName("IsNPWP");

                entity.Property(e => e.NamaNpwp)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NamaNPWP");

                entity.Property(e => e.NamaReferensi)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Nik)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.NikagentInduk)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NIKAgentInduk");

                entity.Property(e => e.NikagentKoor)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NIKAgentKoor");

                entity.Property(e => e.Nikreferensi)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NIKReferensi");

                entity.Property(e => e.NoIdentitas)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NoNpwp)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NoNPWP");

                entity.Property(e => e.Npplama)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("NPPLama");

                entity.Property(e => e.Pekerjaan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneCodeArea)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Pkpkumulatif)
                    .HasColumnType("numeric(21, 2)")
                    .HasColumnName("PKPKumulatif");

                entity.Property(e => e.Pt)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("PT");

                entity.Property(e => e.ReferensiJabatanId)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Rowguid).HasColumnName("ROWGUID");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipeAgent)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipeNpwp)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TipeNPWP");

                entity.Property(e => e.TipePerantara)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.UsrCrt)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.UsrUpd)
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MsAgentIdentity>(entity =>
            {
                entity.HasKey(e => e.IdentityTypeId)
                    .HasName("PK_ms_identitas");

                entity.ToTable("ms_agent_identity");

                entity.Property(e => e.IdentityTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("identity_type_id")
                    .HasComment("ID tipe identitas");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IdentityTypeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("identity_type_name")
                    .HasComment("nama tipe identitas");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasColumnName("is_active")
                    .HasDefaultValueSql("((1))")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsAgentPositionReference>(entity =>
            {
                entity.HasKey(e => e.PositionIdAgentReference)
                    .HasName("PK_ms_agent_position_id");

                entity.ToTable("ms_agent_position_reference");

                entity.Property(e => e.PositionIdAgentReference)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("position_id_agent_reference")
                    .HasComment("ID jabatan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.IsFreeText)
                    .HasColumnName("is_free_text")
                    .HasComment("indikator untuk menentukan free text atau tidak");

                entity.Property(e => e.JabatanidOld)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("jabatanid_old")
                    .HasComment("ID jabatan lama");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.PositionNameAgentReference)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("position_name_agent_reference")
                    .HasComment("nama jabatan");
            });

            modelBuilder.Entity<MsAgentType>(entity =>
            {
                entity.HasKey(e => e.AgentTypeId);

                entity.ToTable("ms_agent_type");

                entity.Property(e => e.AgentTypeId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("agent_type_id")
                    .HasComment("ID tipe agen");

                entity.Property(e => e.AgentTypeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("agent_type_name")
                    .HasComment("nama tipe agen");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.IsRequestCoordinator)
                    .HasColumnName("is_request_coordinator")
                    .HasComment("indikator apakah request atau tidak");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsApplicationType>(entity =>
            {
                entity.HasKey(e => e.ApplicationTypeId)
                    .HasName("PK_ms_Application_Type");

                entity.ToTable("ms_application_type");

                entity.Property(e => e.ApplicationTypeId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("application_type_id")
                    .HasComment("ID tipe aplikasi");

                entity.Property(e => e.ApplicationTypeIdOld)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("application_type_id_old")
                    .HasComment("ID tipe aplikasi lama");

                entity.Property(e => e.ApplicationTypeName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("application_type_name")
                    .HasComment("nama tipe aplikasi");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsApprovalLevel>(entity =>
            {
                entity.HasKey(e => new { e.ApprovalSchemeId, e.ApprovalLevelId });

                entity.ToTable("ms_approval_level");

                entity.Property(e => e.ApprovalSchemeId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("approval_scheme_id")
                    .IsFixedLength()
                    .HasComment("ID skema approval");

                entity.Property(e => e.ApprovalLevelId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("approval_level_id")
                    .IsFixedLength()
                    .HasComment("ID tingkat approval");

                entity.Property(e => e.ApprovalLevelDesc)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("approval_level_desc")
                    .HasComment("deskripsi tingkat approval");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.EscalationDay)
                    .HasColumnName("escalation_day")
                    .HasComment("hari eskalasi");

                entity.Property(e => e.EscalationType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("escalation_type")
                    .IsFixedLength()
                    .HasComment("tipe eskalasi");

                entity.Property(e => e.IsEscalation)
                    .HasColumnName("is_escalation")
                    .HasComment("indikator eskalasi atau tidak");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.Quorum)
                    .HasColumnName("quorum")
                    .HasComment("jumlah anggota minimum");

                entity.HasOne(d => d.ApprovalScheme)
                    .WithMany(p => p.MsApprovalLevel)
                    .HasForeignKey(d => d.ApprovalSchemeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ms_approval_level_ms_approval_scheme");
            });

            modelBuilder.Entity<MsApprovalMappingBm>(entity =>
            {
                entity.HasKey(e => new { e.ApprovalSchemeId, e.ApprovalLevelId, e.Nik, e.BranchId });

                entity.ToTable("ms_approval_mapping_BM");

                entity.Property(e => e.ApprovalSchemeId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("approval_scheme_id")
                    .IsFixedLength()
                    .HasComment("ID skema approval");

                entity.Property(e => e.ApprovalLevelId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("approval_level_id")
                    .IsFixedLength()
                    .HasComment("ID tingkat approval");

                entity.Property(e => e.Nik)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NIK")
                    .HasComment("nomor induk karyawan");

                entity.Property(e => e.BranchId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("branch_id")
                    .HasComment("ID cabang");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.HasOne(d => d.MsApprovalReferenceUnit)
                    .WithMany(p => p.MsApprovalMappingBm)
                    .HasForeignKey(d => new { d.ApprovalSchemeId, d.BranchId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ms_approval_mapping_BM_ms_approval_reference_unit");

                entity.HasOne(d => d.MsApprovalUser)
                    .WithMany(p => p.MsApprovalMappingBm)
                    .HasForeignKey(d => new { d.ApprovalSchemeId, d.ApprovalLevelId, d.Nik })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ms_approval_mapping_BM_ms_approval_user");
            });

            modelBuilder.Entity<MsApprovalReferenceUnit>(entity =>
            {
                entity.HasKey(e => new { e.ApprovalSchemeId, e.ApprovalBranchId });

                entity.ToTable("ms_approval_reference_unit");

                entity.Property(e => e.ApprovalSchemeId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("approval_scheme_id")
                    .IsFixedLength()
                    .HasComment("ID skema approval");

                entity.Property(e => e.ApprovalBranchId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("approval_branch_id")
                    .HasComment("ID approval cabang");

                entity.Property(e => e.CompanyId)
                    .HasColumnName("company_id")
                    .HasComment("ID perusahaan");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.ReffType)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("reff_type")
                    .IsFixedLength()
                    .HasComment("tipe referensi");
            });

            modelBuilder.Entity<MsApprovalScheme>(entity =>
            {
                entity.HasKey(e => e.ApprovalSchemeId);

                entity.ToTable("ms_approval_scheme");

                entity.Property(e => e.ApprovalSchemeId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("approval_scheme_id")
                    .IsFixedLength()
                    .HasComment("ID skema approval");

                entity.Property(e => e.ApprovalSchemeDesc)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("approval_scheme_desc")
                    .HasComment("deskripsi skema approval");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("end_date")
                    .HasComment("tanggal selesai");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("start_date")
                    .HasComment("tanggal mulai");

                entity.Property(e => e.TransTypeId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("trans_type_id")
                    .HasComment("ID tipe transaksi");
            });

            modelBuilder.Entity<MsApprovalUser>(entity =>
            {
                entity.HasKey(e => new { e.ApprovalSchemeId, e.ApprovalLevelId, e.Nik });

                entity.ToTable("ms_approval_user");

                entity.Property(e => e.ApprovalSchemeId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("approval_scheme_id")
                    .IsFixedLength()
                    .HasComment("ID skema approval");

                entity.Property(e => e.ApprovalLevelId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("approval_level_id")
                    .IsFixedLength()
                    .HasComment("ID tingkat approval");

                entity.Property(e => e.Nik)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NIK")
                    .HasComment("nomor induk karyawan");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsMandatory)
                    .HasColumnName("is_mandatory")
                    .HasComment("indikator mandatory atau tidak");

                entity.Property(e => e.JabatanId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("jabatan_id")
                    .HasComment("ID jabatan");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.Nama)
                    .IsRequired()
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasColumnName("nama")
                    .HasComment("nama user/karyawan");

                entity.Property(e => e.NamaJabatan)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("nama_jabatan")
                    .HasComment("nama jabatan");

                entity.Property(e => e.PolicyDesc)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("policy_desc")
                    .HasComment("deskripsi kebijakan/aturan");

                entity.HasOne(d => d.Approval)
                    .WithMany(p => p.MsApprovalUser)
                    .HasForeignKey(d => new { d.ApprovalSchemeId, d.ApprovalLevelId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ms_approval_user_ms_approval_level");
            });

            modelBuilder.Entity<MsApupptList>(entity =>
            {
                entity.ToTable("ms_APUPPT_list");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("ID daftar APUPPT");

                entity.Property(e => e.Address)
                    .IsUnicode(false)
                    .HasColumnName("address")
                    .HasComment("alamat tempat tinggal");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("birth_date")
                    .HasComment("tanggal lahir");

                entity.Property(e => e.CityOfBirth)
                    .IsUnicode(false)
                    .HasColumnName("city_of_birth")
                    .HasComment("kota tempat lahir");

                entity.Property(e => e.CountryOfBirth)
                    .IsUnicode(false)
                    .HasColumnName("country_of_birth")
                    .HasComment("negara tempat lahir");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.DensusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("densus_code")
                    .HasComment("kode densus");

                entity.Property(e => e.KtpNo)
                    .IsUnicode(false)
                    .HasColumnName("KTP_no")
                    .HasComment("nomor identitas");

                entity.Property(e => e.KtpNo1)
                    .IsUnicode(false)
                    .HasColumnName("KTP_no1")
                    .HasComment("nomor identitas alternatif 1");

                entity.Property(e => e.KtpNo2)
                    .IsUnicode(false)
                    .HasColumnName("KTP_no2")
                    .HasComment("nomor identitas alternatif 2");

                entity.Property(e => e.Name)
                    .IsUnicode(false)
                    .HasColumnName("name")
                    .HasComment("nama");

                entity.Property(e => e.Nationality)
                    .IsUnicode(false)
                    .HasColumnName("nationality")
                    .HasComment("kewarganegaraan");

                entity.Property(e => e.Occupation)
                    .IsUnicode(false)
                    .HasColumnName("occupation")
                    .HasComment("pekerjaan");

                entity.Property(e => e.ProvinceOfBirth)
                    .IsUnicode(false)
                    .HasColumnName("province_of_birth")
                    .HasComment("provinsi tempat lahir");
            });

            modelBuilder.Entity<MsApupptProfession>(entity =>
            {
                entity.ToTable("ms_APUPPT_profession");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("ID profesi APUPPT");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.ProfessionId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("profession_id")
                    .HasComment("ID profesi");
            });

            modelBuilder.Entity<MsApupptQuestion>(entity =>
            {
                entity.HasKey(e => e.QuestionId)
                    .HasName("PK_APUPPT_question");

                entity.ToTable("ms_APUPPT_question");

                entity.Property(e => e.QuestionId)
                    .HasColumnName("question_id")
                    .HasComment("ID pertanyaan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.Question)
                    .IsUnicode(false)
                    .HasColumnName("question")
                    .HasComment("pertanyaan APUPPT");
            });

            modelBuilder.Entity<MsApupptRedZone>(entity =>
            {
                entity.ToTable("ms_APUPPT_red_zone");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("ID zona merah APUPPT");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.FlagRegency)
                    .HasColumnName("flag_regency")
                    .HasComment("indikator untuk menandai kabupaten atau tidak");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.ProvinceName)
                    .IsUnicode(false)
                    .HasColumnName("province_name")
                    .HasComment("nama provinsi");

                entity.Property(e => e.RegencyName)
                    .IsUnicode(false)
                    .HasColumnName("regency_name")
                    .HasComment("nama kabupaten");
            });

            modelBuilder.Entity<MsAssetBrand>(entity =>
            {
                entity.HasKey(e => e.AssetBrandId)
                    .HasName("PK__ms_asset__72597742ABD1F4CC");

                entity.ToTable("ms_asset_brand");

                entity.Property(e => e.AssetBrandId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("asset_brand_id")
                    .HasComment("ID merk aset");

                entity.Property(e => e.AssetBrandName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("asset_brand_name")
                    .HasComment("nama merk aset");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsAssetKind>(entity =>
            {
                entity.HasKey(e => e.AssetKindId)
                    .HasName("PK__ms_asset__479CB20496983AAA");

                entity.ToTable("ms_asset_kind");

                entity.Property(e => e.AssetKindId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("asset_kind_id")
                    .HasComment("ID jenis aset");

                entity.Property(e => e.AssetKindDescription)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("asset_kind_description")
                    .HasComment("deskripsi dari jenis aset");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsAssetKindClass>(entity =>
            {
                entity.HasKey(e => new { e.AssetKindId, e.AssetKindClassId })
                    .HasName("PK__ms_asset__EB16F339F72BFEC9");

                entity.ToTable("ms_asset_kind_class");

                entity.Property(e => e.AssetKindId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("asset_kind_id")
                    .HasComment("ID jenis aset");

                entity.Property(e => e.AssetKindClassId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("asset_kind_class_id")
                    .HasComment("ID kelas jenis aset");

                entity.Property(e => e.AssetKindClassName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("asset_kind_class_name")
                    .HasComment("nama kelas jenis aset");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsAssetMapping>(entity =>
            {
                entity.HasKey(e => new { e.AssetTypeId, e.VehicleColorId, e.VehicleCcId, e.AssetMappingId })
                    .HasName("PK__ms_asset__BA3086CCE9E93F12");

                entity.ToTable("ms_asset_mapping");

                entity.Property(e => e.AssetTypeId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("asset_type_id")
                    .HasComment("ID tipe aset");

                entity.Property(e => e.VehicleColorId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("vehicle_color_id")
                    .HasComment("ID warna kendaraan");

                entity.Property(e => e.VehicleCcId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("vehicle_cc_id")
                    .HasComment("ID cc kendaraan");

                entity.Property(e => e.AssetMappingId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("asset_mapping_id")
                    .HasComment("ID pemetaan aset");

                entity.Property(e => e.AssetMappingDescription)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("asset_mapping_description")
                    .HasComment("deskripsi dari pemetaan aset");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsAssetSeries>(entity =>
            {
                entity.HasKey(e => new { e.AssetSeriesId, e.AssetBrandId, e.AssetKindId, e.AssetKindClassId })
                    .HasName("PK__ms_asset__92706318BF9A285A");

                entity.ToTable("ms_asset_series");

                entity.Property(e => e.AssetSeriesId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("asset_series_id")
                    .HasComment("ID seri aset");

                entity.Property(e => e.AssetBrandId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("asset_brand_id")
                    .HasComment("ID merk aset");

                entity.Property(e => e.AssetKindId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("asset_kind_id")
                    .HasComment("ID jenis aset");

                entity.Property(e => e.AssetKindClassId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("asset_kind_class_id")
                    .HasComment("ID kelas jenis aset");

                entity.Property(e => e.AssetSeriesDescription)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("asset_series_description")
                    .HasComment("deskripsi dari seri aset");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsAssetType>(entity =>
            {
                entity.HasKey(e => new { e.AssetKindId, e.AssetTypeId })
                    .HasName("PK__ms_asset__9EC6AC2F29B79941");

                entity.ToTable("ms_asset_type");

                entity.Property(e => e.AssetKindId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("asset_kind_id")
                    .HasComment("ID jenis aset");

                entity.Property(e => e.AssetTypeId)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("asset_type_id")
                    .HasComment("ID tipe aset");

                entity.Property(e => e.AssetBrandId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("asset_brand_id")
                    .HasComment("ID merk aset");

                entity.Property(e => e.AssetKindClassId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("asset_kind_class_id")
                    .HasComment("ID kelas jenis aset");

                entity.Property(e => e.AssetSeriesId)
                    .HasMaxLength(10)
                    .HasColumnName("asset_series_id")
                    .HasComment("ID seri aset");

                entity.Property(e => e.AssetTypeDescription)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("asset_type_description")
                    .HasComment("deskripsi dari tipe aset");

                entity.Property(e => e.Cc)
                    .HasColumnName("CC")
                    .HasComment("CC kendaraan");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.ProductionEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("production_end_date")
                    .HasComment("tanggal akhir produksi");

                entity.Property(e => e.ProductionStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("production_start_date")
                    .HasComment("tanggal mulai produksi");
            });

            modelBuilder.Entity<MsBank>(entity =>
            {
                entity.HasKey(e => e.BankId)
                    .HasName("PK__ms_bank__4076F703343D9155");

                entity.ToTable("ms_bank");

                entity.Property(e => e.BankId)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("bank_id")
                    .HasComment("ID bank");

                entity.Property(e => e.BankAddress)
                    .IsUnicode(false)
                    .HasColumnName("bank_address")
                    .HasComment("alamat bank");

                entity.Property(e => e.BankName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("bank_name")
                    .HasComment("nama bank");

                entity.Property(e => e.BankZipCode)
                    .HasColumnName("bank_zip_code")
                    .HasComment("kode pos bank");

                entity.Property(e => e.CentralBankId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("central_bank_id")
                    .HasComment("ID bank sentral");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("email_address")
                    .HasComment("alamat email");

                entity.Property(e => e.FaxNumber)
                    .HasColumnName("fax_number")
                    .HasComment("nomor fax");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdateBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_update_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdateOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_update_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.PasscodeBiBca)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("passcode_BI_BCA")
                    .HasComment("kode password BI BCA");

                entity.Property(e => e.PhoneNumber)
                    .HasColumnName("phone_number")
                    .HasComment("nomor telepon");
            });

            modelBuilder.Entity<MsBankDetail>(entity =>
            {
                entity.HasKey(e => e.BankId)
                    .HasName("PK__ms_bank___4076F7037F2DF93F");

                entity.ToTable("ms_bank_detail");

                entity.Property(e => e.BankId)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("bank_id")
                    .HasComment("ID bank");

                entity.Property(e => e.Address1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("address_1")
                    .HasComment("alamat bank");

                entity.Property(e => e.BankAccount)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("bank_account")
                    .HasComment("akun bank");

                entity.Property(e => e.BankAccountName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("bank_account_Name")
                    .HasComment("nama akun bank");

                entity.Property(e => e.BankGroupId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("bank_group_id")
                    .HasComment("ID grup bank");

                entity.Property(e => e.BankName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("bank_name")
                    .HasComment("nama bank");

                entity.Property(e => e.BgNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BG_number")
                    .HasComment("nomor grup bank");

                entity.Property(e => e.BranchId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("branch_id")
                    .HasComment("ID cabang");

                entity.Property(e => e.City)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("city")
                    .HasComment("kota");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.Fax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("fax")
                    .HasComment("nomor fax");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.IsDefaultBankItr)
                    .HasColumnName("is_default_bank_ITR")
                    .HasComment("indikator default bank ITR atau tidak");

                entity.Property(e => e.IsDefaultBankRrv)
                    .HasColumnName("is_default_bank_RRV")
                    .HasComment("indikator default bank RRV atau tidak");

                entity.Property(e => e.IsDefaultBranch)
                    .HasColumnName("is_default_branch")
                    .HasComment("indikator bank default cabang atau tidak");

                entity.Property(e => e.IsEksternal)
                    .HasColumnName("is_eksternal")
                    .HasComment("indikator bank eksternal atau tidak");

                entity.Property(e => e.IsOperational)
                    .HasColumnName("is_operational")
                    .HasComment("indikator bank masih beroperasi atau tidak");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.NumberCoa)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("number_COA")
                    .HasComment("nomor COA");

                entity.Property(e => e.Phone)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("phone")
                    .HasComment("nomor telepon");
            });

            modelBuilder.Entity<MsBiayaProsesDesc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ms_biaya_proses_desc");

                entity.Property(e => e.BiayaProsesId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("biaya_proses_id")
                    .HasComment("ID biaya proses");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("description")
                    .HasComment("deskripsi biaya proses");

                entity.Property(e => e.Description2)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("description2")
                    .HasComment("deskripsi 2 biaya proses");

                entity.Property(e => e.Description3)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("description3")
                    .HasComment("deskripsi 3 biaya proses");
            });

            modelBuilder.Entity<MsBiayaProsesHdr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ms_biaya_proses_hdr");

                entity.Property(e => e.AddOns1Nominal)
                    .HasColumnType("numeric(21, 2)")
                    .HasColumnName("AddOns1_Nominal")
                    .HasComment("nominal Add-On");

                entity.Property(e => e.AddOns2Percentage)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("AddOns2_Percentage")
                    .HasComment("persentase Add-On");

                entity.Property(e => e.AllRisk)
                    .HasColumnName("all_risk")
                    .HasComment("jenis all risk (menentukan biaya proses)");

                entity.Property(e => e.BiayaProses)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("biaya_proses")
                    .HasComment("jumlah nominal biaya proses");

                entity.Property(e => e.BiayaProsesId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("biaya_proses_id")
                    .HasComment("ID biaya proses");

                entity.Property(e => e.BiayaProsesSeq)
                    .HasColumnName("biaya_proses_seq")
                    .HasComment("urutan biaya proses");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("end_date")
                    .HasComment("tanggal selesai");

                entity.Property(e => e.InsCoverType)
                    .HasColumnName("ins_cover_type")
                    .HasComment("tipe cover asuransi");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.OtrMax)
                    .HasColumnType("numeric(21, 2)")
                    .HasColumnName("OTR_Max")
                    .HasComment("harga OTR maksimum");

                entity.Property(e => e.OtrMin)
                    .HasColumnType("numeric(21, 2)")
                    .HasColumnName("OTR_Min")
                    .HasComment("harga OTR minimum");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("start_date")
                    .HasComment("tanggal mulai");

                entity.Property(e => e.Tenor)
                    .HasColumnName("tenor")
                    .HasComment("jangka waktu kredit (bulan)");

                entity.Property(e => e.Tlo)
                    .HasColumnName("TLO")
                    .HasComment("jenis TLO (menentukan biaya proses)");
            });

            modelBuilder.Entity<MsBpkbLocation>(entity =>
            {
                entity.HasKey(e => e.LocationCode);

                entity.ToTable("ms_BPKB_location");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("location_code")
                    .HasComment("kode lokasi");

                entity.Property(e => e.BranchId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("branch_id")
                    .HasComment("ID cabang");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.IsMb)
                    .HasColumnName("is_MB")
                    .HasComment("indikator kendaraan bekas atau tidak");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.LocationName)
                    .IsRequired()
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasColumnName("location_name")
                    .HasComment("nama lokasi");
            });

            modelBuilder.Entity<MsBpkbReason>(entity =>
            {
                entity.HasKey(e => e.ReasonId);

                entity.ToTable("ms_BPKB_reason");

                entity.Property(e => e.ReasonId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("reason_id")
                    .HasComment("ID alasan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.ReasonName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("reason_name")
                    .HasComment("deskripsi dari alasan");
            });

            modelBuilder.Entity<MsBpkbReceiver>(entity =>
            {
                entity.HasKey(e => e.ReceiverCode);

                entity.ToTable("ms_BPKB_receiver");

                entity.Property(e => e.ReceiverCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("receiver_code")
                    .HasComment("kode penerima BPKB");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.ReceiverName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("receiver_name")
                    .HasComment("nama penerima BPKB");
            });

            modelBuilder.Entity<MsBranchCreditSource>(entity =>
            {
                entity.HasKey(e => e.BranchCreditSourceId);

                entity.ToTable("ms_branch_credit_source");

                entity.Property(e => e.BranchCreditSourceId)
                    .ValueGeneratedNever()
                    .HasColumnName("branch_credit_source_id")
                    .HasComment("ID sumber CAS cabang");

                entity.Property(e => e.BranchId)
                    .HasColumnName("branch_id")
                    .HasComment("ID cabang");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.CreditSourceId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("credit_source_id")
                    .HasComment("ID sumber CAS");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.IsActivePhoto)
                    .HasColumnName("is_active_photo")
                    .HasComment("indikator foto aktif atau tidak");

                entity.Property(e => e.IsPrintSurveyReport)
                    .HasColumnName("is_print_survey_report")
                    .HasComment("indikator print survey report atau tidak");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsBranchMappingOjk>(entity =>
            {
                entity.HasKey(e => new { e.CompanyId, e.BranchId });

                entity.ToTable("ms_branch_mapping_OJK");

                entity.Property(e => e.CompanyId)
                    .HasColumnName("company_id")
                    .HasComment("ID perusahaan");

                entity.Property(e => e.BranchId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("branch_id")
                    .HasComment("ID cabang");

                entity.Property(e => e.RegionId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("region_id")
                    .HasComment("ID region");
            });

            modelBuilder.Entity<MsBrandItemType>(entity =>
            {
                entity.HasKey(e => e.ItemMerkTypeId)
                    .HasName("PK__ms_brand__F33B737AC74C3831");

                entity.ToTable("ms_brand_item_type");

                entity.Property(e => e.ItemMerkTypeId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("item_merk_type_id")
                    .IsFixedLength()
                    .HasComment("ID tipe merk item");

                entity.Property(e => e.BufferInsentif)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("buffer_insentif")
                    .HasComment("nominal buffer insentif");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.ItemId)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("item_id")
                    .IsFixedLength()
                    .HasComment("ID item");

                entity.Property(e => e.ItemMerkId)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("item_merk_id")
                    .IsFixedLength()
                    .HasComment("ID merk item");

                entity.Property(e => e.ItemMerkTypeIdNew)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("item_merk_type_id_new")
                    .IsFixedLength()
                    .HasComment("ID tipe merk item baru");

                entity.Property(e => e.ItemTypeGroupId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("item_type_group_id")
                    .HasComment("ID grup tipe item");

                entity.Property(e => e.ItemTypeName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("item_type_name")
                    .HasComment("nama tipe item");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.ModelId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("model_id")
                    .IsFixedLength()
                    .HasComment("ID model");

                entity.Property(e => e.PersenInsentif)
                    .HasColumnName("persen_insentif")
                    .HasComment("nominal persen insentif");

                entity.Property(e => e.PriceOtr)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("price_OTR")
                    .HasComment("harga OTR (on the road) atau keseluruhan");

                entity.Property(e => e.ProductionEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("production_end_date")
                    .HasComment("tanggal akhir produksi");

                entity.Property(e => e.ProductionStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("production_start_date")
                    .HasComment("tanggal awal produksi");
            });

            modelBuilder.Entity<MsCasApprovalReason>(entity =>
            {
                entity.HasKey(e => e.ReasonId)
                    .HasName("PK__ms_CAS_a__846BB554A2440FC3");

                entity.ToTable("ms_CAS_approval_reason");

                entity.Property(e => e.ReasonId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("reason_id")
                    .HasComment("ID alasan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.ReasonDescription)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("reason_description")
                    .HasComment("deskripsi dari alasan");

                entity.Property(e => e.Type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("type")
                    .IsFixedLength()
                    .HasComment("tipe");
            });

            modelBuilder.Entity<MsCasRoProgramAmount>(entity =>
            {
                entity.HasKey(e => e.RoCategoryId)
                    .HasName("PK__ms_CAS_R__40740DC7FCD51A44");

                entity.ToTable("ms_CAS_RO_program_amount");

                entity.Property(e => e.RoCategoryId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("RO_category_id")
                    .HasComment("ID kategori repeat order");

                entity.Property(e => e.AmountProgram)
                    .HasColumnType("numeric(25, 0)")
                    .HasColumnName("amount_program")
                    .HasComment("jumlah nominal program");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.ItemId)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("item_id")
                    .HasComment("ID item");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsCmCutMaxDisbursement>(entity =>
            {
                entity.HasKey(e => new { e.StnkStatusId, e.SchemeId, e.AssetKindClassId });

                entity.ToTable("ms_CM_cut_max_disbursement");

                entity.Property(e => e.StnkStatusId)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("STNK_status_id")
                    .HasComment("ID status STNK");

                entity.Property(e => e.SchemeId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("scheme_id")
                    .HasComment("ID skema");

                entity.Property(e => e.AssetKindClassId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("asset_kind_class_id")
                    .HasComment("ID kelas jenis aset");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.Value)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("value")
                    .HasComment("nominal");
            });

            modelBuilder.Entity<MsCmMappingPlafondDisbursement>(entity =>
            {
                entity.HasKey(e => new { e.SchemeId, e.FirstRange, e.LastRange, e.IsEnd, e.Precentage, e.IsRepeatOrder, e.Fid2 })
                    .HasName("PK_ms_mapping_plafond_disbursement");

                entity.ToTable("ms_CM_mapping_plafond_disbursement");

                entity.Property(e => e.SchemeId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("scheme_id")
                    .HasComment("ID skema");

                entity.Property(e => e.FirstRange)
                    .HasColumnName("first_range")
                    .HasComment("rentang awal");

                entity.Property(e => e.LastRange)
                    .HasColumnName("last_range")
                    .HasComment("rentang akhir");

                entity.Property(e => e.IsEnd)
                    .HasColumnName("is_end")
                    .HasComment("indikator sudah selesai atau belum");

                entity.Property(e => e.Precentage)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("precentage")
                    .HasComment("persentase");

                entity.Property(e => e.IsRepeatOrder)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("is_repeat_order")
                    .HasComment("indikator repeat order atau tidak");

                entity.Property(e => e.Fid2)
                    .HasColumnName("FID2")
                    .HasComment("angsuran pertama konsumen (First Installment Default)");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsCompany>(entity =>
            {
                entity.HasKey(e => e.CompanyId);

                entity.ToTable("ms_company");

                entity.Property(e => e.CompanyId)
                    .ValueGeneratedNever()
                    .HasColumnName("company_id")
                    .HasComment("ID perusahaan");

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("company_name")
                    .HasComment("nama perusahaan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsCompanyBranch>(entity =>
            {
                entity.HasKey(e => new { e.CompanyId, e.BranchId });

                entity.ToTable("ms_company_branch");

                entity.Property(e => e.CompanyId)
                    .HasColumnName("company_id")
                    .HasComment("ID perusahaan");

                entity.Property(e => e.BranchId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("branch_id")
                    .HasComment("ID cabang");

                entity.Property(e => e.AreaId)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("area_id")
                    .HasComment("ID wilayah");

                entity.Property(e => e.BranchAddress)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("branch_address")
                    .HasComment("alamat cabang");

                entity.Property(e => e.BranchEmail)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("branch_email")
                    .HasComment("email cabang");

                entity.Property(e => e.BranchName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("branch_name")
                    .HasComment("nama cabang");

                entity.Property(e => e.BranchPartnerId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("branch_partner_id")
                    .HasComment("ID rekan cabang");

                entity.Property(e => e.BranchProvince)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("branch_province")
                    .HasComment("provinsi cabang");

                entity.Property(e => e.ContactPerson)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("contact_person")
                    .HasComment("orang yang dapat dihubungi");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.IsHeadOffice)
                    .HasColumnName("is_head_office")
                    .HasComment("indikator apakah head office atau tidak");

                entity.Property(e => e.IsKonsol)
                    .HasColumnName("is_konsol")
                    .HasComment("indikator apakah konsolidasi cabang atau tidak");

                entity.Property(e => e.KonsolBranchId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("konsol_branch_id")
                    .HasComment("ID konsol cabang");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.ParentBranchId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("parent_branch_id")
                    .HasComment("ID induk cabang");

                entity.Property(e => e.Phone)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("phone")
                    .HasComment("nomor telepon cabang");
            });

            modelBuilder.Entity<MsCreditSource>(entity =>
            {
                entity.HasKey(e => e.CreditSourceId);

                entity.ToTable("ms_credit_source");

                entity.Property(e => e.CreditSourceId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("credit_source_id")
                    .HasComment("ID sumber CAS");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.CreditSourceDesc)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("credit_source_desc")
                    .HasComment("deskripsi dari sumber CAS");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsCustomerSource>(entity =>
            {
                entity.HasKey(e => e.CustomerSourceId);

                entity.ToTable("ms_customer_source");

                entity.Property(e => e.CustomerSourceId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("customer_source_id")
                    .HasComment("ID asal konsumen");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.CustomerSourceDesc)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("customer_source_desc")
                    .HasComment("deskripsi dari asal konsumen");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsCustomerType>(entity =>
            {
                entity.HasKey(e => e.CustomerType);

                entity.ToTable("ms_customer_type");

                entity.Property(e => e.CustomerType)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("customer_type")
                    .HasComment("kode tipe konsumen");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.CustomerTypeDescription)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("customer_type_description")
                    .HasComment("deskripsi dari tipe konsumen");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsDealer>(entity =>
            {
                entity.HasKey(e => e.DealerCode);

                entity.ToTable("ms_dealer");

                entity.Property(e => e.DealerCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dealer_code")
                    .HasComment("kode dealer");

                entity.Property(e => e.ActivationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("activation_date")
                    .HasComment("tanggal aktivasi");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("address")
                    .HasComment("alamat");

                entity.Property(e => e.AssetBrandId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("asset_brand_id")
                    .HasComment("ID merek asset");

                entity.Property(e => e.ContactPerson)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("contact_person")
                    .HasComment("orang yang dapat dihubungi");

                entity.Property(e => e.ContactPersonJobTitle)
                    .HasColumnName("contact_person_job_title")
                    .HasComment("jabatan orang yang dapat dihubungi");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.DeactivationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("deactivation_date")
                    .HasComment("tanggal deaktivasi");

                entity.Property(e => e.DealerGroupId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dealer_group_id")
                    .HasComment("id grup dealer");

                entity.Property(e => e.DealerName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("dealer_name")
                    .HasComment("nama dealer");

                entity.Property(e => e.DealerParent)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dealer_parent")
                    .HasComment("induk dealer");

                entity.Property(e => e.Email)
                    .IsUnicode(false)
                    .HasColumnName("email")
                    .HasComment("email");

                entity.Property(e => e.Fax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("fax")
                    .HasComment("nomor fax");

                entity.Property(e => e.IsAuthorizedDealer)
                    .HasColumnName("is_authorized_dealer")
                    .HasComment("indikator dealer resmi atau tidak");

                entity.Property(e => e.IsBankCharges)
                    .HasColumnName("is_bank_charges")
                    .HasComment("indikator ada biaya bank atau tidak");

                entity.Property(e => e.IsPaymentBeforeDue)
                    .HasColumnName("is_payment_before_due")
                    .HasComment("indikator apakah pembayaran sebelum jatuh tempo atau tidak");

                entity.Property(e => e.IsPrepayment)
                    .HasColumnName("is_prepayment")
                    .HasComment("indikator pembayaran di muka atau tidak");

                entity.Property(e => e.IsSellingNewProductOnly)
                    .HasColumnName("is_selling_new_product_only")
                    .HasComment("indikator dealer hanya menjual produk baru atau tidak");

                entity.Property(e => e.IsSync)
                    .HasColumnName("is_sync")
                    .HasComment("indikator sinkron atau tidak");

                entity.Property(e => e.IsUsedCar)
                    .HasColumnName("is_used_car")
                    .HasComment("indikator mobil bekas atau tidak");

                entity.Property(e => e.ItemMerk)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("item_merk")
                    .HasComment("merek item");

                entity.Property(e => e.KtpAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("KTP_address")
                    .HasComment("alamat sesuai KTP");

                entity.Property(e => e.KtpName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("KTP_name")
                    .HasComment("nama sesuai KTP");

                entity.Property(e => e.KtpNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KTP_no")
                    .HasComment("nomor KTP");

                entity.Property(e => e.KtpOwnerFile)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("KTP_owner_file")
                    .HasComment("file KTP");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.LocationId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("location_id")
                    .HasComment("ID lokasi");

                entity.Property(e => e.MainDealerId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("main_dealer_id")
                    .HasComment("id dealer utama");

                entity.Property(e => e.MobilePhoneNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("mobile_phone_number")
                    .HasComment("nomor handphone");

                entity.Property(e => e.MouDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOU_date")
                    .HasComment("tanggal nota kesepakatan");

                entity.Property(e => e.MouNo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MOU_no")
                    .HasComment("nomor nota kesepakatan");

                entity.Property(e => e.MpMasterDealerFile)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MP_master_dealer_file")
                    .HasComment("file MP master dealer");

                entity.Property(e => e.Notes)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("notes")
                    .HasComment("catatan");

                entity.Property(e => e.NpwpAddress)
                    .IsUnicode(false)
                    .HasColumnName("NPWP_address")
                    .HasComment("alamat sesuai NPWP");

                entity.Property(e => e.NpwpFile)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NPWP_file")
                    .HasComment("file NPWP");

                entity.Property(e => e.NpwpName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NPWP_name")
                    .HasComment("nama sesuai NPWP");

                entity.Property(e => e.NpwpNo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NPWP_no")
                    .HasComment("nomor NPWP");

                entity.Property(e => e.NpwpType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPWP_type")
                    .HasComment("tipe NPWP");

                entity.Property(e => e.OwnerName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("owner_name")
                    .HasComment("nama pemilik");

                entity.Property(e => e.PkpCumulative)
                    .HasColumnType("numeric(21, 2)")
                    .HasColumnName("PKP_cumulative")
                    .HasComment("PKP kumulatif");

                entity.Property(e => e.Prepayment)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("prepayment")
                    .HasComment("pembayaran di muka");

                entity.Property(e => e.ProductAssetKindId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("product_asset_kind_id")
                    .HasComment("id jenis produk aset");

                entity.Property(e => e.RateRefund)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("rate_refund")
                    .HasComment("tingkat pengembalian dana");

                entity.Property(e => e.SiupFile)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SIUP_file")
                    .HasComment("file SIUP");

                entity.Property(e => e.SptAccountBookFile)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SPT_account_book_file")
                    .HasComment("file buku akun SPT");

                entity.Property(e => e.StatusDealer)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("status_dealer")
                    .HasComment("status dari dealer");

                entity.Property(e => e.StatusRateRefund)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("status_rate_refund")
                    .HasComment("status dari tingkat pengembalian dana");

                entity.Property(e => e.TdpNibFile)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TDP_NIB_file")
                    .HasComment("file TDP NIB");

                entity.Property(e => e.TelephoneNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("telephone_number")
                    .HasComment("nomor telepon");
            });

            modelBuilder.Entity<MsDealerBankReference>(entity =>
            {
                entity.HasKey(e => new { e.DealerCode, e.BankReferenceId });

                entity.ToTable("ms_dealer_bank_reference");

                entity.Property(e => e.DealerCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("dealer_code")
                    .HasComment("kode dealer");

                entity.Property(e => e.BankReferenceId)
                    .HasColumnName("bank_reference_id")
                    .HasComment("ID referensi bank");

                entity.Property(e => e.ActivationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("activation_date")
                    .HasComment("tanggal aktivasi");

                entity.Property(e => e.BankAccountDescription)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("bank_account_description")
                    .HasComment("deskripsi dari akun bank");

                entity.Property(e => e.BankAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("bank_account_name")
                    .HasComment("nama pemilik akun bank");

                entity.Property(e => e.BankAccountNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("bank_account_no")
                    .HasComment("nomor akun bank");

                entity.Property(e => e.BankAccountType)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("bank_account_type")
                    .HasComment("tipe akun bank");

                entity.Property(e => e.BankId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("bank_id")
                    .HasComment("ID bank");

                entity.Property(e => e.BankReferenceStatus)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("bank_reference_status")
                    .HasComment("status referensi bank");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.DeactivationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("deactivation_date")
                    .HasComment("tanggal deaktivasi");

                entity.Property(e => e.IsBankCharges)
                    .HasColumnName("is_bank_charges")
                    .HasComment("indikator ada biaya bank atau tidak");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsDealerBranchAccess>(entity =>
            {
                entity.HasKey(e => new { e.DealerCode, e.BranchId, e.CompanyId });

                entity.ToTable("ms_dealer_branch_access");

                entity.Property(e => e.DealerCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dealer_code");

                entity.Property(e => e.BranchId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("branch_id");

                entity.Property(e => e.CompanyId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("company_id");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on");

                entity.Property(e => e.IsActive).HasColumnName("is_active");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on");
            });

            modelBuilder.Entity<MsDealerJobTitle>(entity =>
            {
                entity.HasKey(e => e.JobTitleId);

                entity.ToTable("ms_dealer_job_title");

                entity.Property(e => e.JobTitleId)
                    .HasColumnName("job_title_id")
                    .HasComment("ID jabatan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.DealerPaymentCode)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("dealer_payment_code")
                    .HasComment("kode pembayaran dealer");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.JobTitleDescription)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("job_title_description")
                    .HasComment("deskripsi dari jabatan");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsDealerPersonel>(entity =>
            {
                entity.HasKey(e => new { e.DealerCode, e.PersonelId });

                entity.ToTable("ms_dealer_personel");

                entity.Property(e => e.DealerCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dealer_code");

                entity.Property(e => e.PersonelId).HasColumnName("personel_id");

                entity.Property(e => e.ActivationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("activation_date");

                entity.Property(e => e.Adddress)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("adddress");

                entity.Property(e => e.BankRefId).HasColumnName("bank_ref_id");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("birth_date");

                entity.Property(e => e.BirthPlace)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("birth_place");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on");

                entity.Property(e => e.DeactivationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("deactivation_date");

                entity.Property(e => e.Email)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.FaxNumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("fax_number");

                entity.Property(e => e.HandphoneNumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("handphone_number");

                entity.Property(e => e.IsNpwp).HasColumnName("is_NPWP");

                entity.Property(e => e.JobTitleId).HasColumnName("job_title_id");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on");

                entity.Property(e => e.LocationId).HasColumnName("location_id");

                entity.Property(e => e.Npwp)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NPWP");

                entity.Property(e => e.NpwpAddress)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("NPWP_address");

                entity.Property(e => e.NpwpName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPWP_name");

                entity.Property(e => e.NpwpType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NPWP_type");

                entity.Property(e => e.PersonelName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("personel_name");

                entity.Property(e => e.PersonnelStatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("personnel_status")
                    .IsFixedLength();

                entity.Property(e => e.PkpKumulatif)
                    .HasColumnType("numeric(13, 2)")
                    .HasColumnName("PKP_kumulatif");

                entity.Property(e => e.RateRefundPersonal)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("rate_refund_personal");

                entity.Property(e => e.TelephoneNumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("telephone_number");
            });

            modelBuilder.Entity<MsDealerTax>(entity =>
            {
                entity.HasKey(e => e.DealerCode);

                entity.ToTable("ms_dealer_tax");

                entity.Property(e => e.DealerCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dealer_code")
                    .HasComment("kode dealer");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.DealerName)
                    .IsRequired()
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("dealer_name")
                    .HasComment("nama dealer");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.PphType)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("PPh_type")
                    .HasComment("tipe pajak PPh");

                entity.Property(e => e.PpnType)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("PPN_type")
                    .HasComment("tipe pajak PPN");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("start_date")
                    .HasComment("tanggal mulai");
            });

            modelBuilder.Entity<MsDisbursalTypeUmc>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.DisbursalTypeUmc, e.BranchId });

                entity.ToTable("ms_disbursal_type_UMC");

                entity.Property(e => e.Id)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("id")
                    .HasComment("ID tipe pencairan UMC");

                entity.Property(e => e.DisbursalTypeUmc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("disbursal_type_UMC")
                    .HasComment("tipe pencairan UMC");

                entity.Property(e => e.BranchId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("branch_id")
                    .HasComment("ID cabang");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("description")
                    .HasComment("deskripsi");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsDistrict>(entity =>
            {
                entity.HasKey(e => e.DistrictId);

                entity.ToTable("ms_district");

                entity.Property(e => e.DistrictId)
                    .HasColumnName("district_id")
                    .HasComment("ID kecamatan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.DistrictName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("district_name")
                    .HasComment("nama kecamatan");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.RegencyId)
                    .HasColumnName("regency_id")
                    .HasComment("ID kabupaten");

                entity.HasOne(d => d.Regency)
                    .WithMany(p => p.MsDistrict)
                    .HasForeignKey(d => d.RegencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ms_district_ms_regency");
            });

            modelBuilder.Entity<MsEmployeeSync>(entity =>
            {
                entity.HasKey(e => e.NoPeg);

                entity.ToTable("ms_employee_sync");

                entity.Property(e => e.NoPeg)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("nomor induk karyawan");

                entity.Property(e => e.Alamat)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("alamat karyawan");

                entity.Property(e => e.AlamatId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("AlamatID")
                    .HasComment("alamat KTP karyawan");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("email karyawan");

                entity.Property(e => e.Fkeluar)
                    .HasColumnName("FKeluar")
                    .HasComment("indikator sudah resign/keluar atau belum");

                entity.Property(e => e.KdBank)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasComment("kode bank");

                entity.Property(e => e.KdCabang)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComment("kode cabang");

                entity.Property(e => e.KdJabat)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComment("kode jabatan");

                entity.Property(e => e.KdPerusahaan)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComment("kode perusahaan");

                entity.Property(e => e.Kontrakke)
                    .HasColumnName("kontrakke")
                    .HasComment("kontrak ke");

                entity.Property(e => e.Kota)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("kota");

                entity.Property(e => e.KotaId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KotaID")
                    .HasComment("kota KTP");

                entity.Property(e => e.Nama)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("nama karyawan");

                entity.Property(e => e.NamaRekening)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("nama rekening karyawan");

                entity.Property(e => e.NmBank)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("nama bank");

                entity.Property(e => e.NmJabat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("nama jabatan karyawan");

                entity.Property(e => e.NoHp)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NoHP")
                    .HasComment("nomor handphone karyawan");

                entity.Property(e => e.NoKtp)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("NoKTP")
                    .HasComment("nomor KTP karyawan");

                entity.Property(e => e.NoPassport)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("nomor paspor karyawan");

                entity.Property(e => e.NoRekening)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("nomor rekening karyawan");

                entity.Property(e => e.NoSim)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NoSIM")
                    .HasComment("nomor SIM karyawan");

                entity.Property(e => e.Sex)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasComment("jenis kelamin karyawan");

                entity.Property(e => e.Stpegawai)
                    .HasColumnName("stpegawai")
                    .HasComment("status pegawai");

                entity.Property(e => e.Telp)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("nomor telepon karyawan");

                entity.Property(e => e.TglKeluar)
                    .HasColumnType("datetime")
                    .HasComment("tanggal keluar karyawan");

                entity.Property(e => e.Tglendkontrak)
                    .HasColumnType("datetime")
                    .HasColumnName("tglendkontrak")
                    .HasComment("tanggal selesai kontrak");

                entity.Property(e => e.Tglgroup)
                    .HasColumnType("datetime")
                    .HasColumnName("tglgroup")
                    .HasComment("tanggal group");

                entity.Property(e => e.Tglmasuk)
                    .HasColumnType("datetime")
                    .HasColumnName("tglmasuk")
                    .HasComment("tanggal masuk karyawan");
            });

            modelBuilder.Entity<MsEvaluation>(entity =>
            {
                entity.HasKey(e => e.EvaluationId);

                entity.ToTable("ms_evaluation");

                entity.Property(e => e.EvaluationId)
                    .HasColumnName("evaluation_id")
                    .HasComment("ID penilaian");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.EvaluationDesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("evaluation_desc")
                    .HasComment("deskripsi dari penilaian");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsExcludeInsuranceByBranchR4>(entity =>
            {
                entity.HasKey(e => new { e.BranchId, e.InsuranceId });

                entity.ToTable("ms_exclude_insurance_by_branch_R4");

                entity.Property(e => e.BranchId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("branch_id")
                    .HasComment("ID cabang");

                entity.Property(e => e.InsuranceId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("insurance_id")
                    .HasComment("ID asuransi");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsGeneralParameter>(entity =>
            {
                entity.HasKey(e => e.Parameter);

                entity.ToTable("ms_general_parameter");

                entity.Property(e => e.Parameter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("parameter")
                    .HasComment("nama parameter");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("description")
                    .HasComment("deskripsi");

                entity.Property(e => e.IsUpdateable)
                    .HasColumnName("is_updateable")
                    .HasComment("indikator dapat diupdate atau tidak");

                entity.Property(e => e.IsVisible)
                    .HasColumnName("is_visible")
                    .HasComment("indikator dapat dilihat atau tidak");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.Unit)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("unit")
                    .HasComment("satuan");

                entity.Property(e => e.Value)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("value")
                    .HasComment("nilai dari parameter");
            });

            modelBuilder.Entity<MsGeneralParameterBackup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ms_general_parameter_backup");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.Parameter)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("parameter")
                    .HasComment("nama parameter");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasComment("nilai dari parameter");
            });

            modelBuilder.Entity<MsGetFieldDocApplicationIn>(entity =>
            {
                entity.HasKey(e => e.FieldId);

                entity.ToTable("ms_get_field_doc_application_in");

                entity.Property(e => e.FieldId)
                    .ValueGeneratedNever()
                    .HasColumnName("field_id")
                    .HasComment("ID field");

                entity.Property(e => e.ApplicationTypeId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("application_type_id")
                    .IsFixedLength()
                    .HasComment("ID tipe aplikasi");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("field_name")
                    .HasComment("nama field");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsHierarchyTransaction>(entity =>
            {
                entity.HasKey(e => new { e.TransTypeId, e.EmployeeId, e.PositionId, e.Level });

                entity.ToTable("ms_hierarchy_transaction");

                entity.Property(e => e.TransTypeId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("trans_type_id")
                    .HasComment("ID tipe transaksi");

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("employee_id")
                    .HasComment("ID karyawan");

                entity.Property(e => e.PositionId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("position_id")
                    .HasComment("ID posisi/jabatan");

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasComment("tingkat persetujuan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.IsApprover)
                    .HasColumnName("is_approver")
                    .HasComment("indikator pemberi persetujuan atau tidak");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.SpvEmployeeId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("spv_employee_id")
                    .HasComment("ID supervisor karyawan");

                entity.Property(e => e.SpvPositionId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("spv_position_id")
                    .HasComment("ID posisi/jabatan supervisor");
            });

            modelBuilder.Entity<MsHouseCondition>(entity =>
            {
                entity.HasKey(e => new { e.HouseConditionId, e.HouseConditionDescription })
                    .HasName("PK_ms_House_Condition");

                entity.ToTable("ms_house_condition");

                entity.Property(e => e.HouseConditionId)
                    .HasColumnName("house_condition_id")
                    .HasComment("ID kondisi rumah");

                entity.Property(e => e.HouseConditionDescription)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("house_condition_description")
                    .HasComment("deskripsi dari kondisi rumah");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsIdentityType>(entity =>
            {
                entity.HasKey(e => e.IdentityTypeId);

                entity.ToTable("ms_identity_type");

                entity.Property(e => e.IdentityTypeId)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("identity_type_id")
                    .HasComment("ID tipe identitas");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.CustomerType)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("customer_type")
                    .HasComment("kode tipe konsumen");

                entity.Property(e => e.IdentityTypeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("identity_type_name")
                    .HasComment("nama tipe identitas");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.HasOne(d => d.CustomerTypeNavigation)
                    .WithMany(p => p.MsIdentityType)
                    .HasForeignKey(d => d.CustomerType)
                    .HasConstraintName("FK_ms_identity_type_ms_customer_type");
            });

            modelBuilder.Entity<MsIncentiveAgentType>(entity =>
            {
                entity.HasKey(e => e.IncentiveTypeId);

                entity.ToTable("ms_incentive_agent_type");

                entity.Property(e => e.IncentiveTypeId)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("incentive_type_id")
                    .HasComment("ID tipe insentif");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IncentiveTypeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("incentive_type_name")
                    .HasComment("nama tipe insentif");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsIncentiveAgentTypeDetailBranch>(entity =>
            {
                entity.HasKey(e => new { e.IncentiveAgentTypeId, e.BranchId });

                entity.ToTable("ms_incentive_agent_type_detail_branch");

                entity.Property(e => e.IncentiveAgentTypeId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("incentive_agent_type_id")
                    .HasComment("ID tipe agen insentif");

                entity.Property(e => e.BranchId)
                    .HasColumnName("branch_id")
                    .HasComment("ID cabang");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsIncentiveAgentTypeDetailNpp>(entity =>
            {
                entity.HasKey(e => new { e.IncentiveAgentTypeId, e.Sequence });

                entity.ToTable("ms_incentive_agent_type_detail_npp");

                entity.Property(e => e.IncentiveAgentTypeId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("incentive_agent_type_id")
                    .HasComment("ID tipe agen insentif");

                entity.Property(e => e.Sequence)
                    .HasColumnName("sequence")
                    .HasComment("urutan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.FirstRange)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("first_range")
                    .HasComment("range awal");

                entity.Property(e => e.IncentiveAmount)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("incentive_amount")
                    .HasComment("jumlah nominal insentif");

                entity.Property(e => e.IncentiveById)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("incentive_by_id")
                    .HasComment("ID insentif berdasarkan");

                entity.Property(e => e.IncentivePercent)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("incentive_percent")
                    .HasComment("persen insentif");

                entity.Property(e => e.IsEnd)
                    .HasColumnName("is_end")
                    .HasComment("indikator sudah selesai atau belum");

                entity.Property(e => e.LastRange)
                    .HasColumnType("numeric(9, 0)")
                    .HasColumnName("last_range")
                    .HasComment("range akhir");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsIncentiveAgentTypeHeader>(entity =>
            {
                entity.HasKey(e => new { e.IncentiveAgentTypeId, e.IncentiveTypeId, e.AgentTypeId });

                entity.ToTable("ms_incentive_agent_type_header");

                entity.Property(e => e.IncentiveAgentTypeId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("incentive_agent_type_id")
                    .HasComment("ID tipe agen insentif");

                entity.Property(e => e.IncentiveTypeId)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("incentive_type_id")
                    .HasComment("ID tipe insentif");

                entity.Property(e => e.AgentTypeId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("agent_type_id")
                    .HasComment("ID tipe agen");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.IsDynamic)
                    .HasColumnName("is_dynamic")
                    .HasComment("indikator dinamis atau tidak");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsIncentiveBy>(entity =>
            {
                entity.HasKey(e => e.IncentiveById);

                entity.ToTable("ms_incentive_by");

                entity.Property(e => e.IncentiveById)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("incentive_by_id")
                    .HasComment("ID insentif berdasarkan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IncentiveByName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("incentive_by_name")
                    .HasComment("nama incentive berdasarkan");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsIncomeType>(entity =>
            {
                entity.HasKey(e => e.IncomeTypeId);

                entity.ToTable("ms_income_type");

                entity.Property(e => e.IncomeTypeId)
                    .HasColumnName("income_type_id")
                    .HasComment("ID tipe penghasilan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IncomeTypeName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("income_type_name")
                    .HasComment("nama tipe penghasilan");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsIndustryType>(entity =>
            {
                entity.HasKey(e => e.IndustryTypeId);

                entity.ToTable("ms_industry_type");

                entity.Property(e => e.IndustryTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("industry_type_id")
                    .HasComment("ID bidang usaha");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IndustryTypeDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("industry_type_desc")
                    .HasComment("deskripsi dari bidang usaha");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsInstallment>(entity =>
            {
                entity.HasKey(e => e.InstallmentId)
                    .HasName("PK_CFAngsuran");

                entity.ToTable("ms_installment");

                entity.Property(e => e.InstallmentId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("installment_id")
                    .HasComment("ID angsuran");

                entity.Property(e => e.CreatedBy)
                    .HasColumnType("datetime")
                    .HasColumnName("created_by")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.CreatedOn)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_on")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.InstallmentName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("installment_name")
                    .HasComment("nama angsuran");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasColumnName("is_active")
                    .HasDefaultValueSql("((1))")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_by")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_on")
                    .HasComment("user yang mengubah master data");
            });

            modelBuilder.Entity<MsInsuranceByCreditR4>(entity =>
            {
                entity.HasKey(e => e.CreditId);

                entity.ToTable("ms_insurance_by_credit_R4");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("credit_id")
                    .HasComment("ID kredit");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.InsuranceId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("insurance_id")
                    .HasComment("ID asuransi");
            });

            modelBuilder.Entity<MsInsuranceByDealerR2>(entity =>
            {
                entity.HasKey(e => e.DealerCode);

                entity.ToTable("ms_insurance_by_dealer_R2");

                entity.Property(e => e.DealerCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("dealer_code")
                    .HasComment("kode dealer");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.FinCode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("fin_code")
                    .HasComment("kode produk finance");

                entity.Property(e => e.InsuranceId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("insurance_id")
                    .HasComment("ID asuransi");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsInsuranceByDealerR4>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ms_insurance_by_dealer_R4");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.DealerCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("dealer_code")
                    .HasComment("kode dealer");

                entity.Property(e => e.FinCode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("fin_code")
                    .HasComment("kode produk finance");

                entity.Property(e => e.InsuranceId)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("insurance_id")
                    .HasComment("ID asuransi");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsInsuranceCostRateR2Ojk>(entity =>
            {
                entity.HasKey(e => new { e.RegionId, e.Tenor })
                    .HasName("PK_ms_insurance_cost_rate_OJK");

                entity.ToTable("ms_insurance_cost_rate_R2_OJK");

                entity.Property(e => e.RegionId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("region_id")
                    .HasComment("ID regional");

                entity.Property(e => e.Tenor)
                    .HasColumnName("tenor")
                    .HasComment("lama angsuran");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.InsuranceRateYear1)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("insurance_rate_year1")
                    .HasComment("bunga asuransi tahun ke 1");

                entity.Property(e => e.InsuranceRateYear2)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("insurance_rate_year2")
                    .HasComment("bunga asuransi tahun ke 2");

                entity.Property(e => e.InsuranceRateYear3)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("insurance_rate_year3")
                    .HasComment("bunga asuransi tahun ke 3");

                entity.Property(e => e.InsuranceRateYear4)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("insurance_rate_year4")
                    .HasComment("bunga asuransi tahun ke 4");

                entity.Property(e => e.InsuranceRateYear5)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("insurance_rate_year5")
                    .HasComment("bunga asuransi tahun ke 5");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsInsuranceCostRateR4Ojk>(entity =>
            {
                entity.HasKey(e => new { e.RegionId, e.AssetKindClassId, e.InsModelId, e.OtrStart, e.OtrEnd });

                entity.ToTable("ms_insurance_cost_rate_R4_OJK");

                entity.Property(e => e.RegionId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("region_id")
                    .HasComment("ID regional");

                entity.Property(e => e.AssetKindClassId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("asset_kind_class_id")
                    .HasComment("ID jenis kelas aset");

                entity.Property(e => e.InsModelId)
                    .HasColumnName("ins_model_id")
                    .HasComment("ID model asuransi");

                entity.Property(e => e.OtrStart)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("OTR_start")
                    .HasComment("harga OTR (on the road) awal");

                entity.Property(e => e.OtrEnd)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("OTR_end")
                    .HasComment("harga OTR (on the road) akhir");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.InsRate)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("ins_rate")
                    .HasComment("bunga asuransi");
            });

            modelBuilder.Entity<MsInsuranceCostRateR4OjkKpm>(entity =>
            {
                entity.HasKey(e => new { e.RegionId, e.AssetKindClassId, e.InsModelId, e.OtrStart, e.OtrEnd });

                entity.ToTable("ms_insurance_cost_rate_R4_OJK_KPM");

                entity.Property(e => e.RegionId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("region_id")
                    .HasComment("ID regional");

                entity.Property(e => e.AssetKindClassId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("asset_kind_class_id")
                    .HasComment("ID jenis kelas aset");

                entity.Property(e => e.InsModelId)
                    .HasColumnName("ins_model_id")
                    .HasComment("ID model asuransi");

                entity.Property(e => e.OtrStart)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("OTR_start")
                    .HasComment("harga OTR (on the road) awal");

                entity.Property(e => e.OtrEnd)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("OTR_end")
                    .HasComment("harga OTR (on the road) akhir");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.InsRate)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("ins_rate")
                    .HasComment("bunga asuransi");
            });

            modelBuilder.Entity<MsInsuranceCoverType>(entity =>
            {
                entity.HasKey(e => e.InsuranceCoverTypeId)
                    .HasName("PK__ms_insur__ECEA371706EC3775");

                entity.ToTable("ms_insurance_cover_type");

                entity.Property(e => e.InsuranceCoverTypeId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("insurance_cover_type_id")
                    .HasComment("ID tipe cover asuransi");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.InsuranceCoverTypeName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("insurance_cover_type_name")
                    .HasComment("nama tipe cover asuransi");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsInsurancePolicy>(entity =>
            {
                entity.HasKey(e => e.InsPolicyId)
                    .HasName("PK__ms_insur__947BAB1BCA44E08B");

                entity.ToTable("ms_insurance_policy");

                entity.Property(e => e.InsPolicyId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ins_policy_id")
                    .HasComment("ID polis asuransi");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.InsPolicyDescription)
                    .IsUnicode(false)
                    .HasColumnName("ins_policy_description")
                    .HasComment("deskripsi dari polis asuransi");

                entity.Property(e => e.InsPolicyUnit)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ins_policy_unit")
                    .HasComment("unit polis asuransi");

                entity.Property(e => e.InsPolicyValue)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ins_policy_value")
                    .HasComment("nilai polis asuransi");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsInsuranceProportionR2>(entity =>
            {
                entity.HasKey(e => e.InsuranceId);

                entity.ToTable("ms_insurance_proportion_R2");

                entity.Property(e => e.InsuranceId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("insurance_id")
                    .HasComment("ID asuransi");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.OverQuota)
                    .HasColumnName("over_quota")
                    .HasComment("melebihi kuota");

                entity.Property(e => e.Position)
                    .HasColumnName("position")
                    .HasComment("posisi");

                entity.Property(e => e.Proportion)
                    .HasColumnName("proportion")
                    .HasComment("proporsi");
            });

            modelBuilder.Entity<MsInsuranceProportionR2Syariah>(entity =>
            {
                entity.HasKey(e => e.InsuranceId);

                entity.ToTable("ms_insurance_proportion_R2_syariah");

                entity.Property(e => e.InsuranceId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("insurance_id")
                    .HasComment("ID asuransi");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.OverQuota)
                    .HasColumnName("over_quota")
                    .HasComment("melebihi kuota");

                entity.Property(e => e.Position)
                    .HasColumnName("position")
                    .HasComment("posisi");

                entity.Property(e => e.Proportion)
                    .HasColumnName("proportion")
                    .HasComment("proporsi");
            });

            modelBuilder.Entity<MsInsuranceProportionR4>(entity =>
            {
                entity.HasKey(e => e.InsuranceId);

                entity.ToTable("ms_insurance_proportion_R4");

                entity.Property(e => e.InsuranceId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("insurance_id")
                    .HasComment("ID asuransi");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.OverQuota)
                    .HasColumnName("over_quota")
                    .HasComment("melebihi kuota");

                entity.Property(e => e.Position)
                    .HasColumnName("position")
                    .HasComment("posisi");

                entity.Property(e => e.Proportion)
                    .HasColumnName("proportion")
                    .HasComment("proporsi");
            });

            modelBuilder.Entity<MsInsuranceProportionR4Syariah>(entity =>
            {
                entity.HasKey(e => e.InsuranceId);

                entity.ToTable("ms_insurance_proportion_R4_syariah");

                entity.Property(e => e.InsuranceId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("insurance_id")
                    .HasComment("ID asuransi");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data\r\nuser yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.OverQuota)
                    .HasColumnName("over_quota")
                    .HasComment("melebihi kuota");

                entity.Property(e => e.Position)
                    .HasColumnName("position")
                    .HasComment("posisi");

                entity.Property(e => e.Proportion)
                    .HasColumnName("proportion")
                    .HasComment("proporsi");
            });

            modelBuilder.Entity<MsInsuranceProportionR4UsedCar>(entity =>
            {
                entity.HasKey(e => e.InsuranceId);

                entity.ToTable("ms_insurance_proportion_R4_used_car");

                entity.Property(e => e.InsuranceId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("insurance_id")
                    .HasComment("ID asuransi");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.OverQuota)
                    .HasColumnName("over_quota")
                    .HasComment("melebihi kuota");

                entity.Property(e => e.Position)
                    .HasColumnName("position")
                    .HasComment("posisi");

                entity.Property(e => e.Proportion)
                    .HasColumnName("proportion")
                    .HasComment("proporsi");
            });

            modelBuilder.Entity<MsInsuranceType>(entity =>
            {
                entity.HasKey(e => e.InsuranceTypeId)
                    .HasName("PK__ms_insur__19DDD89B5024C85D");

                entity.ToTable("ms_insurance_type");

                entity.Property(e => e.InsuranceTypeId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("insurance_type_id")
                    .HasComment("ID tipe asuransi");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.InsuranceTypeName)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("insurance_type_name")
                    .HasComment("nama tipe asuransi");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsInterestRateType>(entity =>
            {
                entity.HasKey(e => e.InterestRateTypeId);

                entity.ToTable("ms_interest_rate_type");

                entity.Property(e => e.InterestRateTypeId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("interest_rate_type_id");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on");

                entity.Property(e => e.InterestRateTypeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("interest_rate_type_name");

                entity.Property(e => e.IsActive).HasColumnName("is_active");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on");
            });

            modelBuilder.Entity<MsLocation>(entity =>
            {
                entity.HasKey(e => e.LocationId);

                entity.ToTable("ms_location");

                entity.Property(e => e.LocationId)
                    .ValueGeneratedNever()
                    .HasColumnName("location_id")
                    .HasComment("ID lokasi");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.DistrictId)
                    .HasColumnName("district_id")
                    .HasComment("ID kecamatan");

                entity.Property(e => e.Dt2Type)
                    .HasColumnName("DT2_type")
                    .HasComment("tipe untuk menentukan kota atau kabupaten");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.ProvinceId)
                    .HasColumnName("province_id")
                    .HasComment("ID provinsi");

                entity.Property(e => e.RegencyId)
                    .HasColumnName("regency_id")
                    .HasComment("ID kota atau kabupaten");

                entity.Property(e => e.VillageId)
                    .HasColumnName("village_id")
                    .HasComment("ID kelurahan");

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("zip_code")
                    .HasComment("kode pos");
            });

            modelBuilder.Entity<MsMailToSource>(entity =>
            {
                entity.HasKey(e => e.MailToSourceId);

                entity.ToTable("ms_mail_to_source");

                entity.Property(e => e.MailToSourceId)
                    .HasColumnName("mail_to_source_id")
                    .HasComment("ID tujuan penagihan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.MailToSourceDesc)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("mail_to_source_desc")
                    .HasComment("deskripsi dari tujuan penagihan");
            });

            modelBuilder.Entity<MsMapDealerCode>(entity =>
            {
                entity.HasKey(e => new { e.MainDealerCode, e.BranchId })
                    .HasName("PK__ms_map_d__509A4A820AA2B0AB");

                entity.ToTable("ms_map_dealer_code");

                entity.Property(e => e.MainDealerCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("main_dealer_code")
                    .HasComment("kode dealer utama");

                entity.Property(e => e.BranchId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("branch_id")
                    .HasComment("ID cabang");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.OldDealerCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("old_dealer_code")
                    .HasComment("kode dealer lama");
            });

            modelBuilder.Entity<MsMarital>(entity =>
            {
                entity.HasKey(e => e.MaritalId);

                entity.ToTable("ms_marital");

                entity.Property(e => e.MaritalId)
                    .HasColumnName("marital_id")
                    .HasComment("ID status pernikahan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.MaritalDesc)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("marital_desc")
                    .HasComment("deskripsi dari status pernikahan");
            });

            modelBuilder.Entity<MsModule>(entity =>
            {
                entity.HasKey(e => e.ModuleId)
                    .HasName("PK_ms_application_module");

                entity.ToTable("ms_module");

                entity.Property(e => e.ModuleId)
                    .ValueGeneratedNever()
                    .HasColumnName("module_id")
                    .HasComment("ID modul");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.ModuleName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("module_name")
                    .HasComment("nama modul");

                entity.Property(e => e.Sequence)
                    .HasColumnName("sequence")
                    .HasComment("urutan modul");
            });

            modelBuilder.Entity<MsModuleMenu>(entity =>
            {
                entity.HasKey(e => e.MenuId);

                entity.ToTable("ms_module_menu");

                entity.Property(e => e.MenuId)
                    .ValueGeneratedNever()
                    .HasColumnName("menu_id")
                    .HasComment("ID menu");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.MenuAction)
                    .IsUnicode(false)
                    .HasColumnName("menu_action")
                    .HasComment("menu action");

                entity.Property(e => e.MenuActionApproved)
                    .IsUnicode(false)
                    .HasColumnName("menu_action_approved")
                    .HasComment("menu action approved");

                entity.Property(e => e.MenuActionEdit)
                    .IsUnicode(false)
                    .HasColumnName("menu_action_edit")
                    .HasComment("menu action edit");

                entity.Property(e => e.MenuActionView)
                    .IsUnicode(false)
                    .HasColumnName("menu_action_view")
                    .HasComment("menu action view");

                entity.Property(e => e.MenuController)
                    .IsUnicode(false)
                    .HasColumnName("menu_controller")
                    .HasComment("menu controller");

                entity.Property(e => e.MenuTitle)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("menu_title")
                    .HasComment("judul menu");

                entity.Property(e => e.ModuleId)
                    .HasColumnName("module_id")
                    .HasComment("ID modul");

                entity.Property(e => e.ParentModuleId)
                    .HasColumnName("parent_module_id")
                    .HasComment("ID induk modul");

                entity.Property(e => e.Sequence)
                    .HasColumnName("sequence")
                    .HasComment("urutan menu modul");

                entity.Property(e => e.TransTypeIdPrefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("trans_type_id_prefix")
                    .HasComment("trans type id prefix");
            });

            modelBuilder.Entity<MsMonthlyOtherInstallment>(entity =>
            {
                entity.HasKey(e => e.MonthlyOtherInstallmentId);

                entity.ToTable("ms_monthly_other_installment");

                entity.Property(e => e.MonthlyOtherInstallmentId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("monthly_other_installment_id")
                    .HasComment("ID cicilan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.MonthlyOtherInstallmentDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("monthly_other_installment_desc")
                    .HasComment("deskripsi dari cicilan");
            });

            modelBuilder.Entity<MsNameValidation>(entity =>
            {
                entity.ToTable("ms_name_validation");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name")
                    .HasComment("nama");

                entity.Property(e => e.Restricted)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("restricted")
                    .HasComment("terbatas/dibatasi");
            });

            modelBuilder.Entity<MsNationality>(entity =>
            {
                entity.HasKey(e => e.NationalityId);

                entity.ToTable("ms_nationality");

                entity.Property(e => e.NationalityId)
                    .ValueGeneratedNever()
                    .HasColumnName("nationality_id")
                    .HasComment("ID kewarganegaraan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.NationalityDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nationality_desc")
                    .HasComment("deskripsi dari kewarganegaraan");
            });

            modelBuilder.Entity<MsNpwp>(entity =>
            {
                entity.HasKey(e => e.NpwpTypeId);

                entity.ToTable("ms_NPWP");

                entity.Property(e => e.NpwpTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("NPWP_type_id")
                    .HasComment("ID tipe NPWP");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasColumnName("is_active")
                    .HasDefaultValueSql("((1))")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.NpwpTypeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPWP_type_name")
                    .HasComment("nama tipe NPWP");
            });

            modelBuilder.Entity<MsOwnershipProof>(entity =>
            {
                entity.HasKey(e => e.OwnershipProofId);

                entity.ToTable("ms_ownership_proof");

                entity.Property(e => e.OwnershipProofId)
                    .HasColumnName("ownership_proof_id")
                    .HasComment("ID bukti kepemilikan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.OwnershipProofDesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ownership_proof_desc")
                    .HasComment("deskripsi dari bukti kepemilikan");
            });

            modelBuilder.Entity<MsPackageDetail>(entity =>
            {
                entity.HasKey(e => new { e.PackageId, e.Secq });

                entity.ToTable("ms_package_detail");

                entity.Property(e => e.PackageId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("package_id");

                entity.Property(e => e.Secq).HasColumnName("secq");

                entity.Property(e => e.AdminFeeMax)
                    .HasColumnType("decimal(21, 2)")
                    .HasColumnName("admin_fee_max");

                entity.Property(e => e.AdminFeeMin)
                    .HasColumnType("decimal(21, 2)")
                    .HasColumnName("admin_fee_min");

                entity.Property(e => e.ArType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AR_type")
                    .IsFixedLength();

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on");

                entity.Property(e => e.DpGross)
                    .HasColumnType("decimal(21, 2)")
                    .HasColumnName("DP_gross");

                entity.Property(e => e.InsRefundMax)
                    .HasColumnType("decimal(21, 2)")
                    .HasColumnName("ins_refund_max");

                entity.Property(e => e.InterestMax)
                    .HasColumnType("decimal(21, 2)")
                    .HasColumnName("interest_max");

                entity.Property(e => e.InterestMin)
                    .HasColumnType("decimal(21, 2)")
                    .HasColumnName("interest_min");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on");

                entity.Property(e => e.OtrMax)
                    .HasColumnType("decimal(21, 2)")
                    .HasColumnName("OTR_max");

                entity.Property(e => e.OtrMin)
                    .HasColumnType("decimal(21, 2)")
                    .HasColumnName("OTR_min");

                entity.Property(e => e.ProvisiDealerMax)
                    .HasColumnType("decimal(21, 2)")
                    .HasColumnName("provisi_dealer_max");

                entity.Property(e => e.ProvisiDealerMin)
                    .HasColumnType("decimal(21, 2)")
                    .HasColumnName("provisi_dealer_min");

                entity.Property(e => e.RefundBunga)
                    .HasColumnType("decimal(21, 2)")
                    .HasColumnName("refund_bunga");

                entity.Property(e => e.Tenor).HasColumnName("tenor");
            });

            modelBuilder.Entity<MsPackageHeader>(entity =>
            {
                entity.HasKey(e => e.PackageId)
                    .HasName("PK__ms_packa__63846AE853F32C40");

                entity.ToTable("ms_package_header");

                entity.Property(e => e.PackageId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("package_id")
                    .HasComment("ID paket");

                entity.Property(e => e.ApplicationType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("application_type")
                    .HasComment("tipe aplikasi");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("end_date")
                    .HasComment("tanggal berakhir");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.IsItemNew)
                    .HasColumnName("is_item_new")
                    .HasComment("indikator apakah item baru atau tidak");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.PackageName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("package_name")
                    .HasComment("nama paket");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("start_date")
                    .HasComment("tanggal mulai");
            });

            modelBuilder.Entity<MsPackageHeaderGiias>(entity =>
            {
                entity.HasKey(e => e.PackageId);

                entity.ToTable("ms_package_header_GIIAS");

                entity.Property(e => e.PackageId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("package_id")
                    .HasComment("ID paket");

                entity.Property(e => e.ApplicationTypeId)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("application_type_id")
                    .HasComment("ID tipe aplikasi");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("end_date")
                    .HasComment("tanggal berakhir");

                entity.Property(e => e.InsuranceId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("insurance_id")
                    .HasComment("ID asuransi");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.IsItemNew)
                    .HasColumnName("is_item_new")
                    .HasComment("indikator apakah item baru atau tidak");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.PackageName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("package_name")
                    .HasComment("nama paket");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("start_date")
                    .HasComment("tanggal mulai");
            });

            modelBuilder.Entity<MsPaymentPoint>(entity =>
            {
                entity.HasKey(e => e.PaymentPointId);

                entity.ToTable("ms_payment_point");

                entity.Property(e => e.PaymentPointId)
                    .ValueGeneratedNever()
                    .HasColumnName("payment_point_id")
                    .HasComment("ID titik pembayaran");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.PaymentPointDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("payment_point_desc")
                    .HasComment("deskripsi dari titik pembayaran");

                entity.Property(e => e.PaymentTypeId)
                    .HasColumnName("payment_type_id")
                    .HasComment("ID tipe pembayaran");

                entity.HasOne(d => d.PaymentType)
                    .WithMany(p => p.MsPaymentPoint)
                    .HasForeignKey(d => d.PaymentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ms_payment_point_ms_payment_type");
            });

            modelBuilder.Entity<MsPaymentType>(entity =>
            {
                entity.HasKey(e => e.PaymentTypeId);

                entity.ToTable("ms_payment_type");

                entity.Property(e => e.PaymentTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("payment_type_id")
                    .HasComment("ID tipe pembayaran");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.PaymentTypeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("payment_type_name")
                    .HasComment("deskripsi dari tipe pembayaran");
            });

            modelBuilder.Entity<MsPhoto>(entity =>
            {
                entity.HasKey(e => new { e.PhotoId, e.PhotoTypeId });

                entity.ToTable("ms_photo");

                entity.Property(e => e.PhotoId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("photo_id");

                entity.Property(e => e.PhotoTypeId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("photo_type_id");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on");

                entity.Property(e => e.DisplayStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("display_status");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on");

                entity.Property(e => e.PhotoDesc)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("photo_desc");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("status");
            });

            modelBuilder.Entity<MsPhotoType>(entity =>
            {
                entity.HasKey(e => e.PhotoTypeId);

                entity.ToTable("ms_photo_type");

                entity.Property(e => e.PhotoTypeId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("photo_type_id")
                    .HasComment("ID tipe foto");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.PhotoTypeDesc)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("photo_type_desc")
                    .HasComment("deskripsi dari tipe foto");
            });

            modelBuilder.Entity<MsPosition>(entity =>
            {
                entity.HasKey(e => e.PositionId);

                entity.ToTable("ms_position");

                entity.Property(e => e.PositionId)
                    .ValueGeneratedNever()
                    .HasColumnName("position_id")
                    .HasComment("ID posisi/jabatan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.PositionDescription)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("position_description")
                    .HasComment("deskripsi dari posisi/jabatan");
            });

            modelBuilder.Entity<MsPositionMenu>(entity =>
            {
                entity.HasKey(e => new { e.PositionId, e.MenuId });

                entity.ToTable("ms_position_menu");

                entity.Property(e => e.PositionId)
                    .HasColumnName("position_id")
                    .HasComment("ID posisi/jabatan");

                entity.Property(e => e.MenuId)
                    .HasColumnName("menu_id")
                    .HasComment("ID menu");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsPositionMenuSpecial>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeId, e.MenuId });

                entity.ToTable("ms_position_menu_special");

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("employee_id")
                    .HasComment("Nomor Induk Karyawan (NIK)");

                entity.Property(e => e.MenuId)
                    .HasColumnName("menu_id")
                    .HasComment("ID menu");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsPositionType>(entity =>
            {
                entity.HasKey(e => new { e.PositionType, e.PositionId, e.AssetKindId, e.IsItemNew });

                entity.ToTable("ms_position_type");

                entity.Property(e => e.PositionType)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("position_type");

                entity.Property(e => e.PositionId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("position_id");

                entity.Property(e => e.AssetKindId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("asset_kind_id");

                entity.Property(e => e.IsItemNew)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("is_item_new");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on");

                entity.Property(e => e.IsActive).HasColumnName("is_active");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on");
            });

            modelBuilder.Entity<MsProduct>(entity =>
            {
                entity.HasKey(e => e.ProductId)
                    .HasName("pk_ms_product");

                entity.ToTable("ms_product");

                entity.Property(e => e.ProductId)
                    .ValueGeneratedNever()
                    .HasColumnName("product_id")
                    .HasComment("ID produk");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.Description)
                    .IsUnicode(false)
                    .HasColumnName("description")
                    .HasComment("deskripsi dari produk");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasColumnName("is_active")
                    .HasDefaultValueSql("((1))")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.ProductName)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("product_name")
                    .HasComment("nama produk");
            });

            modelBuilder.Entity<MsProductFinance>(entity =>
            {
                entity.HasKey(e => e.ProductFinanceId)
                    .HasName("pk_ms_product_finance");

                entity.ToTable("ms_product_finance");

                entity.Property(e => e.ProductFinanceId)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("product_finance_id")
                    .IsFixedLength()
                    .HasComment("ID produk finance");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasDefaultValueSql("((1))")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.ProductFinanceName)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("product_finance_name")
                    .HasComment("nama produk finance");
            });

            modelBuilder.Entity<MsProductMarketing>(entity =>
            {
                entity.HasKey(e => new { e.ProductMarketingId, e.CompanyId });

                entity.ToTable("ms_product_marketing");

                entity.Property(e => e.ProductMarketingId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("product_marketing_id")
                    .HasComment("ID produk marketing");

                entity.Property(e => e.CompanyId)
                    .HasColumnName("company_id")
                    .HasComment("ID perusahaan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.ProductMarketingIdOld)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("product_marketing_id_old")
                    .HasComment("ID produk marketing lama");

                entity.Property(e => e.ProductMarketingName)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("product_marketing_name")
                    .HasComment("nama produk marketing");
            });

            modelBuilder.Entity<MsProfession>(entity =>
            {
                entity.HasKey(e => e.ProfessionId);

                entity.ToTable("ms_profession");

                entity.Property(e => e.ProfessionId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("profession_id")
                    .HasComment("ID profesi");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.ProfessionDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("profession_desc")
                    .HasComment("deskripsi dari profesi");
            });

            modelBuilder.Entity<MsPromotionLineText>(entity =>
            {
                entity.HasKey(e => e.LineTextId);

                entity.ToTable("ms_promotion_line_text");

                entity.Property(e => e.LineTextId)
                    .ValueGeneratedNever()
                    .HasColumnName("line_text_id")
                    .HasComment("ID teks baris");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.LineTextColor)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("line_text_color")
                    .HasComment("warna teks baris");

                entity.Property(e => e.LineTextName)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("line_text_name")
                    .HasComment("nama teks baris");
            });

            modelBuilder.Entity<MsProvenancePoolingOrder>(entity =>
            {
                entity.HasKey(e => e.ProvenancePoId)
                    .HasName("PK__ms_prove__F60BA80EC15C8080");

                entity.ToTable("ms_provenance_pooling_order");

                entity.Property(e => e.ProvenancePoId)
                    .HasColumnName("provenance_PO_id")
                    .HasComment("ID provenance PO");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.ProvenancePoDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("provenance_PO_description")
                    .HasComment("deskripsi dari provenance PO");
            });

            modelBuilder.Entity<MsProvince>(entity =>
            {
                entity.HasKey(e => e.ProvinceId);

                entity.ToTable("ms_province");

                entity.Property(e => e.ProvinceId)
                    .HasColumnName("province_id")
                    .HasComment("ID provinsi");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.ProvinceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("province_name")
                    .HasComment("nama provinsi");
            });

            modelBuilder.Entity<MsPtInsurance>(entity =>
            {
                entity.HasKey(e => e.InsuranceId);

                entity.ToTable("ms_PT_insurance");

                entity.Property(e => e.InsuranceId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("insurance_id")
                    .HasComment("ID asuransi");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("account_name")
                    .HasComment("nama rekening");

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("account_number")
                    .HasComment("nomor rekening");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("address")
                    .HasComment("alamat");

                entity.Property(e => e.BankId)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("bank_id")
                    .HasComment("ID bank");

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("city")
                    .HasComment("kota");

                entity.Property(e => e.ContactPerson)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("contact_person")
                    .HasComment("orang yang dapat dihubungi");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("email")
                    .HasComment("email");

                entity.Property(e => e.FaxNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("fax_number")
                    .HasComment("nomor fax");

                entity.Property(e => e.InsuranceInitial)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("insurance_initial")
                    .HasComment("asuransi awal");

                entity.Property(e => e.InsuranceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("insurance_name")
                    .HasComment("nama asuransi");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("phone_number")
                    .HasComment("nomor telepon");
            });

            modelBuilder.Entity<MsReferenceType>(entity =>
            {
                entity.HasKey(e => e.ReferenceId);

                entity.ToTable("ms_reference_type");

                entity.Property(e => e.ReferenceId)
                    .ValueGeneratedNever()
                    .HasColumnName("reference_id")
                    .HasComment("ID referensi");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.ReferenceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reference_name")
                    .HasComment("sebutan atau nama dari referensi");
            });

            modelBuilder.Entity<MsRegency>(entity =>
            {
                entity.HasKey(e => e.RegencyId);

                entity.ToTable("ms_regency");

                entity.Property(e => e.RegencyId)
                    .HasColumnName("regency_id")
                    .HasComment("ID kota atau kabupaten");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.Dt2Type)
                    .HasColumnName("DT2_type")
                    .HasComment("tipe untuk menentukan kota atau kabupaten");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.ProvinceId)
                    .HasColumnName("province_id")
                    .HasComment("ID provinsi");

                entity.Property(e => e.RegencyName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("regency_name")
                    .HasComment("nama kota atau kabupaten");

                entity.HasOne(d => d.Province)
                    .WithMany(p => p.MsRegency)
                    .HasForeignKey(d => d.ProvinceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ms_regency_ms_province");
            });

            modelBuilder.Entity<MsRegional>(entity =>
            {
                entity.HasKey(e => e.RegionalId);

                entity.ToTable("ms_regional");

                entity.Property(e => e.RegionalId)
                    .ValueGeneratedNever()
                    .HasColumnName("regional_id")
                    .HasComment("ID regional");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.GroupId)
                    .HasColumnName("group_id")
                    .HasComment("ID grup");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("group_name")
                    .HasComment("nama grup");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.RegionalName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("regional_name")
                    .HasComment("nama regional");
            });

            modelBuilder.Entity<MsRegionalArea>(entity =>
            {
                entity.HasKey(e => e.AreaId);

                entity.ToTable("ms_regional_area");

                entity.Property(e => e.AreaId)
                    .ValueGeneratedNever()
                    .HasColumnName("area_id")
                    .HasComment("ID wilayah");

                entity.Property(e => e.AreaName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("area_name")
                    .HasComment("nama wilayah");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.RegionalId)
                    .HasColumnName("regional_id")
                    .HasComment("ID regional");
            });

            modelBuilder.Entity<MsRelationship>(entity =>
            {
                entity.HasKey(e => e.RelationshipId);

                entity.ToTable("ms_relationship");

                entity.Property(e => e.RelationshipId)
                    .HasColumnName("relationship_id")
                    .HasComment("ID relasi dengan pemohon");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.CustomerType)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("customer_type")
                    .HasComment("kode tipe konsumen");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.RelationshipDesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("relationship_desc")
                    .HasComment("deskripsi dari relasi dengan pemohon");
            });

            modelBuilder.Entity<MsRepeatOrderApplicantRelation>(entity =>
            {
                entity.HasKey(e => e.RepeatOrderApplicantRelationId);

                entity.ToTable("ms_repeat_order_applicant_relation");

                entity.Property(e => e.RepeatOrderApplicantRelationId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("repeat_order_applicant_relation_id")
                    .HasComment("ID relasi dengan pemohon RO");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.RepeatOrderApplicantRelationDesc)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("repeat_order_applicant_relation_desc")
                    .HasComment("deskripsi dari relasi dengan pemohon RO");
            });

            modelBuilder.Entity<MsRepeatOrderCategory>(entity =>
            {
                entity.HasKey(e => e.RepeatOrderCategoryId);

                entity.ToTable("ms_repeat_order_category");

                entity.Property(e => e.RepeatOrderCategoryId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("repeat_order_category_id")
                    .HasComment("ID kategori RO");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.FlagItem)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("flag_item")
                    .HasComment("indikator untuk item motor atau mobil");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.RepeatOrderCategoryDesc)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("repeat_order_category_desc")
                    .HasComment("deskripsi dari kategori RO");
            });

            modelBuilder.Entity<MsRepeatOrderDecision>(entity =>
            {
                entity.HasKey(e => e.RepeatOrderDecisionId);

                entity.ToTable("ms_repeat_order_decision");

                entity.Property(e => e.RepeatOrderDecisionId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("repeat_order_decision_id")
                    .HasComment("ID keputusan RO");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.RepeatOrderDecisionDesc)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("repeat_order_decision_desc")
                    .HasComment("deskripsi dari keputusan RO");
            });

            modelBuilder.Entity<MsRepeatOrderReason>(entity =>
            {
                entity.HasKey(e => e.RepeatOrderReasonId);

                entity.ToTable("ms_repeat_order_reason");

                entity.Property(e => e.RepeatOrderReasonId)
                    .ValueGeneratedNever()
                    .HasColumnName("repeat_order_reason_id")
                    .HasComment("ID keputusan RO");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.RepeatOrderReasonDesc)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("repeat_order_reason_desc")
                    .HasComment("deskripsi dari keputusan RO");
            });

            modelBuilder.Entity<MsRepeatOrderReferenceSource>(entity =>
            {
                entity.HasKey(e => e.RepeatOrderReferenceSourceId);

                entity.ToTable("ms_repeat_order_reference_source");

                entity.Property(e => e.RepeatOrderReferenceSourceId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("repeat_order_reference_source_id")
                    .HasComment("ID sumber referensi RO");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.RepeatOrderReferenceSourceDesc)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("repeat_order_reference_source_desc")
                    .HasComment("deskripsi dari sumber referensi RO");
            });

            modelBuilder.Entity<MsReposessionMarketPrice>(entity =>
            {
                entity.HasKey(e => new { e.MarketPriceId, e.BranchId, e.Tahun, e.ItemMerkTypeIdBaru })
                    .HasName("PK_ReposessionMarketPrice");

                entity.ToTable("ms_reposession_market_price");

                entity.Property(e => e.MarketPriceId)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("market_price_id")
                    .HasComment("ID harga pasar");

                entity.Property(e => e.BranchId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("branch_id")
                    .HasComment("ID cabang");

                entity.Property(e => e.Tahun)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("tahun")
                    .HasComment("tahun");

                entity.Property(e => e.ItemMerkTypeIdBaru)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("item_merk_type_id_baru")
                    .IsFixedLength()
                    .HasComment("ID tipe merk item baru");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.DeskripsiCreate)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("deskripsi_create")
                    .HasComment("deskripsi pembuatan");

                entity.Property(e => e.DeskripsiUpdate)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("deskripsi_update")
                    .HasComment("deskripsi update");

                entity.Property(e => e.Harga)
                    .HasColumnType("numeric(12, 0)")
                    .HasColumnName("harga")
                    .HasComment("nominal harga");

                entity.Property(e => e.Harga2)
                    .HasColumnType("numeric(12, 0)")
                    .HasColumnName("harga2")
                    .HasComment("nominal harga 2");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.LogId)
                    .HasColumnName("log_id")
                    .HasComment("ID log");

                entity.Property(e => e.SourceCreate)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("source_create")
                    .HasComment("sumber pembuatan");

                entity.Property(e => e.SourceUpdate)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("source_update")
                    .HasComment("sumber update");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("status")
                    .HasDefaultValueSql("('D')")
                    .IsFixedLength()
                    .HasComment("status");
            });

            modelBuilder.Entity<MsResidenceStatus>(entity =>
            {
                entity.HasKey(e => e.ResidenceStatusId);

                entity.ToTable("ms_residence_status");

                entity.Property(e => e.ResidenceStatusId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("residence_status_id")
                    .HasComment("ID status tempat tinggal");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.ResidenceStatusDesc)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("residence_status_desc")
                    .HasComment("deskripsi dari status tempat tinggal");
            });

            modelBuilder.Entity<MsRisk>(entity =>
            {
                entity.HasKey(e => e.RiskId)
                    .HasName("PK__ms_risk__DF8426214049D2BE");

                entity.ToTable("ms_risk");

                entity.Property(e => e.RiskId)
                    .ValueGeneratedNever()
                    .HasColumnName("risk_id")
                    .HasComment("ID resiko");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.EndPoint)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("end_point")
                    .HasComment("titik akhir");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.RiskCategoryId)
                    .HasColumnName("risk_category_id")
                    .HasComment("ID kategori resiko");

                entity.Property(e => e.RiskParameterId)
                    .HasColumnName("risk_parameter_id")
                    .HasComment("ID parameter resiko");

                entity.Property(e => e.StartPoint)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("start_point")
                    .HasComment("titik mulai");
            });

            modelBuilder.Entity<MsRiskCategory>(entity =>
            {
                entity.HasKey(e => e.RiskCategoryId)
                    .HasName("PK__ms_risk___B311BE2F101AEE5C");

                entity.ToTable("ms_risk_category");

                entity.Property(e => e.RiskCategoryId)
                    .ValueGeneratedNever()
                    .HasColumnName("risk_category_id")
                    .HasComment("ID kategori resiko");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.EndRange)
                    .HasColumnName("end_range")
                    .HasComment("rentang akhir");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.Point)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("point")
                    .HasComment("poin");

                entity.Property(e => e.RiskCategoryDescription)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("risk_category_description")
                    .HasComment("deskripsi dari kategori resiko");

                entity.Property(e => e.StartRange)
                    .HasColumnName("start_range")
                    .HasComment("rentang awal");
            });

            modelBuilder.Entity<MsRiskParameter>(entity =>
            {
                entity.HasKey(e => e.RiskParameterId)
                    .HasName("PK__ms_risk___66C7F84931BB6ECF");

                entity.ToTable("ms_risk_parameter");

                entity.Property(e => e.RiskParameterId)
                    .ValueGeneratedNever()
                    .HasColumnName("risk_parameter_id")
                    .HasComment("ID parameter resiko");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.RiskParameterName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("risk_parameter_name")
                    .HasComment("nama parameter resiko");
            });

            modelBuilder.Entity<MsServiceBureauBranch>(entity =>
            {
                entity.HasKey(e => new { e.ServiceBureauId, e.BranchId });

                entity.ToTable("ms_service_bureau_branch");

                entity.Property(e => e.ServiceBureauId)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("service_bureau_id")
                    .HasComment("ID biro jasa");

                entity.Property(e => e.BranchId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("branch_id")
                    .HasComment("ID cabang");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsServiceBureauHeader>(entity =>
            {
                entity.HasKey(e => e.ServiceBureauId);

                entity.ToTable("ms_service_bureau_header");

                entity.Property(e => e.ServiceBureauId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("service_bureau_id")
                    .HasComment("ID biro jasa");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("address")
                    .HasComment("alamat biro jasa");

                entity.Property(e => e.AktaNo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("akta_no")
                    .HasComment("nomor akta");

                entity.Property(e => e.BusinessLicenseNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("business_license_number")
                    .HasComment("nomor lisensi bisnis");

                entity.Property(e => e.City)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("city")
                    .HasComment("kota biro jasa");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("email")
                    .HasComment("email biro jasa");

                entity.Property(e => e.FaxNumber)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("fax_number")
                    .HasComment("nomor fax biro jasa");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.KtpNo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("KTP_no")
                    .HasComment("nomor KTP");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.NpwpNo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NPWP_no")
                    .HasComment("nomor NPWP");

                entity.Property(e => e.ServiceBureauName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("service_bureau_name")
                    .HasComment("nama biro jasa");

                entity.Property(e => e.ServiceBureauType)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("service_bureau_type")
                    .HasComment("tipe biro jasa");

                entity.Property(e => e.TelephoneNumber)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("telephone_number")
                    .HasComment("nomor telepon biro jasa");

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("zip_code")
                    .HasComment("kode pos biro jasa");
            });

            modelBuilder.Entity<MsSource>(entity =>
            {
                entity.HasKey(e => e.SourceId);

                entity.ToTable("ms_source");

                entity.Property(e => e.SourceId)
                    .HasColumnName("source_id")
                    .HasComment("id jenis narasumber");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.SourceDesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("source_desc")
                    .HasComment("deskripsi dari jenis narasumber");
            });

            modelBuilder.Entity<MsStatusCredit>(entity =>
            {
                entity.HasKey(e => e.StatusId);

                entity.ToTable("ms_status_credit");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("status_id")
                    .HasComment("ID status");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasColumnName("is_active")
                    .HasDefaultValueSql("((1))")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.StatusDescription)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("status_description")
                    .HasComment("deskripsi status");
            });

            modelBuilder.Entity<MsStnkName>(entity =>
            {
                entity.HasKey(e => e.StnkNameId)
                    .HasName("PK__ms_STNK___4BDFE45378A93521");

                entity.ToTable("ms_STNK_name");

                entity.Property(e => e.StnkNameId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("STNK_name_id")
                    .HasComment("ID nama STNK");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.StnkNameDescription)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STNK_name_description")
                    .HasComment("deskripsi dari nama STNK");
            });

            modelBuilder.Entity<MsStnkStatus>(entity =>
            {
                entity.HasKey(e => e.StnkStatusId);

                entity.ToTable("ms_STNK_status");

                entity.Property(e => e.StnkStatusId)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("STNK_status_id");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on");

                entity.Property(e => e.IsActive).HasColumnName("is_active");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on");

                entity.Property(e => e.StnkStatusDescription)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STNK_status_description");
            });

            modelBuilder.Entity<MsSubsidyDp>(entity =>
            {
                entity.HasKey(e => e.SubsidyDpId)
                    .HasName("PK__ms_subsi__70477F848AA9BC42");

                entity.ToTable("ms_subsidy_DP");

                entity.Property(e => e.SubsidyDpId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("subsidy_DP_id")
                    .HasComment("ID subsidi DP");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.SubsidyDpName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("subsidy_DP_name")
                    .HasComment("nama subsidi DP");
            });

            modelBuilder.Entity<MsSupplierMappingOjk>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ms_supplier_mapping_OJK");

                entity.Property(e => e.AddonsPaNominal)
                    .HasColumnType("decimal(21, 2)")
                    .HasColumnName("addons_PA_nominal")
                    .HasComment("biaya tambahan PA");

                entity.Property(e => e.BiayaProsesId)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("biaya_proses_id")
                    .HasComment("ID biaya proses");

                entity.Property(e => e.BranchId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("branch_id")
                    .HasComment("ID cabang");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.InsModelId)
                    .HasColumnName("ins_model_id")
                    .HasComment("ID model asuransi");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.ModelId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("model_id")
                    .HasComment("ID model");

                entity.Property(e => e.RegionId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("region_id")
                    .HasComment("ID regional");

                entity.Property(e => e.Secq)
                    .HasColumnName("secq")
                    .HasComment("urutan");

                entity.Property(e => e.Tenor)
                    .HasColumnName("tenor")
                    .HasComment("lama angsuran");

                entity.Property(e => e.TipeGuna)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("tipe_guna")
                    .HasComment("tipe guna");

                entity.Property(e => e.YearItem)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("year_item")
                    .HasComment("tahun kendaraan");
            });

            modelBuilder.Entity<MsTransSuperUser>(entity =>
            {
                entity.HasKey(e => new { e.TransTypeId, e.EmployeeId });

                entity.ToTable("ms_trans_super_user");

                entity.Property(e => e.TransTypeId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("trans_type_id")
                    .HasComment("ID tipe transaksi");

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("employee_id")
                    .HasComment("ID karyawan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsTransType>(entity =>
            {
                entity.HasKey(e => e.TransTypeId);

                entity.ToTable("ms_trans_type");

                entity.Property(e => e.TransTypeId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("trans_type_id")
                    .HasComment("ID tipe transaksi");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.MenuId)
                    .HasColumnName("menu_id")
                    .HasComment("ID menu");

                entity.Property(e => e.TransTypeDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("trans_type_desc")
                    .HasComment("deskripsi dari tipe transaksi");
            });

            modelBuilder.Entity<MsTypeOfServiceBureauNecessity>(entity =>
            {
                entity.HasKey(e => e.ReasonId);

                entity.ToTable("ms_type_of_service_bureau_necessity");

                entity.Property(e => e.ReasonId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("reason_id")
                    .HasComment("ID alasan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.ReasonName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("reason_name")
                    .HasComment("deskripsi dari alasan");
            });

            modelBuilder.Entity<MsUppingOtr>(entity =>
            {
                entity.HasKey(e => new { e.ItemId, e.ItemMerkId, e.ItemMerkTypeId });

                entity.ToTable("ms_upping_OTR");

                entity.Property(e => e.ItemId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("item_id")
                    .HasComment("ID item");

                entity.Property(e => e.ItemMerkId)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("item_merk_id")
                    .HasComment("ID merk item");

                entity.Property(e => e.ItemMerkTypeId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("item_merk_type_id")
                    .HasComment("ID tipe merk item");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.MaxValue)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("max_value")
                    .HasComment("nilai maksimum");

                entity.Property(e => e.UppingValue)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("upping_value")
                    .HasComment("nilai kenaikan");
            });

            modelBuilder.Entity<MsUsageType>(entity =>
            {
                entity.HasKey(e => e.UsageTypeId)
                    .HasName("PK__ms_usage__D963C1AA702E459D");

                entity.ToTable("ms_usage_type");

                entity.Property(e => e.UsageTypeId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("usage_type_id")
                    .HasComment("ID tipe pemakaian");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.UsageTypeName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("usage_type_name")
                    .HasComment("nama tipe pemakaian");
            });

            modelBuilder.Entity<MsUserPosition>(entity =>
            {
                entity.HasKey(e => new { e.PositionId, e.EmployeeId });

                entity.ToTable("ms_user_position");

                entity.Property(e => e.PositionId)
                    .HasColumnName("position_id")
                    .HasComment("ID posisi/jabatan");

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("employee_id")
                    .HasComment("Nomor Induk Karyawan (NIK)");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");
            });

            modelBuilder.Entity<MsVehicleCc>(entity =>
            {
                entity.HasKey(e => e.VehicleCcId)
                    .HasName("PK__ms_vehic__2701CF8A1A2FFE1A");

                entity.ToTable("ms_vehicle_cc");

                entity.Property(e => e.VehicleCcId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("vehicle_cc_id")
                    .HasComment("ID cc kendaraan");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.VehicleCc)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("vehicle_cc")
                    .HasComment("cc kendaraan");
            });

            modelBuilder.Entity<MsVehicleColor>(entity =>
            {
                entity.HasKey(e => e.VehicleColorId)
                    .HasName("PK__ms_vehic__813505B55B1DE244");

                entity.ToTable("ms_vehicle_color");

                entity.Property(e => e.VehicleColorId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("vehicle_color_id")
                    .HasComment("ID warna kendaraan");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.VehicleColorName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("vehicle_color_name")
                    .HasComment("nama warna kendaraan");
            });

            modelBuilder.Entity<MsVerificationCustomerStatus>(entity =>
            {
                entity.HasKey(e => e.VerificationId);

                entity.ToTable("ms_verification_customer_status");

                entity.Property(e => e.VerificationId)
                    .ValueGeneratedNever()
                    .HasColumnName("verification_id")
                    .HasComment("ID verifikasi");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.VerificationStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("verification_status_description")
                    .HasComment("deskripsi status verifikasi");
            });

            modelBuilder.Entity<MsVillage>(entity =>
            {
                entity.HasKey(e => e.VillageId);

                entity.ToTable("ms_village");

                entity.Property(e => e.VillageId)
                    .HasColumnName("village_id")
                    .HasComment("id kelurahan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.DistrictId)
                    .HasColumnName("district_id")
                    .HasComment("id kecamatan");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.VillageName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("village_name")
                    .HasComment("nama kelurahan");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.MsVillage)
                    .HasForeignKey(d => d.DistrictId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ms_village_ms_district");
            });

            modelBuilder.Entity<MsYearFrame>(entity =>
            {
                entity.HasKey(e => e.ChasisCode)
                    .HasName("PK_ms_rangka_tahun");

                entity.ToTable("ms_year_frame");

                entity.Property(e => e.ChasisCode)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("chasis_code")
                    .HasComment("kode rangka");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasComment("tanggal & waktu pembuatan master data");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on")
                    .HasComment("user yang membuat master data");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("indikator aktif atau tidaknya master data");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by")
                    .HasComment("tanggal & waktu perubahan master data");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on")
                    .HasComment("user yang mengubah master data");

                entity.Property(e => e.VehicleYear)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("vehicle_year")
                    .HasComment("tahun kendaraan");
            });

            modelBuilder.Entity<TrAgentDocument>(entity =>
            {
                entity.HasKey(e => new { e.AgentId, e.DocumentId });

                entity.ToTable("tr_agent_document");

                entity.Property(e => e.AgentId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("agent_id");

                entity.Property(e => e.DocumentId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("document_id");

                entity.Property(e => e.AgentDocumentFileName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("agent_document_file_name");

                entity.Property(e => e.AgentDocumentFilePath)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("agent_document_file_path");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("created_by");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("created_on");

                entity.Property(e => e.LastUpdatedBy)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("last_updated_by");

                entity.Property(e => e.LastUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("last_updated_on");
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}