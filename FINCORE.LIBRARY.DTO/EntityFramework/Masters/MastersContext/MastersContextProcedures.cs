// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using FINCORE.LIBRARY.DTO.EntityFramwork.Masters.MastersModels;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace FINCORE.LIBRARY.DTO.EntityFramework.Masters.MastersContext
{
    public partial class MastersContext
    {
        private IMastersContextProcedures _procedures;

        public virtual IMastersContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new MastersContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IMastersContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<sp_get_agent_ms_detail_by_idResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_agent_ms_docResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_company_branch_listResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_credit_sourceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_customer_sourceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_customer_typeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_employee_surcodeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_evaluationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_hirarki_menu_by_userResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_industry_typeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_locationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_location_byidResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_marital_statusResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_monthly_other_installmentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_msreferencetype_refnameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_ownership_proofResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_BPKBReceiverResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_BPKBTypeOfBureauNecessityResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_lookup_agentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_lookup_bankResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_lookup_incentive_codeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_master_agent_msResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_pagination_npp_dealer_bank_accountResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_professionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_relationshipResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_residence_statusResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_get_sourceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_insert_agentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_update_agentResult>().HasNoKey().ToView(null);
        }
    }

    public partial class MastersContextProcedures : IMastersContextProcedures
    {
        private readonly MastersContext _context;

        public MastersContextProcedures(MastersContext context)
        {
            _context = context;
        }

        public virtual async Task<List<sp_get_agent_ms_detail_by_idResult>> sp_get_agent_ms_detail_by_idAsync(string agentId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "agentId",
                    Size = 20,
                    Value = agentId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_agent_ms_detail_by_idResult>("EXEC @returnValue = [dbo].[sp_get_agent_ms_detail_by_id] @agentId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_agent_ms_docResult>> sp_get_agent_ms_docAsync(string agent_id, string agent_type_id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "agent_id",
                    Size = 20,
                    Value = agent_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "agent_type_id",
                    Size = 3,
                    Value = agent_type_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_agent_ms_docResult>("EXEC @returnValue = [dbo].[sp_get_agent_ms_doc] @agent_id, @agent_type_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_company_branch_listResult>> sp_get_company_branch_listAsync(string company_id, string NIK, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "company_id",
                    Size = 10,
                    Value = company_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NIK",
                    Size = 10,
                    Value = NIK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_company_branch_listResult>("EXEC @returnValue = [dbo].[sp_get_company_branch_list] @company_id, @NIK", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_credit_sourceResult>> sp_get_credit_sourceAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_credit_sourceResult>("EXEC @returnValue = [dbo].[sp_get_credit_source]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_customer_sourceResult>> sp_get_customer_sourceAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_customer_sourceResult>("EXEC @returnValue = [dbo].[sp_get_customer_source]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_customer_typeResult>> sp_get_customer_typeAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_customer_typeResult>("EXEC @returnValue = [dbo].[sp_get_customer_type]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_employee_surcodeResult>> sp_get_employee_surcodeAsync(string NIKsurveryorcode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NIKsurveryorcode",
                    Size = 50,
                    Value = NIKsurveryorcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_employee_surcodeResult>("EXEC @returnValue = [dbo].[sp_get_employee_surcode] @NIKsurveryorcode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_evaluationResult>> sp_get_evaluationAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_evaluationResult>("EXEC @returnValue = [dbo].[sp_get_evaluation]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_hirarki_menu_by_userResult>> sp_get_hirarki_menu_by_userAsync(string NIK, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NIK",
                    Size = 15,
                    Value = NIK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_hirarki_menu_by_userResult>("EXEC @returnValue = [dbo].[sp_get_hirarki_menu_by_user] @NIK", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_industry_typeResult>> sp_get_industry_typeAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_industry_typeResult>("EXEC @returnValue = [dbo].[sp_get_industry_type]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_locationResult>> sp_get_locationAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_locationResult>("EXEC @returnValue = [dbo].[sp_get_location]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_location_byidResult>> sp_get_location_byidAsync(int? locationId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "locationId",
                    Value = locationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_location_byidResult>("EXEC @returnValue = [dbo].[sp_get_location_byid] @locationId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_marital_statusResult>> sp_get_marital_statusAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_marital_statusResult>("EXEC @returnValue = [dbo].[sp_get_marital_status]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_monthly_other_installmentResult>> sp_get_monthly_other_installmentAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_monthly_other_installmentResult>("EXEC @returnValue = [dbo].[sp_get_monthly_other_installment]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_msreferencetype_refnameResult>> sp_get_msreferencetype_refnameAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_msreferencetype_refnameResult>("EXEC @returnValue = [dbo].[sp_get_msreferencetype_refname]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_ownership_proofResult>> sp_get_ownership_proofAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_ownership_proofResult>("EXEC @returnValue = [dbo].[sp_get_ownership_proof]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_BPKBReceiverResult>> sp_get_pagination_BPKBReceiverAsync(string SearchTerm, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_BPKBReceiverResult>("EXEC @returnValue = [dbo].[sp_get_pagination_BPKBReceiver] @SearchTerm, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_BPKBTypeOfBureauNecessityResult>> sp_get_pagination_BPKBTypeOfBureauNecessityAsync(string SearchTerm, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_BPKBTypeOfBureauNecessityResult>("EXEC @returnValue = [dbo].[sp_get_pagination_BPKBTypeOfBureauNecessity] @SearchTerm, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_lookup_agentResult>> sp_get_pagination_lookup_agentAsync(string SearchTerm, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_lookup_agentResult>("EXEC @returnValue = [dbo].[sp_get_pagination_lookup_agent] @SearchTerm, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_lookup_bankResult>> sp_get_pagination_lookup_bankAsync(string SearchTerm, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_lookup_bankResult>("EXEC @returnValue = [dbo].[sp_get_pagination_lookup_bank] @SearchTerm, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_lookup_incentive_codeResult>> sp_get_pagination_lookup_incentive_codeAsync(string SearchTerm, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_lookup_incentive_codeResult>("EXEC @returnValue = [dbo].[sp_get_pagination_lookup_incentive_code] @SearchTerm, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_master_agent_msResult>> sp_get_pagination_master_agent_msAsync(string SearchTerm, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_master_agent_msResult>("EXEC @returnValue = [dbo].[sp_get_pagination_master_agent_ms] @SearchTerm, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_pagination_npp_dealer_bank_accountResult>> sp_get_pagination_npp_dealer_bank_accountAsync(string SearchTerm, OutputParameter<int?> PageIndex, OutputParameter<double?> PageSize, OutputParameter<int?> TotalPages, OutputParameter<double?> RecordCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPageIndex = new SqlParameter
            {
                ParameterName = "PageIndex",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageIndex?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterPageSize = new SqlParameter
            {
                ParameterName = "PageSize",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PageSize?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterTotalPages = new SqlParameter
            {
                ParameterName = "TotalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterRecordCount = new SqlParameter
            {
                ParameterName = "RecordCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RecordCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterPageIndex,
                parameterPageSize,
                parameterTotalPages,
                parameterRecordCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_pagination_npp_dealer_bank_accountResult>("EXEC @returnValue = [dbo].[sp_get_pagination_npp_dealer_bank_account] @SearchTerm, @PageIndex OUTPUT, @PageSize OUTPUT, @TotalPages OUTPUT, @RecordCount OUTPUT", sqlParameters, cancellationToken);

            PageIndex.SetValue(parameterPageIndex.Value);
            PageSize.SetValue(parameterPageSize.Value);
            TotalPages.SetValue(parameterTotalPages.Value);
            RecordCount.SetValue(parameterRecordCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_professionResult>> sp_get_professionAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_professionResult>("EXEC @returnValue = [dbo].[sp_get_profession]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_relationshipResult>> sp_get_relationshipAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_relationshipResult>("EXEC @returnValue = [dbo].[sp_get_relationship]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_residence_statusResult>> sp_get_residence_statusAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_residence_statusResult>("EXEC @returnValue = [dbo].[sp_get_residence_status]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_sourceResult>> sp_get_sourceAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_sourceResult>("EXEC @returnValue = [dbo].[sp_get_source]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_insert_agentResult>> sp_insert_agentAsync(string BranchID, string AgentID, string TipePerantara, string AgentName, string InsentifID, string Address, string City, string Phone, string HP, string Pekerjaan, int? IdentitasID, string NoIdentitas, string BankID, bool? IsActive, bool? IsNPWP, string TipeNPWP, string NoNPWP, string NamaNPWP, string AlamatNPWP, string reference, string doc_perjanjian_kerja_sama_name, string doc_perjanjian_kerja_sama_path, string doc_surat_rekomendasi_kacab_name, string doc_surat_rekomendasi_kacab_path, string doc_ktp_name, string doc_ktp_path, string doc_buku_tabungan_name, string doc_buku_tabungan_path, string doc_npwp_name, string doc_npwp_path, string doc_foto_bersama_mh_kacab_name, string doc_foto_bersama_mh_kacab_path, string Status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 5,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AgentID",
                    Size = 10,
                    Value = AgentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipePerantara",
                    Size = 3,
                    Value = TipePerantara ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AgentName",
                    Size = 50,
                    Value = AgentName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InsentifID",
                    Size = 6,
                    Value = InsentifID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Address",
                    Size = 200,
                    Value = Address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "City",
                    Size = 20,
                    Value = City ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Phone",
                    Size = 30,
                    Value = Phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HP",
                    Size = 30,
                    Value = HP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Pekerjaan",
                    Size = 30,
                    Value = Pekerjaan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdentitasID",
                    Value = IdentitasID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NoIdentitas",
                    Size = 30,
                    Value = NoIdentitas ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankID",
                    Size = 7,
                    Value = BankID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsActive",
                    Value = IsActive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IsNPWP",
                    Value = IsNPWP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "TipeNPWP",
                    Size = 25,
                    Value = TipeNPWP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NoNPWP",
                    Size = 20,
                    Value = NoNPWP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NamaNPWP",
                    Size = 30,
                    Value = NamaNPWP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AlamatNPWP",
                    Size = 200,
                    Value = AlamatNPWP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "reference",
                    Size = 6,
                    Value = reference ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "doc_perjanjian_kerja_sama_name",
                    Size = 100,
                    Value = doc_perjanjian_kerja_sama_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "doc_perjanjian_kerja_sama_path",
                    Size = 255,
                    Value = doc_perjanjian_kerja_sama_path ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "doc_surat_rekomendasi_kacab_name",
                    Size = 100,
                    Value = doc_surat_rekomendasi_kacab_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "doc_surat_rekomendasi_kacab_path",
                    Size = 255,
                    Value = doc_surat_rekomendasi_kacab_path ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "doc_ktp_name",
                    Size = 100,
                    Value = doc_ktp_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "doc_ktp_path",
                    Size = 255,
                    Value = doc_ktp_path ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "doc_buku_tabungan_name",
                    Size = 100,
                    Value = doc_buku_tabungan_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "doc_buku_tabungan_path",
                    Size = 255,
                    Value = doc_buku_tabungan_path ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "doc_npwp_name",
                    Size = 100,
                    Value = doc_npwp_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "doc_npwp_path",
                    Size = 255,
                    Value = doc_npwp_path ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "doc_foto_bersama_mh_kacab_name",
                    Size = 100,
                    Value = doc_foto_bersama_mh_kacab_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "doc_foto_bersama_mh_kacab_path",
                    Size = 255,
                    Value = doc_foto_bersama_mh_kacab_path ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Size = 2,
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_insert_agentResult>("EXEC @returnValue = [dbo].[sp_insert_agent] @BranchID, @AgentID, @TipePerantara, @AgentName, @InsentifID, @Address, @City, @Phone, @HP, @Pekerjaan, @IdentitasID, @NoIdentitas, @BankID, @IsActive, @IsNPWP, @TipeNPWP, @NoNPWP, @NamaNPWP, @AlamatNPWP, @reference, @doc_perjanjian_kerja_sama_name, @doc_perjanjian_kerja_sama_path, @doc_surat_rekomendasi_kacab_name, @doc_surat_rekomendasi_kacab_path, @doc_ktp_name, @doc_ktp_path, @doc_buku_tabungan_name, @doc_buku_tabungan_path, @doc_npwp_name, @doc_npwp_path, @doc_foto_bersama_mh_kacab_name, @doc_foto_bersama_mh_kacab_path, @Status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_update_agentResult>> sp_update_agentAsync(string BranchID, string AgentID, string TipePerantara, string AgentName, string InsentifID, string Address, string City, string Phone, string HP, string Pekerjaan, int? IdentitasID, string NoIdentitas, string BankID, bool? IsActive, bool? IsNPWP, string TipeNPWP, string NoNPWP, string NamaNPWP, string AlamatNPWP, string reference, string doc_perjanjian_kerja_sama_name, string doc_perjanjian_kerja_sama_path, string doc_surat_rekomendasi_kacab_name, string doc_surat_rekomendasi_kacab_path, string doc_ktp_name, string doc_ktp_path, string doc_buku_tabungan_name, string doc_buku_tabungan_path, string doc_npwp_name, string doc_npwp_path, string doc_foto_bersama_mh_kacab_name, string doc_foto_bersama_mh_kacab_path, string Status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 5,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AgentID",
                    Size = 10,
                    Value = AgentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipePerantara",
                    Size = 3,
                    Value = TipePerantara ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AgentName",
                    Size = 50,
                    Value = AgentName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InsentifID",
                    Size = 6,
                    Value = InsentifID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Address",
                    Size = 200,
                    Value = Address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "City",
                    Size = 20,
                    Value = City ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Phone",
                    Size = 30,
                    Value = Phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HP",
                    Size = 30,
                    Value = HP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Pekerjaan",
                    Size = 30,
                    Value = Pekerjaan ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdentitasID",
                    Value = IdentitasID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NoIdentitas",
                    Size = 30,
                    Value = NoIdentitas ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankID",
                    Size = 7,
                    Value = BankID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsActive",
                    Value = IsActive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IsNPWP",
                    Value = IsNPWP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "TipeNPWP",
                    Size = 25,
                    Value = TipeNPWP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NoNPWP",
                    Size = 20,
                    Value = NoNPWP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NamaNPWP",
                    Size = 30,
                    Value = NamaNPWP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AlamatNPWP",
                    Size = 200,
                    Value = AlamatNPWP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "reference",
                    Size = 6,
                    Value = reference ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "doc_perjanjian_kerja_sama_name",
                    Size = 100,
                    Value = doc_perjanjian_kerja_sama_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "doc_perjanjian_kerja_sama_path",
                    Size = 255,
                    Value = doc_perjanjian_kerja_sama_path ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "doc_surat_rekomendasi_kacab_name",
                    Size = 100,
                    Value = doc_surat_rekomendasi_kacab_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "doc_surat_rekomendasi_kacab_path",
                    Size = 255,
                    Value = doc_surat_rekomendasi_kacab_path ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "doc_ktp_name",
                    Size = 100,
                    Value = doc_ktp_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "doc_ktp_path",
                    Size = 255,
                    Value = doc_ktp_path ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "doc_buku_tabungan_name",
                    Size = 100,
                    Value = doc_buku_tabungan_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "doc_buku_tabungan_path",
                    Size = 255,
                    Value = doc_buku_tabungan_path ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "doc_npwp_name",
                    Size = 100,
                    Value = doc_npwp_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "doc_npwp_path",
                    Size = 255,
                    Value = doc_npwp_path ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "doc_foto_bersama_mh_kacab_name",
                    Size = 100,
                    Value = doc_foto_bersama_mh_kacab_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "doc_foto_bersama_mh_kacab_path",
                    Size = 255,
                    Value = doc_foto_bersama_mh_kacab_path ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Size = 2,
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_update_agentResult>("EXEC @returnValue = [dbo].[sp_update_agent] @BranchID, @AgentID, @TipePerantara, @AgentName, @InsentifID, @Address, @City, @Phone, @HP, @Pekerjaan, @IdentitasID, @NoIdentitas, @BankID, @IsActive, @IsNPWP, @TipeNPWP, @NoNPWP, @NamaNPWP, @AlamatNPWP, @reference, @doc_perjanjian_kerja_sama_name, @doc_perjanjian_kerja_sama_path, @doc_surat_rekomendasi_kacab_name, @doc_surat_rekomendasi_kacab_path, @doc_ktp_name, @doc_ktp_path, @doc_buku_tabungan_name, @doc_buku_tabungan_path, @doc_npwp_name, @doc_npwp_path, @doc_foto_bersama_mh_kacab_name, @doc_foto_bersama_mh_kacab_path, @Status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
